
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcbc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800be90  0800be90  0001be90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3cc  0800c3cc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c3cc  0800c3cc  0001c3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3d4  0800c3d4  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3d4  0800c3d4  0001c3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3d8  0800c3d8  0001c3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047ac  200001f4  0800c5d0  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049a0  0800c5d0  000249a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185f0  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000354d  00000000  00000000  00038814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0003bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f38  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026482  00000000  00000000  0003dd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016417  00000000  00000000  000641a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcef7  00000000  00000000  0007a5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001574b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00157504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800be74 	.word	0x0800be74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f8 	.word	0x200001f8
 800020c:	0800be74 	.word	0x0800be74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af0a      	add	r7, sp, #40	; 0x28
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	817b      	strh	r3, [r7, #10]
 8000f92:	460b      	mov	r3, r1
 8000f94:	813b      	strh	r3, [r7, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <LiquidCrystal+0x90>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d019      	beq.n	8000fd6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000fa2:	8939      	ldrh	r1, [r7, #8]
 8000fa4:	897a      	ldrh	r2, [r7, #10]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9308      	str	r3, [sp, #32]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9307      	str	r3, [sp, #28]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9306      	str	r3, [sp, #24]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9305      	str	r3, [sp, #20]
 8000fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb8:	9304      	str	r3, [sp, #16]
 8000fba:	8c3b      	ldrh	r3, [r7, #32]
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	8bbb      	ldrh	r3, [r7, #28]
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	8b3b      	ldrh	r3, [r7, #24]
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 f820 	bl	8001014 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000fd4:	e018      	b.n	8001008 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000fd6:	8939      	ldrh	r1, [r7, #8]
 8000fd8:	897a      	ldrh	r2, [r7, #10]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9308      	str	r3, [sp, #32]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9307      	str	r3, [sp, #28]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9306      	str	r3, [sp, #24]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9305      	str	r3, [sp, #20]
 8000fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fec:	9304      	str	r3, [sp, #16]
 8000fee:	8c3b      	ldrh	r3, [r7, #32]
 8000ff0:	9303      	str	r3, [sp, #12]
 8000ff2:	8bbb      	ldrh	r3, [r7, #28]
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	8b3b      	ldrh	r3, [r7, #24]
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	460b      	mov	r3, r1
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f806 	bl	8001014 <init>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000

08001014 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	4611      	mov	r1, r2
 800101e:	461a      	mov	r2, r3
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	460b      	mov	r3, r1
 8001026:	81bb      	strh	r3, [r7, #12]
 8001028:	4613      	mov	r3, r2
 800102a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <init+0x84>)
 800102e:	89bb      	ldrh	r3, [r7, #12]
 8001030:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <init+0x88>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <init+0x8c>)
 800103a:	8b3b      	ldrh	r3, [r7, #24]
 800103c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <init+0x90>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <init+0x94>)
 8001046:	8bbb      	ldrh	r3, [r7, #28]
 8001048:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <init+0x94>)
 800104c:	8c3b      	ldrh	r3, [r7, #32]
 800104e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8001050:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <init+0x94>)
 8001052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001054:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <init+0x94>)
 8001058:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800105a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <init+0x94>)
 800105e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001060:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <init+0x94>)
 8001064:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001066:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <init+0x94>)
 800106a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800106c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <init+0x94>)
 8001070:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001072:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e002      	b.n	8001088 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <init+0x98>)
 8001084:	2210      	movs	r2, #16
 8001086:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8001088:	2102      	movs	r1, #2
 800108a:	2010      	movs	r0, #16
 800108c:	f000 f810 	bl	80010b0 <begin>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000308 	.word	0x20000308
 800109c:	200002e8 	.word	0x200002e8
 80010a0:	20000306 	.word	0x20000306
 80010a4:	200002ec 	.word	0x200002ec
 80010a8:	200002f4 	.word	0x200002f4
 80010ac:	20000305 	.word	0x20000305

080010b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d906      	bls.n	80010d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80010c6:	4b77      	ldr	r3, [pc, #476]	; (80012a4 <begin+0x1f4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b74      	ldr	r3, [pc, #464]	; (80012a4 <begin+0x1f4>)
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80010d4:	4a74      	ldr	r2, [pc, #464]	; (80012a8 <begin+0x1f8>)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	3340      	adds	r3, #64	; 0x40
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f998 	bl	8001418 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80010e8:	4b70      	ldr	r3, [pc, #448]	; (80012ac <begin+0x1fc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d009      	beq.n	8001104 <begin+0x54>
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d106      	bne.n	8001104 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80010f6:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <begin+0x1f4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <begin+0x1f4>)
 8001102:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8001104:	f000 f8e4 	bl	80012d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8001110:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <begin+0x200>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01b      	beq.n	8001150 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8001118:	4b66      	ldr	r3, [pc, #408]	; (80012b4 <begin+0x204>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <begin+0x208>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4313      	orrs	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b65      	ldr	r3, [pc, #404]	; (80012bc <begin+0x20c>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	4313      	orrs	r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <begin+0x210>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4313      	orrs	r3, r2
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <begin+0x210>)
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	4313      	orrs	r3, r2
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <begin+0x210>)
 800113e:	889b      	ldrh	r3, [r3, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <begin+0x210>)
 8001146:	88db      	ldrh	r3, [r3, #6]
 8001148:	4313      	orrs	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e02a      	b.n	80011a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <begin+0x204>)
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <begin+0x208>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b57      	ldr	r3, [pc, #348]	; (80012bc <begin+0x20c>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	4313      	orrs	r3, r2
 8001162:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001164:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <begin+0x210>)
 8001166:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001168:	4313      	orrs	r3, r2
 800116a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800116c:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <begin+0x210>)
 800116e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001170:	4313      	orrs	r3, r2
 8001172:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <begin+0x210>)
 8001176:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001178:	4313      	orrs	r3, r2
 800117a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <begin+0x210>)
 800117e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001180:	4313      	orrs	r3, r2
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <begin+0x210>)
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <begin+0x210>)
 800118e:	895b      	ldrh	r3, [r3, #10]
 8001190:	4313      	orrs	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <begin+0x210>)
 8001196:	899b      	ldrh	r3, [r3, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <begin+0x210>)
 800119e:	89db      	ldrh	r3, [r3, #14]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80011a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <begin+0x214>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fa43 	bl	800463c <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f001 ffd2 	bl	8003160 <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <begin+0x214>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3c      	ldr	r2, [pc, #240]	; (80012b4 <begin+0x204>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fbcc 	bl	8004964 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <begin+0x214>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a3a      	ldr	r2, [pc, #232]	; (80012bc <begin+0x20c>)
 80011d2:	8811      	ldrh	r1, [r2, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fbc4 	bl	8004964 <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <begin+0x208>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d007      	beq.n	80011f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <begin+0x214>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <begin+0x208>)
 80011ea:	8811      	ldrh	r1, [r2, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fbb8 	bl	8004964 <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <begin+0x1f4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d115      	bne.n	800122c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 fa2b 	bl	800165c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001206:	2005      	movs	r0, #5
 8001208:	f001 ffaa 	bl	8003160 <HAL_Delay>

    // second try
    write4bits(0x03);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fa25 	bl	800165c <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001212:	2005      	movs	r0, #5
 8001214:	f001 ffa4 	bl	8003160 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 fa1f 	bl	800165c <write4bits>
    HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f001 ff9e 	bl	8003160 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8001224:	2002      	movs	r0, #2
 8001226:	f000 fa19 	bl	800165c <write4bits>
 800122a:	e01d      	b.n	8001268 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <begin+0x1f4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f98b 	bl	8001552 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800123c:	2005      	movs	r0, #5
 800123e:	f001 ff8f 	bl	8003160 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <begin+0x1f4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f980 	bl	8001552 <command>
    HAL_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f001 ff84 	bl	8003160 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <begin+0x1f4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f975 	bl	8001552 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <begin+0x1f4>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f96d 	bl	8001552 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <begin+0x218>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
  display();
 800127e:	f000 f927 	bl	80014d0 <display>

  // clear it off
  clear();
 8001282:	f000 f8e9 	bl	8001458 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <begin+0x21c>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <begin+0x21c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f95b 	bl	8001552 <command>

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000305 	.word	0x20000305
 80012a8:	200002f1 	.word	0x200002f1
 80012ac:	20000210 	.word	0x20000210
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000308 	.word	0x20000308
 80012b8:	200002e8 	.word	0x200002e8
 80012bc:	20000306 	.word	0x20000306
 80012c0:	200002f4 	.word	0x200002f4
 80012c4:	200002ec 	.word	0x200002ec
 80012c8:	200002f0 	.word	0x200002f0
 80012cc:	20000304 	.word	0x20000304

080012d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80012d6:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <enableClock+0x128>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a48      	ldr	r2, [pc, #288]	; (80013fc <enableClock+0x12c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d10e      	bne.n	80012fe <enableClock+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <enableClock+0x130>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <enableClock+0x130>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <enableClock+0x130>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80012fc:	e076      	b.n	80013ec <enableClock+0x11c>
  else if(_port == GPIOB)
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <enableClock+0x128>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <enableClock+0x134>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10e      	bne.n	8001326 <enableClock+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <enableClock+0x130>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a3b      	ldr	r2, [pc, #236]	; (8001400 <enableClock+0x130>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <enableClock+0x130>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
}
 8001324:	e062      	b.n	80013ec <enableClock+0x11c>
  else if(_port == GPIOB)
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <enableClock+0x128>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <enableClock+0x134>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10e      	bne.n	800134e <enableClock+0x7e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <enableClock+0x130>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <enableClock+0x130>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <enableClock+0x130>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
}
 800134c:	e04e      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOC)
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <enableClock+0x128>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <enableClock+0x138>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d10e      	bne.n	8001376 <enableClock+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <enableClock+0x130>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <enableClock+0x130>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <enableClock+0x130>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
}
 8001374:	e03a      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOD)
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <enableClock+0x128>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a24      	ldr	r2, [pc, #144]	; (800140c <enableClock+0x13c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d10e      	bne.n	800139e <enableClock+0xce>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <enableClock+0x130>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <enableClock+0x130>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <enableClock+0x130>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	e026      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOE)
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <enableClock+0x128>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <enableClock+0x140>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d10e      	bne.n	80013c6 <enableClock+0xf6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <enableClock+0x130>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <enableClock+0x130>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <enableClock+0x130>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
}
 80013c4:	e012      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOF)
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <enableClock+0x128>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <enableClock+0x144>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d10d      	bne.n	80013ec <enableClock+0x11c>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <enableClock+0x130>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a09      	ldr	r2, [pc, #36]	; (8001400 <enableClock+0x130>)
 80013da:	f043 0320 	orr.w	r3, r3, #32
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <enableClock+0x130>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	bf00      	nop
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	200002ec 	.word	0x200002ec
 80013fc:	40020000 	.word	0x40020000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40021400 	.word	0x40021400

08001418 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <setRowOffsets+0x3c>)
 800142c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <setRowOffsets+0x3c>)
 8001434:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <setRowOffsets+0x3c>)
 800143c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <setRowOffsets+0x3c>)
 8001444:	70da      	strb	r2, [r3, #3]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200002e4 	.word	0x200002e4

08001458 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800145c:	2001      	movs	r0, #1
 800145e:	f000 f878 	bl	8001552 <command>
  HAL_Delay(2);  // this command takes a long time!
 8001462:	2002      	movs	r0, #2
 8001464:	f001 fe7c 	bl	8003160 <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800147c:	2304      	movs	r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d803      	bhi.n	8001490 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	3b01      	subs	r3, #1
 800148e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <setCursor+0x5c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	79ba      	ldrb	r2, [r7, #6]
 8001496:	429a      	cmp	r2, r3
 8001498:	d303      	bcc.n	80014a2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <setCursor+0x5c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <setCursor+0x60>)
 80014a6:	5cd2      	ldrb	r2, [r2, r3]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4413      	add	r3, r2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f84a 	bl	8001552 <command>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002f1 	.word	0x200002f1
 80014cc:	200002e4 	.word	0x200002e4

080014d0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <display+0x28>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <display+0x28>)
 80014e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <display+0x28>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f830 	bl	8001552 <command>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002f0 	.word	0x200002f0

080014fc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <print+0x12>
 800150a:	2300      	movs	r3, #0
 800150c:	e01d      	b.n	800154a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe fe7c 	bl	8000210 <strlen>
 8001518:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800151e:	e00c      	b.n	800153a <print+0x3e>
    if (write(*buffer++)) n++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	617a      	str	r2, [r7, #20]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f820 	bl	800156e <write>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <print+0x4a>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1e5a      	subs	r2, r3, #1
 800153e:	613a      	str	r2, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ed      	bne.n	8001520 <print+0x24>
 8001544:	e000      	b.n	8001548 <print+0x4c>
    else break;
 8001546:	bf00      	nop
  }
  return n;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2100      	movs	r1, #0
 8001560:	4618      	mov	r0, r3
 8001562:	f000 f813 	bl	800158c <send>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <write>:

inline size_t write(uint8_t value) {
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2101      	movs	r1, #1
 800157c:	4618      	mov	r0, r3
 800157e:	f000 f805 	bl	800158c <send>
  return 1; // assume sucess
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	71fb      	strb	r3, [r7, #7]
 8001598:	4613      	mov	r3, r2
 800159a:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <send+0x6c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <send+0x70>)
 80015a2:	8811      	ldrh	r1, [r2, #0]
 80015a4:	79ba      	ldrb	r2, [r7, #6]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 f9dc 	bl	8004964 <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <send+0x74>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	2bff      	cmp	r3, #255	; 0xff
 80015b2:	d007      	beq.n	80015c4 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <send+0x6c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a11      	ldr	r2, [pc, #68]	; (8001600 <send+0x74>)
 80015ba:	8811      	ldrh	r1, [r2, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 f9d0 	bl	8004964 <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <send+0x78>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <send+0x4e>
    write8bits(value);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f86c 	bl	80016b0 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 80015d8:	e009      	b.n	80015ee <send+0x62>
    write4bits(value>>4);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	091b      	lsrs	r3, r3, #4
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f83b 	bl	800165c <write4bits>
    write4bits(value);
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f837 	bl	800165c <write4bits>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200002ec 	.word	0x200002ec
 80015fc:	20000308 	.word	0x20000308
 8001600:	200002e8 	.word	0x200002e8
 8001604:	20000305 	.word	0x20000305

08001608 <pulseEnable>:

void pulseEnable(void) {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <pulseEnable+0x4c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <pulseEnable+0x50>)
 8001612:	8811      	ldrh	r1, [r2, #0]
 8001614:	2200      	movs	r2, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f003 f9a4 	bl	8004964 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800161c:	2001      	movs	r0, #1
 800161e:	f001 fd9f 	bl	8003160 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <pulseEnable+0x4c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <pulseEnable+0x50>)
 8001628:	8811      	ldrh	r1, [r2, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f003 f999 	bl	8004964 <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8001632:	2001      	movs	r0, #1
 8001634:	f001 fd94 	bl	8003160 <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <pulseEnable+0x4c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <pulseEnable+0x50>)
 800163e:	8811      	ldrh	r1, [r2, #0]
 8001640:	2200      	movs	r2, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f003 f98e 	bl	8004964 <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 8001648:	2001      	movs	r0, #1
 800164a:	f001 fd89 	bl	8003160 <HAL_Delay>
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200002ec 	.word	0x200002ec
 8001658:	20000306 	.word	0x20000306

0800165c <write4bits>:

void write4bits(uint8_t value) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	e013      	b.n	8001694 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <write4bits+0x4c>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <write4bits+0x50>)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001678:	79fa      	ldrb	r2, [r7, #7]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	fa42 f303 	asr.w	r3, r2, r3
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	f003 f96b 	bl	8004964 <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	3301      	adds	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b03      	cmp	r3, #3
 8001698:	dde8      	ble.n	800166c <write4bits+0x10>
  }

  pulseEnable();
 800169a:	f7ff ffb5 	bl	8001608 <pulseEnable>
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002ec 	.word	0x200002ec
 80016ac:	200002f4 	.word	0x200002f4

080016b0 <write8bits>:

void write8bits(uint8_t value) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e013      	b.n	80016e8 <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <write8bits+0x4c>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <write8bits+0x50>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	fa42 f303 	asr.w	r3, r2, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	f003 f941 	bl	8004964 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	dde8      	ble.n	80016c0 <write8bits+0x10>
  }

  pulseEnable();
 80016ee:	f7ff ff8b 	bl	8001608 <pulseEnable>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200002ec 	.word	0x200002ec
 8001700:	200002f4 	.word	0x200002f4

08001704 <SELECT>:
 * SPI functions
 **************************************/

/* SPI chip select */
static void SELECT(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800170e:	4804      	ldr	r0, [pc, #16]	; (8001720 <SELECT+0x1c>)
 8001710:	f003 f928 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f001 fd23 	bl	8003160 <HAL_Delay>
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40020800 	.word	0x40020800

08001724 <DESELECT>:

/* SPI chip deselect */
static void DESELECT(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <DESELECT+0x1c>)
 8001730:	f003 f918 	bl	8004964 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001734:	2001      	movs	r0, #1
 8001736:	f001 fd13 	bl	8003160 <HAL_Delay>
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40020800 	.word	0x40020800

08001744 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800174e:	bf00      	nop
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <SPI_TxByte+0x30>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	2b02      	cmp	r3, #2
 800175c:	d1f8      	bne.n	8001750 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800175e:	1df9      	adds	r1, r7, #7
 8001760:	2364      	movs	r3, #100	; 0x64
 8001762:	2201      	movs	r2, #1
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <SPI_TxByte+0x30>)
 8001766:	f003 ff22 	bl	80055ae <HAL_SPI_Transmit>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	2000184c 	.word	0x2000184c

08001778 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001784:	bf00      	nop
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <SPI_TxBuffer+0x30>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b02      	cmp	r3, #2
 8001792:	d1f8      	bne.n	8001786 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4803      	ldr	r0, [pc, #12]	; (80017a8 <SPI_TxBuffer+0x30>)
 800179c:	f003 ff07 	bl	80055ae <HAL_SPI_Transmit>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000184c 	.word	0x2000184c

080017ac <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80017b2:	23ff      	movs	r3, #255	; 0xff
 80017b4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017b6:	bf00      	nop
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <SPI_RxByte+0x34>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d1f8      	bne.n	80017b8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80017c6:	1dba      	adds	r2, r7, #6
 80017c8:	1df9      	adds	r1, r7, #7
 80017ca:	2364      	movs	r3, #100	; 0x64
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	2301      	movs	r3, #1
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <SPI_RxByte+0x34>)
 80017d2:	f004 f828 	bl	8005826 <HAL_SPI_TransmitReceive>

	return data;
 80017d6:	79bb      	ldrb	r3, [r7, #6]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000184c 	.word	0x2000184c

080017e4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80017ec:	f7ff ffde 	bl	80017ac <SPI_RxByte>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	701a      	strb	r2, [r3, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <SD_ReadyWait+0x30>)
 8001808:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800180c:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800180e:	f7ff ffcd 	bl	80017ac <SPI_RxByte>
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	2bff      	cmp	r3, #255	; 0xff
 800181a:	d004      	beq.n	8001826 <SD_ReadyWait+0x26>
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <SD_ReadyWait+0x30>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f3      	bne.n	800180e <SD_ReadyWait+0xe>

	return res;
 8001826:	79fb      	ldrb	r3, [r7, #7]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000291c 	.word	0x2000291c

08001834 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800183a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800183e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001840:	f7ff ff70 	bl	8001724 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	e005      	b.n	8001856 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800184a:	20ff      	movs	r0, #255	; 0xff
 800184c:	f7ff ff7a 	bl	8001744 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3301      	adds	r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2b09      	cmp	r3, #9
 800185a:	ddf6      	ble.n	800184a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800185c:	f7ff ff52 	bl	8001704 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001860:	2340      	movs	r3, #64	; 0x40
 8001862:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001874:	2395      	movs	r3, #149	; 0x95
 8001876:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001878:	463b      	mov	r3, r7
 800187a:	2106      	movs	r1, #6
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff7b 	bl	8001778 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001882:	e002      	b.n	800188a <SD_PowerOn+0x56>
	{
		cnt--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	3b01      	subs	r3, #1
 8001888:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800188a:	f7ff ff8f 	bl	80017ac <SPI_RxByte>
 800188e:	4603      	mov	r3, r0
 8001890:	2b01      	cmp	r3, #1
 8001892:	d002      	beq.n	800189a <SD_PowerOn+0x66>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f4      	bne.n	8001884 <SD_PowerOn+0x50>
	}

	DESELECT();
 800189a:	f7ff ff43 	bl	8001724 <DESELECT>
	SPI_TxByte(0XFF);
 800189e:	20ff      	movs	r0, #255	; 0xff
 80018a0:	f7ff ff50 	bl	8001744 <SPI_TxByte>

	PowerFlag = 1;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <SD_PowerOn+0x80>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	701a      	strb	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000212 	.word	0x20000212

080018b8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <SD_PowerOff+0x14>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000212 	.word	0x20000212

080018d0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <SD_CheckPower+0x14>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000212 	.word	0x20000212

080018e8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <SD_RxDataBlock+0x5c>)
 80018f4:	22c8      	movs	r2, #200	; 0xc8
 80018f6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80018f8:	f7ff ff58 	bl	80017ac <SPI_RxByte>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	2bff      	cmp	r3, #255	; 0xff
 8001904:	d104      	bne.n	8001910 <SD_RxDataBlock+0x28>
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <SD_RxDataBlock+0x5c>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f3      	bne.n	80018f8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001910:	7bfb      	ldrb	r3, [r7, #15]
 8001912:	2bfe      	cmp	r3, #254	; 0xfe
 8001914:	d001      	beq.n	800191a <SD_RxDataBlock+0x32>
 8001916:	2300      	movs	r3, #0
 8001918:	e00f      	b.n	800193a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <SPI_RxBytePtr>
	} while(len--);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	1e5a      	subs	r2, r3, #1
 800192a:	603a      	str	r2, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f4      	bne.n	800191a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001930:	f7ff ff3c 	bl	80017ac <SPI_RxByte>
	SPI_RxByte();
 8001934:	f7ff ff3a 	bl	80017ac <SPI_RxByte>

	return TRUE;
 8001938:	2301      	movs	r3, #1
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	2000291d 	.word	0x2000291d

08001948 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001954:	2300      	movs	r3, #0
 8001956:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001958:	f7ff ff52 	bl	8001800 <SD_ReadyWait>
 800195c:	4603      	mov	r3, r0
 800195e:	2bff      	cmp	r3, #255	; 0xff
 8001960:	d001      	beq.n	8001966 <SD_TxDataBlock+0x1e>
 8001962:	2300      	movs	r3, #0
 8001964:	e02f      	b.n	80019c6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff feeb 	bl	8001744 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	2bfd      	cmp	r3, #253	; 0xfd
 8001972:	d020      	beq.n	80019b6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff fefd 	bl	8001778 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800197e:	f7ff ff15 	bl	80017ac <SPI_RxByte>
		SPI_RxByte();
 8001982:	f7ff ff13 	bl	80017ac <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001986:	e00b      	b.n	80019a0 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001988:	f7ff ff10 	bl	80017ac <SPI_RxByte>
 800198c:	4603      	mov	r3, r0
 800198e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	2b05      	cmp	r3, #5
 8001998:	d006      	beq.n	80019a8 <SD_TxDataBlock+0x60>
			i++;
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	3301      	adds	r3, #1
 800199e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80019a0:	7bbb      	ldrb	r3, [r7, #14]
 80019a2:	2b40      	cmp	r3, #64	; 0x40
 80019a4:	d9f0      	bls.n	8001988 <SD_TxDataBlock+0x40>
 80019a6:	e000      	b.n	80019aa <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80019a8:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80019aa:	bf00      	nop
 80019ac:	f7ff fefe 	bl	80017ac <SPI_RxByte>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0fa      	beq.n	80019ac <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d101      	bne.n	80019c4 <SD_TxDataBlock+0x7c>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <SD_TxDataBlock+0x7e>

	return FALSE;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	6039      	str	r1, [r7, #0]
 80019d8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80019da:	f7ff ff11 	bl	8001800 <SD_ReadyWait>
 80019de:	4603      	mov	r3, r0
 80019e0:	2bff      	cmp	r3, #255	; 0xff
 80019e2:	d001      	beq.n	80019e8 <SD_SendCmd+0x1a>
 80019e4:	23ff      	movs	r3, #255	; 0xff
 80019e6:	e042      	b.n	8001a6e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff feaa 	bl	8001744 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	0e1b      	lsrs	r3, r3, #24
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fea4 	bl	8001744 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	0c1b      	lsrs	r3, r3, #16
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fe9e 	bl	8001744 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fe98 	bl	8001744 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fe93 	bl	8001744 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d102      	bne.n	8001a2a <SD_SendCmd+0x5c>
 8001a24:	2395      	movs	r3, #149	; 0x95
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e007      	b.n	8001a3a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b48      	cmp	r3, #72	; 0x48
 8001a2e:	d102      	bne.n	8001a36 <SD_SendCmd+0x68>
 8001a30:	2387      	movs	r3, #135	; 0x87
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e001      	b.n	8001a3a <SD_SendCmd+0x6c>
	else crc = 1;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe81 	bl	8001744 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	2b4c      	cmp	r3, #76	; 0x4c
 8001a46:	d101      	bne.n	8001a4c <SD_SendCmd+0x7e>
 8001a48:	f7ff feb0 	bl	80017ac <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001a50:	f7ff feac 	bl	80017ac <SPI_RxByte>
 8001a54:	4603      	mov	r3, r0
 8001a56:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001a58:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da05      	bge.n	8001a6c <SD_SendCmd+0x9e>
 8001a60:	7bbb      	ldrb	r3, [r7, #14]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	73bb      	strb	r3, [r7, #14]
 8001a66:	7bbb      	ldrb	r3, [r7, #14]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f1      	bne.n	8001a50 <SD_SendCmd+0x82>

	return res;
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SD_disk_initialize+0x14>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d6      	b.n	8001c3a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <SD_disk_initialize+0x1cc>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <SD_disk_initialize+0x2a>
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <SD_disk_initialize+0x1cc>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	e0cb      	b.n	8001c3a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001aa2:	f7ff fec7 	bl	8001834 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001aa6:	f7ff fe2d 	bl	8001704 <SELECT>

	/* check disk type */
	type = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	2040      	movs	r0, #64	; 0x40
 8001ab2:	f7ff ff8c 	bl	80019ce <SD_SendCmd>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 80a6 	bne.w	8001c0a <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <SD_disk_initialize+0x1d0>)
 8001ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ac4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001ac6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001aca:	2048      	movs	r0, #72	; 0x48
 8001acc:	f7ff ff7f 	bl	80019ce <SD_SendCmd>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d158      	bne.n	8001b88 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e00c      	b.n	8001af6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001adc:	7bfc      	ldrb	r4, [r7, #15]
 8001ade:	f7ff fe65 	bl	80017ac <SPI_RxByte>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f107 0310 	add.w	r3, r7, #16
 8001aea:	4423      	add	r3, r4
 8001aec:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	3301      	adds	r3, #1
 8001af4:	73fb      	strb	r3, [r7, #15]
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d9ef      	bls.n	8001adc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001afc:	7abb      	ldrb	r3, [r7, #10]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f040 8083 	bne.w	8001c0a <SD_disk_initialize+0x192>
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	2baa      	cmp	r3, #170	; 0xaa
 8001b08:	d17f      	bne.n	8001c0a <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2077      	movs	r0, #119	; 0x77
 8001b0e:	f7ff ff5e 	bl	80019ce <SD_SendCmd>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d807      	bhi.n	8001b28 <SD_disk_initialize+0xb0>
 8001b18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b1c:	2069      	movs	r0, #105	; 0x69
 8001b1e:	f7ff ff56 	bl	80019ce <SD_SendCmd>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001b28:	4b47      	ldr	r3, [pc, #284]	; (8001c48 <SD_disk_initialize+0x1d0>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1eb      	bne.n	8001b0a <SD_disk_initialize+0x92>
 8001b32:	e000      	b.n	8001b36 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b34:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b36:	4b44      	ldr	r3, [pc, #272]	; (8001c48 <SD_disk_initialize+0x1d0>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d064      	beq.n	8001c0a <SD_disk_initialize+0x192>
 8001b40:	2100      	movs	r1, #0
 8001b42:	207a      	movs	r0, #122	; 0x7a
 8001b44:	f7ff ff43 	bl	80019ce <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d15d      	bne.n	8001c0a <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
 8001b52:	e00c      	b.n	8001b6e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001b54:	7bfc      	ldrb	r4, [r7, #15]
 8001b56:	f7ff fe29 	bl	80017ac <SPI_RxByte>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4423      	add	r3, r4
 8001b64:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d9ef      	bls.n	8001b54 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001b74:	7a3b      	ldrb	r3, [r7, #8]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SD_disk_initialize+0x10a>
 8001b7e:	230c      	movs	r3, #12
 8001b80:	e000      	b.n	8001b84 <SD_disk_initialize+0x10c>
 8001b82:	2304      	movs	r3, #4
 8001b84:	73bb      	strb	r3, [r7, #14]
 8001b86:	e040      	b.n	8001c0a <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2077      	movs	r0, #119	; 0x77
 8001b8c:	f7ff ff1f 	bl	80019ce <SD_SendCmd>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d808      	bhi.n	8001ba8 <SD_disk_initialize+0x130>
 8001b96:	2100      	movs	r1, #0
 8001b98:	2069      	movs	r0, #105	; 0x69
 8001b9a:	f7ff ff18 	bl	80019ce <SD_SendCmd>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d801      	bhi.n	8001ba8 <SD_disk_initialize+0x130>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e000      	b.n	8001baa <SD_disk_initialize+0x132>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001bac:	7bbb      	ldrb	r3, [r7, #14]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d10e      	bne.n	8001bd0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2077      	movs	r0, #119	; 0x77
 8001bb6:	f7ff ff0a 	bl	80019ce <SD_SendCmd>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d80e      	bhi.n	8001bde <SD_disk_initialize+0x166>
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2069      	movs	r0, #105	; 0x69
 8001bc4:	f7ff ff03 	bl	80019ce <SD_SendCmd>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d107      	bne.n	8001bde <SD_disk_initialize+0x166>
 8001bce:	e00d      	b.n	8001bec <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2041      	movs	r0, #65	; 0x41
 8001bd4:	f7ff fefb 	bl	80019ce <SD_SendCmd>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <SD_disk_initialize+0x1d0>)
 8001be0:	881b      	ldrh	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1e1      	bne.n	8001bac <SD_disk_initialize+0x134>
 8001be8:	e000      	b.n	8001bec <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001bea:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <SD_disk_initialize+0x1d0>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <SD_disk_initialize+0x18e>
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	2050      	movs	r0, #80	; 0x50
 8001bfc:	f7ff fee7 	bl	80019ce <SD_SendCmd>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <SD_disk_initialize+0x192>
 8001c06:	2300      	movs	r3, #0
 8001c08:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001c0a:	4a10      	ldr	r2, [pc, #64]	; (8001c4c <SD_disk_initialize+0x1d4>)
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001c10:	f7ff fd88 	bl	8001724 <DESELECT>
	SPI_RxByte();
 8001c14:	f7ff fdca 	bl	80017ac <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <SD_disk_initialize+0x1cc>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f023 0301 	bic.w	r3, r3, #1
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <SD_disk_initialize+0x1cc>)
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e001      	b.n	8001c34 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c30:	f7ff fe42 	bl	80018b8 <SD_PowerOff>
	}

	return Stat;
 8001c34:	4b03      	ldr	r3, [pc, #12]	; (8001c44 <SD_disk_initialize+0x1cc>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2db      	uxtb	r3, r3
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000001 	.word	0x20000001
 8001c48:	2000291d 	.word	0x2000291d
 8001c4c:	20000211 	.word	0x20000211

08001c50 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SD_disk_status+0x14>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e002      	b.n	8001c6a <SD_disk_status+0x1a>
	return Stat;
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SD_disk_status+0x28>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000001 	.word	0x20000001

08001c7c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	4603      	mov	r3, r0
 8001c8a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <SD_disk_read+0x1c>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <SD_disk_read+0x20>
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e051      	b.n	8001d40 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <SD_disk_read+0xcc>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <SD_disk_read+0x32>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e048      	b.n	8001d40 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <SD_disk_read+0xd0>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <SD_disk_read+0x44>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	607b      	str	r3, [r7, #4]

	SELECT();
 8001cc0:	f7ff fd20 	bl	8001704 <SELECT>

	if (count == 1)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d111      	bne.n	8001cee <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	2051      	movs	r0, #81	; 0x51
 8001cce:	f7ff fe7e 	bl	80019ce <SD_SendCmd>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d129      	bne.n	8001d2c <SD_disk_read+0xb0>
 8001cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cdc:	68b8      	ldr	r0, [r7, #8]
 8001cde:	f7ff fe03 	bl	80018e8 <SD_RxDataBlock>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d021      	beq.n	8001d2c <SD_disk_read+0xb0>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	e01e      	b.n	8001d2c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	2052      	movs	r0, #82	; 0x52
 8001cf2:	f7ff fe6c 	bl	80019ce <SD_SendCmd>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d117      	bne.n	8001d2c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001cfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d00:	68b8      	ldr	r0, [r7, #8]
 8001d02:	f7ff fdf1 	bl	80018e8 <SD_RxDataBlock>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00a      	beq.n	8001d22 <SD_disk_read+0xa6>
				buff += 512;
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d12:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ed      	bne.n	8001cfc <SD_disk_read+0x80>
 8001d20:	e000      	b.n	8001d24 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d22:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001d24:	2100      	movs	r1, #0
 8001d26:	204c      	movs	r0, #76	; 0x4c
 8001d28:	f7ff fe51 	bl	80019ce <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d2c:	f7ff fcfa 	bl	8001724 <DESELECT>
	SPI_RxByte();
 8001d30:	f7ff fd3c 	bl	80017ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000001 	.word	0x20000001
 8001d4c:	20000211 	.word	0x20000211

08001d50 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <SD_disk_write+0x1c>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <SD_disk_write+0x20>
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	e06b      	b.n	8001e48 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d70:	4b37      	ldr	r3, [pc, #220]	; (8001e50 <SD_disk_write+0x100>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SD_disk_write+0x32>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e062      	b.n	8001e48 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <SD_disk_write+0x100>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SD_disk_write+0x44>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e059      	b.n	8001e48 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001d94:	4b2f      	ldr	r3, [pc, #188]	; (8001e54 <SD_disk_write+0x104>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <SD_disk_write+0x56>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	607b      	str	r3, [r7, #4]

	SELECT();
 8001da6:	f7ff fcad 	bl	8001704 <SELECT>

	if (count == 1)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d110      	bne.n	8001dd2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	2058      	movs	r0, #88	; 0x58
 8001db4:	f7ff fe0b 	bl	80019ce <SD_SendCmd>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d13a      	bne.n	8001e34 <SD_disk_write+0xe4>
 8001dbe:	21fe      	movs	r1, #254	; 0xfe
 8001dc0:	68b8      	ldr	r0, [r7, #8]
 8001dc2:	f7ff fdc1 	bl	8001948 <SD_TxDataBlock>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d033      	beq.n	8001e34 <SD_disk_write+0xe4>
			count = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	e030      	b.n	8001e34 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	; (8001e54 <SD_disk_write+0x104>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001dde:	2100      	movs	r1, #0
 8001de0:	2077      	movs	r0, #119	; 0x77
 8001de2:	f7ff fdf4 	bl	80019ce <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001de6:	6839      	ldr	r1, [r7, #0]
 8001de8:	2057      	movs	r0, #87	; 0x57
 8001dea:	f7ff fdf0 	bl	80019ce <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	2059      	movs	r0, #89	; 0x59
 8001df2:	f7ff fdec 	bl	80019ce <SD_SendCmd>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d11b      	bne.n	8001e34 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001dfc:	21fc      	movs	r1, #252	; 0xfc
 8001dfe:	68b8      	ldr	r0, [r7, #8]
 8001e00:	f7ff fda2 	bl	8001948 <SD_TxDataBlock>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <SD_disk_write+0xd0>
				buff += 512;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e10:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	3b01      	subs	r3, #1
 8001e16:	603b      	str	r3, [r7, #0]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ee      	bne.n	8001dfc <SD_disk_write+0xac>
 8001e1e:	e000      	b.n	8001e22 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e20:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001e22:	21fd      	movs	r1, #253	; 0xfd
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fd8f 	bl	8001948 <SD_TxDataBlock>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e30:	2301      	movs	r3, #1
 8001e32:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e34:	f7ff fc76 	bl	8001724 <DESELECT>
	SPI_RxByte();
 8001e38:	f7ff fcb8 	bl	80017ac <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	bf14      	ite	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	2300      	moveq	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000001 	.word	0x20000001
 8001e54:	20000211 	.word	0x20000211

08001e58 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b08b      	sub	sp, #44	; 0x2c
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	603a      	str	r2, [r7, #0]
 8001e62:	71fb      	strb	r3, [r7, #7]
 8001e64:	460b      	mov	r3, r1
 8001e66:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <SD_disk_ioctl+0x1e>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e115      	b.n	80020a2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001e7c:	79bb      	ldrb	r3, [r7, #6]
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d124      	bne.n	8001ecc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d012      	beq.n	8001eb0 <SD_disk_ioctl+0x58>
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	dc1a      	bgt.n	8001ec4 <SD_disk_ioctl+0x6c>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <SD_disk_ioctl+0x40>
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d006      	beq.n	8001ea4 <SD_disk_ioctl+0x4c>
 8001e96:	e015      	b.n	8001ec4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001e98:	f7ff fd0e 	bl	80018b8 <SD_PowerOff>
			res = RES_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ea2:	e0fc      	b.n	800209e <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001ea4:	f7ff fcc6 	bl	8001834 <SD_PowerOn>
			res = RES_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001eae:	e0f6      	b.n	800209e <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	1c5c      	adds	r4, r3, #1
 8001eb4:	f7ff fd0c 	bl	80018d0 <SD_CheckPower>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ec2:	e0ec      	b.n	800209e <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001eca:	e0e8      	b.n	800209e <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ecc:	4b77      	ldr	r3, [pc, #476]	; (80020ac <SD_disk_ioctl+0x254>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SD_disk_ioctl+0x86>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e0e1      	b.n	80020a2 <SD_disk_ioctl+0x24a>

		SELECT();
 8001ede:	f7ff fc11 	bl	8001704 <SELECT>

		switch (ctrl)
 8001ee2:	79bb      	ldrb	r3, [r7, #6]
 8001ee4:	2b0d      	cmp	r3, #13
 8001ee6:	f200 80cb 	bhi.w	8002080 <SD_disk_ioctl+0x228>
 8001eea:	a201      	add	r2, pc, #4	; (adr r2, 8001ef0 <SD_disk_ioctl+0x98>)
 8001eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef0:	08001feb 	.word	0x08001feb
 8001ef4:	08001f29 	.word	0x08001f29
 8001ef8:	08001fdb 	.word	0x08001fdb
 8001efc:	08002081 	.word	0x08002081
 8001f00:	08002081 	.word	0x08002081
 8001f04:	08002081 	.word	0x08002081
 8001f08:	08002081 	.word	0x08002081
 8001f0c:	08002081 	.word	0x08002081
 8001f10:	08002081 	.word	0x08002081
 8001f14:	08002081 	.word	0x08002081
 8001f18:	08002081 	.word	0x08002081
 8001f1c:	08001ffd 	.word	0x08001ffd
 8001f20:	08002021 	.word	0x08002021
 8001f24:	08002045 	.word	0x08002045
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2049      	movs	r0, #73	; 0x49
 8001f2c:	f7ff fd4f 	bl	80019ce <SD_SendCmd>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 80a8 	bne.w	8002088 <SD_disk_ioctl+0x230>
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fcd2 	bl	80018e8 <SD_RxDataBlock>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 809e 	beq.w	8002088 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001f4c:	7b3b      	ldrb	r3, [r7, #12]
 8001f4e:	099b      	lsrs	r3, r3, #6
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10e      	bne.n	8001f74 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f56:	7d7b      	ldrb	r3, [r7, #21]
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	7d3b      	ldrb	r3, [r7, #20]
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3301      	adds	r3, #1
 8001f68:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001f6a:	8bfb      	ldrh	r3, [r7, #30]
 8001f6c:	029a      	lsls	r2, r3, #10
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e02e      	b.n	8001fd2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f74:	7c7b      	ldrb	r3, [r7, #17]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	7dbb      	ldrb	r3, [r7, #22]
 8001f7e:	09db      	lsrs	r3, r3, #7
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	7d7b      	ldrb	r3, [r7, #21]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f003 0306 	and.w	r3, r3, #6
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	3302      	adds	r3, #2
 8001f98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f9c:	7d3b      	ldrb	r3, [r7, #20]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	7cfb      	ldrb	r3, [r7, #19]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	7cbb      	ldrb	r3, [r7, #18]
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001fc4:	8bfa      	ldrh	r2, [r7, #30]
 8001fc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001fca:	3b09      	subs	r3, #9
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001fd8:	e056      	b.n	8002088 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001fe8:	e055      	b.n	8002096 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001fea:	f7ff fc09 	bl	8001800 <SD_ReadyWait>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d14b      	bne.n	800208c <SD_disk_ioctl+0x234>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ffa:	e047      	b.n	800208c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2049      	movs	r0, #73	; 0x49
 8002000:	f7ff fce5 	bl	80019ce <SD_SendCmd>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d142      	bne.n	8002090 <SD_disk_ioctl+0x238>
 800200a:	2110      	movs	r1, #16
 800200c:	6a38      	ldr	r0, [r7, #32]
 800200e:	f7ff fc6b 	bl	80018e8 <SD_RxDataBlock>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03b      	beq.n	8002090 <SD_disk_ioctl+0x238>
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800201e:	e037      	b.n	8002090 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002020:	2100      	movs	r1, #0
 8002022:	204a      	movs	r0, #74	; 0x4a
 8002024:	f7ff fcd3 	bl	80019ce <SD_SendCmd>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d132      	bne.n	8002094 <SD_disk_ioctl+0x23c>
 800202e:	2110      	movs	r1, #16
 8002030:	6a38      	ldr	r0, [r7, #32]
 8002032:	f7ff fc59 	bl	80018e8 <SD_RxDataBlock>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02b      	beq.n	8002094 <SD_disk_ioctl+0x23c>
 800203c:	2300      	movs	r3, #0
 800203e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002042:	e027      	b.n	8002094 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002044:	2100      	movs	r1, #0
 8002046:	207a      	movs	r0, #122	; 0x7a
 8002048:	f7ff fcc1 	bl	80019ce <SD_SendCmd>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d116      	bne.n	8002080 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8002052:	2300      	movs	r3, #0
 8002054:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002058:	e00b      	b.n	8002072 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 800205a:	6a3c      	ldr	r4, [r7, #32]
 800205c:	1c63      	adds	r3, r4, #1
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	f7ff fba4 	bl	80017ac <SPI_RxByte>
 8002064:	4603      	mov	r3, r0
 8002066:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002068:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800206c:	3301      	adds	r3, #1
 800206e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002072:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002076:	2b03      	cmp	r3, #3
 8002078:	d9ef      	bls.n	800205a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8002080:	2304      	movs	r3, #4
 8002082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002086:	e006      	b.n	8002096 <SD_disk_ioctl+0x23e>
			break;
 8002088:	bf00      	nop
 800208a:	e004      	b.n	8002096 <SD_disk_ioctl+0x23e>
			break;
 800208c:	bf00      	nop
 800208e:	e002      	b.n	8002096 <SD_disk_ioctl+0x23e>
			break;
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <SD_disk_ioctl+0x23e>
			break;
 8002094:	bf00      	nop
		}

		DESELECT();
 8002096:	f7ff fb45 	bl	8001724 <DESELECT>
		SPI_RxByte();
 800209a:	f7ff fb87 	bl	80017ac <SPI_RxByte>
	}

	return res;
 800209e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	372c      	adds	r7, #44	; 0x2c
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000001 	.word	0x20000001

080020b0 <bufsize>:
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000); // transmit in blocking mode
}

/* to find the size of data in the buffer */
int bufsize(char *buf)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	int i = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 80020bc:	e002      	b.n	80020c4 <bufsize+0x14>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	3301      	adds	r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f6      	bne.n	80020be <bufsize+0xe>
	return i;
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <bufclear>:

/* clear buffer */
void bufclear(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	e007      	b.n	80020fc <bufclear+0x1c>
	{
		buffer[i] = '\0';
 80020ec:	4a09      	ldr	r2, [pc, #36]	; (8002114 <bufclear+0x34>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3301      	adds	r3, #1
 80020fa:	607b      	str	r3, [r7, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002102:	dbf3      	blt.n	80020ec <bufclear+0xc>
	}
}
 8002104:	bf00      	nop
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200013c0 	.word	0x200013c0

08002118 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800211e:	f000 ffad 	bl	800307c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002122:	f000 fa33 	bl	800258c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002126:	f000 fb9b 	bl	8002860 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800212a:	f000 fb4f 	bl	80027cc <MX_USART2_UART_Init>
	MX_FATFS_Init();
 800212e:	f003 fffd 	bl	800612c <MX_FATFS_Init>
	MX_SPI1_Init();
 8002132:	f000 fb15 	bl	8002760 <MX_SPI1_Init>
	MX_DAC_Init();
 8002136:	f000 fae9 	bl	800270c <MX_DAC_Init>
	MX_DMA_Init();
 800213a:	f000 fb71 	bl	8002820 <MX_DMA_Init>
	MX_ADC1_Init();
 800213e:	f000 fa93 	bl	8002668 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	/* Mount SD Card */
	fresult = f_mount(&fs, "", 0);
 8002142:	2200      	movs	r2, #0
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <main+0x164>)
 8002146:	484e      	ldr	r0, [pc, #312]	; (8002280 <main+0x168>)
 8002148:	f005 febe 	bl	8007ec8 <f_mount>
 800214c:	4603      	mov	r3, r0
 800214e:	461a      	mov	r2, r3
 8002150:	4b4c      	ldr	r3, [pc, #304]	; (8002284 <main+0x16c>)
 8002152:	701a      	strb	r2, [r3, #0]


	/************* The following operation is using f_write and f_read *************/

	/* Create second file with read write access and open it */
	fresult = f_open(&fil, "Results.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002154:	2213      	movs	r2, #19
 8002156:	494c      	ldr	r1, [pc, #304]	; (8002288 <main+0x170>)
 8002158:	484c      	ldr	r0, [pc, #304]	; (800228c <main+0x174>)
 800215a:	f005 fefb 	bl	8007f54 <f_open>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	4b48      	ldr	r3, [pc, #288]	; (8002284 <main+0x16c>)
 8002164:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	strcpy(buffer, "Measurement, Voltage, Resistance \n");
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <main+0x178>)
 8002168:	4a4a      	ldr	r2, [pc, #296]	; (8002294 <main+0x17c>)
 800216a:	4614      	mov	r4, r2
 800216c:	469c      	mov	ip, r3
 800216e:	f104 0e20 	add.w	lr, r4, #32
 8002172:	4665      	mov	r5, ip
 8002174:	4626      	mov	r6, r4
 8002176:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002178:	6028      	str	r0, [r5, #0]
 800217a:	6069      	str	r1, [r5, #4]
 800217c:	60aa      	str	r2, [r5, #8]
 800217e:	60eb      	str	r3, [r5, #12]
 8002180:	3410      	adds	r4, #16
 8002182:	f10c 0c10 	add.w	ip, ip, #16
 8002186:	4574      	cmp	r4, lr
 8002188:	d1f3      	bne.n	8002172 <main+0x5a>
 800218a:	4663      	mov	r3, ip
 800218c:	4622      	mov	r2, r4
 800218e:	8811      	ldrh	r1, [r2, #0]
 8002190:	7892      	ldrb	r2, [r2, #2]
 8002192:	8019      	strh	r1, [r3, #0]
 8002194:	709a      	strb	r2, [r3, #2]

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8002196:	483e      	ldr	r0, [pc, #248]	; (8002290 <main+0x178>)
 8002198:	f7ff ff8a 	bl	80020b0 <bufsize>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b3d      	ldr	r3, [pc, #244]	; (8002298 <main+0x180>)
 80021a2:	493b      	ldr	r1, [pc, #236]	; (8002290 <main+0x178>)
 80021a4:	4839      	ldr	r0, [pc, #228]	; (800228c <main+0x174>)
 80021a6:	f006 fa00 	bl	80085aa <f_write>
 80021aa:	4603      	mov	r3, r0
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <main+0x16c>)
 80021b0:	701a      	strb	r2, [r3, #0]
	//bw is the pointer to the counter for the number of bytes written

	//send_uart("Results.txt created and data is written\n");

	/* Close file */
	f_close(&fil);
 80021b2:	4836      	ldr	r0, [pc, #216]	; (800228c <main+0x174>)
 80021b4:	f006 fc0b 	bl	80089ce <f_close>

	// clearing buffer to show that result obtained is from the file
	bufclear();
 80021b8:	f7ff ff92 	bl	80020e0 <bufclear>

	/* Open second file to read */
	fresult = f_open(&fil, "Results.txt", FA_READ);
 80021bc:	2201      	movs	r2, #1
 80021be:	4932      	ldr	r1, [pc, #200]	; (8002288 <main+0x170>)
 80021c0:	4832      	ldr	r0, [pc, #200]	; (800228c <main+0x174>)
 80021c2:	f005 fec7 	bl	8007f54 <f_open>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <main+0x16c>)
 80021cc:	701a      	strb	r2, [r3, #0]

	/* Read file info so we can get the file size */
	fresult = f_stat("Results.txt", &filinfo);
 80021ce:	4933      	ldr	r1, [pc, #204]	; (800229c <main+0x184>)
 80021d0:	482d      	ldr	r0, [pc, #180]	; (8002288 <main+0x170>)
 80021d2:	f006 fe4a 	bl	8008e6a <f_stat>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <main+0x16c>)
 80021dc:	701a      	strb	r2, [r3, #0]

	f_read (&fil, buffer, filinfo.fsize, &br);
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <main+0x184>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <main+0x188>)
 80021e4:	492a      	ldr	r1, [pc, #168]	; (8002290 <main+0x178>)
 80021e6:	4829      	ldr	r0, [pc, #164]	; (800228c <main+0x174>)
 80021e8:	f006 f880 	bl	80082ec <f_read>
	//br is the pointer to the count variable for the number of bytes to read from the file
	//send_uart(buffer);

	/* Close file */
	f_close(&fil);
 80021ec:	4827      	ldr	r0, [pc, #156]	; (800228c <main+0x174>)
 80021ee:	f006 fbee 	bl	80089ce <f_close>

	bufclear();
 80021f2:	f7ff ff75 	bl	80020e0 <bufclear>

	// initialize the library by associating any needed LCD interface pin
	LiquidCrystal(GPIOB, GPIO_PIN_12, GPIO_PIN_2, GPIO_PIN_1, GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_3);
 80021f6:	2308      	movs	r3, #8
 80021f8:	9303      	str	r3, [sp, #12]
 80021fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021fe:	9302      	str	r3, [sp, #8]
 8002200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2302      	movs	r3, #2
 800220e:	2204      	movs	r2, #4
 8002210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002214:	4823      	ldr	r0, [pc, #140]	; (80022a4 <main+0x18c>)
 8002216:	f7fe feb3 	bl	8000f80 <LiquidCrystal>

	print("POWER ON");
 800221a:	4823      	ldr	r0, [pc, #140]	; (80022a8 <main+0x190>)
 800221c:	f7ff f96e 	bl	80014fc <print>
	HAL_Delay(5000);
 8002220:	f241 3088 	movw	r0, #5000	; 0x1388
 8002224:	f000 ff9c 	bl	8003160 <HAL_Delay>
	clear();
 8002228:	f7ff f916 	bl	8001458 <clear>
	print("READY");
 800222c:	481f      	ldr	r0, [pc, #124]	; (80022ac <main+0x194>)
 800222e:	f7ff f965 	bl	80014fc <print>

	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002232:	2100      	movs	r1, #0
 8002234:	481e      	ldr	r0, [pc, #120]	; (80022b0 <main+0x198>)
 8002236:	f001 fdca 	bl	8003dce <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800223a:	2300      	movs	r3, #0
 800223c:	2200      	movs	r2, #0
 800223e:	2100      	movs	r1, #0
 8002240:	481b      	ldr	r0, [pc, #108]	; (80022b0 <main+0x198>)
 8002242:	f001 fe16 	bl	8003e72 <HAL_DAC_SetValue>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value_adc, 10);
 8002246:	220a      	movs	r2, #10
 8002248:	491a      	ldr	r1, [pc, #104]	; (80022b4 <main+0x19c>)
 800224a:	481b      	ldr	r0, [pc, #108]	; (80022b8 <main+0x1a0>)
 800224c:	f001 f8c2 	bl	80033d4 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(DACout == 1)
 8002250:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <main+0x1a4>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b01      	cmp	r3, #1
 8002258:	d134      	bne.n	80022c4 <main+0x1ac>
		{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2482);
 800225a:	f640 13b2 	movw	r3, #2482	; 0x9b2
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	4813      	ldr	r0, [pc, #76]	; (80022b0 <main+0x198>)
 8002264:	f001 fe05 	bl	8003e72 <HAL_DAC_SetValue>
			adcVal = value_adc[0];
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <main+0x19c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <main+0x1a8>)
 8002276:	edc3 7a00 	vstr	s15, [r3]
 800227a:	e029      	b.n	80022d0 <main+0x1b8>
 800227c:	0800be90 	.word	0x0800be90
 8002280:	20000328 	.word	0x20000328
 8002284:	20001848 	.word	0x20001848
 8002288:	0800be94 	.word	0x0800be94
 800228c:	200018ec 	.word	0x200018ec
 8002290:	200013c0 	.word	0x200013c0
 8002294:	0800bea0 	.word	0x0800bea0
 8002298:	2000183c 	.word	0x2000183c
 800229c:	20000310 	.word	0x20000310
 80022a0:	2000135c 	.word	0x2000135c
 80022a4:	40020400 	.word	0x40020400
 80022a8:	0800bec4 	.word	0x0800bec4
 80022ac:	0800bed0 	.word	0x0800bed0
 80022b0:	200013ac 	.word	0x200013ac
 80022b4:	200017c0 	.word	0x200017c0
 80022b8:	20001360 	.word	0x20001360
 80022bc:	20001840 	.word	0x20001840
 80022c0:	20000278 	.word	0x20000278
		}
		else
		{
			HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 80022c4:	2300      	movs	r3, #0
 80022c6:	2200      	movs	r2, #0
 80022c8:	2100      	movs	r1, #0
 80022ca:	4897      	ldr	r0, [pc, #604]	; (8002528 <main+0x410>)
 80022cc:	f001 fdd1 	bl	8003e72 <HAL_DAC_SetValue>
		}
		HAL_ADC_Start(&hadc1);
 80022d0:	4896      	ldr	r0, [pc, #600]	; (800252c <main+0x414>)
 80022d2:	f000 ffad 	bl	8003230 <HAL_ADC_Start>

		voltage = adcVal * 3.3 / 4095;
 80022d6:	4b96      	ldr	r3, [pc, #600]	; (8002530 <main+0x418>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f954 	bl	8000588 <__aeabi_f2d>
 80022e0:	a38b      	add	r3, pc, #556	; (adr r3, 8002510 <main+0x3f8>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe f9a7 	bl	8000638 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	a389      	add	r3, pc, #548	; (adr r3, 8002518 <main+0x400>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe fac8 	bl	800088c <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc70 	bl	8000be8 <__aeabi_d2f>
 8002308:	4603      	mov	r3, r0
 800230a:	4a8a      	ldr	r2, [pc, #552]	; (8002534 <main+0x41c>)
 800230c:	6013      	str	r3, [r2, #0]
		resistance = (voltage / 0.00001) / 30.5; //gain van +-30.5
 800230e:	4b89      	ldr	r3, [pc, #548]	; (8002534 <main+0x41c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f938 	bl	8000588 <__aeabi_f2d>
 8002318:	a381      	add	r3, pc, #516	; (adr r3, 8002520 <main+0x408>)
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fe fab5 	bl	800088c <__aeabi_ddiv>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 0200 	mov.w	r2, #0
 800232e:	4b82      	ldr	r3, [pc, #520]	; (8002538 <main+0x420>)
 8002330:	f7fe faac 	bl	800088c <__aeabi_ddiv>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2f>
 8002340:	4603      	mov	r3, r0
 8002342:	4a7e      	ldr	r2, [pc, #504]	; (800253c <main+0x424>)
 8002344:	6013      	str	r3, [r2, #0]

		if(button_state == 1)
 8002346:	4b7e      	ldr	r3, [pc, #504]	; (8002540 <main+0x428>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d119      	bne.n	8002382 <main+0x26a>
		{
			// set the cursor to column 0, line 0
			setCursor(0, 0);
 800234e:	2100      	movs	r1, #0
 8002350:	2000      	movs	r0, #0
 8002352:	f7ff f88b 	bl	800146c <setCursor>
			sprintf(str, "%0.3f V", voltage);
 8002356:	4b77      	ldr	r3, [pc, #476]	; (8002534 <main+0x41c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe f914 	bl	8000588 <__aeabi_f2d>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	1d38      	adds	r0, r7, #4
 8002366:	4977      	ldr	r1, [pc, #476]	; (8002544 <main+0x42c>)
 8002368:	f007 fb4c 	bl	8009a04 <siprintf>
			print(str);
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f8c4 	bl	80014fc <print>
			setCursor(0, 1);
 8002374:	2101      	movs	r1, #1
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff f878 	bl	800146c <setCursor>
			print("  ");
 800237c:	4872      	ldr	r0, [pc, #456]	; (8002548 <main+0x430>)
 800237e:	f7ff f8bd 	bl	80014fc <print>
		}

		if(button_state == 2)
 8002382:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <main+0x428>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b02      	cmp	r3, #2
 8002388:	f47f af62 	bne.w	8002250 <main+0x138>
		{
			storedVal = voltage;
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <main+0x41c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a6e      	ldr	r2, [pc, #440]	; (800254c <main+0x434>)
 8002392:	6013      	str	r3, [r2, #0]
			setCursor(0, 0);
 8002394:	2100      	movs	r1, #0
 8002396:	2000      	movs	r0, #0
 8002398:	f7ff f868 	bl	800146c <setCursor>
			sprintf(str, "%lu:", measurement);
 800239c:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <main+0x438>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	496c      	ldr	r1, [pc, #432]	; (8002554 <main+0x43c>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f007 fb2d 	bl	8009a04 <siprintf>
			print(str);
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f8a5 	bl	80014fc <print>
			sprintf(str, "%0.3f", storedVal);
 80023b2:	4b66      	ldr	r3, [pc, #408]	; (800254c <main+0x434>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8e6 	bl	8000588 <__aeabi_f2d>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	1d38      	adds	r0, r7, #4
 80023c2:	4965      	ldr	r1, [pc, #404]	; (8002558 <main+0x440>)
 80023c4:	f007 fb1e 	bl	8009a04 <siprintf>
			print(str);
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff f896 	bl	80014fc <print>
			setCursor(0, 1);
 80023d0:	2101      	movs	r1, #1
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff f84a 	bl	800146c <setCursor>
			print(" V");
 80023d8:	4860      	ldr	r0, [pc, #384]	; (800255c <main+0x444>)
 80023da:	f7ff f88f 	bl	80014fc <print>

			/************* Updating an existing file *************/

			dataStr[0] = 0;
 80023de:	4b60      	ldr	r3, [pc, #384]	; (8002560 <main+0x448>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]

			sprintf(data, "%lu", measurement);
 80023e4:	4b5a      	ldr	r3, [pc, #360]	; (8002550 <main+0x438>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	495e      	ldr	r1, [pc, #376]	; (8002564 <main+0x44c>)
 80023ec:	485e      	ldr	r0, [pc, #376]	; (8002568 <main+0x450>)
 80023ee:	f007 fb09 	bl	8009a04 <siprintf>
			strcat(dataStr, data);
 80023f2:	495d      	ldr	r1, [pc, #372]	; (8002568 <main+0x450>)
 80023f4:	485a      	ldr	r0, [pc, #360]	; (8002560 <main+0x448>)
 80023f6:	f007 fb25 	bl	8009a44 <strcat>
			strcat(dataStr, ", ");
 80023fa:	4859      	ldr	r0, [pc, #356]	; (8002560 <main+0x448>)
 80023fc:	f7fd ff08 	bl	8000210 <strlen>
 8002400:	4603      	mov	r3, r0
 8002402:	461a      	mov	r2, r3
 8002404:	4b56      	ldr	r3, [pc, #344]	; (8002560 <main+0x448>)
 8002406:	4413      	add	r3, r2
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <main+0x454>)
 800240a:	8811      	ldrh	r1, [r2, #0]
 800240c:	7892      	ldrb	r2, [r2, #2]
 800240e:	8019      	strh	r1, [r3, #0]
 8002410:	709a      	strb	r2, [r3, #2]

			sprintf(data, "%0.3f", voltage);
 8002412:	4b48      	ldr	r3, [pc, #288]	; (8002534 <main+0x41c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe f8b6 	bl	8000588 <__aeabi_f2d>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	494d      	ldr	r1, [pc, #308]	; (8002558 <main+0x440>)
 8002422:	4851      	ldr	r0, [pc, #324]	; (8002568 <main+0x450>)
 8002424:	f007 faee 	bl	8009a04 <siprintf>
			strcat(dataStr, data);
 8002428:	494f      	ldr	r1, [pc, #316]	; (8002568 <main+0x450>)
 800242a:	484d      	ldr	r0, [pc, #308]	; (8002560 <main+0x448>)
 800242c:	f007 fb0a 	bl	8009a44 <strcat>
			strcat(dataStr, ", ");
 8002430:	484b      	ldr	r0, [pc, #300]	; (8002560 <main+0x448>)
 8002432:	f7fd feed 	bl	8000210 <strlen>
 8002436:	4603      	mov	r3, r0
 8002438:	461a      	mov	r2, r3
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <main+0x448>)
 800243c:	4413      	add	r3, r2
 800243e:	4a4b      	ldr	r2, [pc, #300]	; (800256c <main+0x454>)
 8002440:	8811      	ldrh	r1, [r2, #0]
 8002442:	7892      	ldrb	r2, [r2, #2]
 8002444:	8019      	strh	r1, [r3, #0]
 8002446:	709a      	strb	r2, [r3, #2]

			sprintf(data, "%0.3f", resistance);
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <main+0x424>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f89b 	bl	8000588 <__aeabi_f2d>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4940      	ldr	r1, [pc, #256]	; (8002558 <main+0x440>)
 8002458:	4843      	ldr	r0, [pc, #268]	; (8002568 <main+0x450>)
 800245a:	f007 fad3 	bl	8009a04 <siprintf>
			strcat(dataStr, data);
 800245e:	4942      	ldr	r1, [pc, #264]	; (8002568 <main+0x450>)
 8002460:	483f      	ldr	r0, [pc, #252]	; (8002560 <main+0x448>)
 8002462:	f007 faef 	bl	8009a44 <strcat>
			strcat(dataStr, "\n");
 8002466:	483e      	ldr	r0, [pc, #248]	; (8002560 <main+0x448>)
 8002468:	f7fd fed2 	bl	8000210 <strlen>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b3b      	ldr	r3, [pc, #236]	; (8002560 <main+0x448>)
 8002472:	4413      	add	r3, r2
 8002474:	493e      	ldr	r1, [pc, #248]	; (8002570 <main+0x458>)
 8002476:	461a      	mov	r2, r3
 8002478:	460b      	mov	r3, r1
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	8013      	strh	r3, [r2, #0]

			/* Open the file with write access */
			fresult = f_open(&fil, "Results.txt", FA_OPEN_ALWAYS | FA_WRITE);
 800247e:	2212      	movs	r2, #18
 8002480:	493c      	ldr	r1, [pc, #240]	; (8002574 <main+0x45c>)
 8002482:	483d      	ldr	r0, [pc, #244]	; (8002578 <main+0x460>)
 8002484:	f005 fd66 	bl	8007f54 <f_open>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	4b3b      	ldr	r3, [pc, #236]	; (800257c <main+0x464>)
 800248e:	701a      	strb	r2, [r3, #0]

			/* Read file info so we can get the file size */
			fresult = f_stat("Results.txt", &filinfo);
 8002490:	493b      	ldr	r1, [pc, #236]	; (8002580 <main+0x468>)
 8002492:	4838      	ldr	r0, [pc, #224]	; (8002574 <main+0x45c>)
 8002494:	f006 fce9 	bl	8008e6a <f_stat>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <main+0x464>)
 800249e:	701a      	strb	r2, [r3, #0]

			/* Move to offset to the end of the file */
			fresult = f_lseek(&fil, filinfo.fsize);
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <main+0x468>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4619      	mov	r1, r3
 80024a6:	4834      	ldr	r0, [pc, #208]	; (8002578 <main+0x460>)
 80024a8:	f006 fabb 	bl	8008a22 <f_lseek>
 80024ac:	4603      	mov	r3, r0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <main+0x464>)
 80024b2:	701a      	strb	r2, [r3, #0]

			/* Write the string to the file */
			fresult = f_puts(dataStr, &fil);
 80024b4:	4930      	ldr	r1, [pc, #192]	; (8002578 <main+0x460>)
 80024b6:	482a      	ldr	r0, [pc, #168]	; (8002560 <main+0x448>)
 80024b8:	f006 fd87 	bl	8008fca <f_puts>
 80024bc:	4603      	mov	r3, r0
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <main+0x464>)
 80024c2:	701a      	strb	r2, [r3, #0]

			/* Close file */
			f_close(&fil);
 80024c4:	482c      	ldr	r0, [pc, #176]	; (8002578 <main+0x460>)
 80024c6:	f006 fa82 	bl	80089ce <f_close>

			/* Open to read the file */
			fresult = f_open(&fil, "Results.txt", FA_READ);
 80024ca:	2201      	movs	r2, #1
 80024cc:	4929      	ldr	r1, [pc, #164]	; (8002574 <main+0x45c>)
 80024ce:	482a      	ldr	r0, [pc, #168]	; (8002578 <main+0x460>)
 80024d0:	f005 fd40 	bl	8007f54 <f_open>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <main+0x464>)
 80024da:	701a      	strb	r2, [r3, #0]

			/* Read file info so we can get the file size */
			fresult = f_stat("Results.txt", &filinfo);
 80024dc:	4928      	ldr	r1, [pc, #160]	; (8002580 <main+0x468>)
 80024de:	4825      	ldr	r0, [pc, #148]	; (8002574 <main+0x45c>)
 80024e0:	f006 fcc3 	bl	8008e6a <f_stat>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <main+0x464>)
 80024ea:	701a      	strb	r2, [r3, #0]

			/* Read string from the file */
			f_read(&fil, buffer, filinfo.fsize, &br);
 80024ec:	4b24      	ldr	r3, [pc, #144]	; (8002580 <main+0x468>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <main+0x46c>)
 80024f2:	4925      	ldr	r1, [pc, #148]	; (8002588 <main+0x470>)
 80024f4:	4820      	ldr	r0, [pc, #128]	; (8002578 <main+0x460>)
 80024f6:	f005 fef9 	bl	80082ec <f_read>
			//send_uart(buffer);

			/* Close file */
			f_close(&fil);
 80024fa:	481f      	ldr	r0, [pc, #124]	; (8002578 <main+0x460>)
 80024fc:	f006 fa67 	bl	80089ce <f_close>

			bufclear();
 8002500:	f7ff fdee 	bl	80020e0 <bufclear>

			button_state = 0;
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <main+0x428>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
		if(DACout == 1)
 800250a:	e6a1      	b.n	8002250 <main+0x138>
 800250c:	f3af 8000 	nop.w
 8002510:	66666666 	.word	0x66666666
 8002514:	400a6666 	.word	0x400a6666
 8002518:	00000000 	.word	0x00000000
 800251c:	40affe00 	.word	0x40affe00
 8002520:	88e368f1 	.word	0x88e368f1
 8002524:	3ee4f8b5 	.word	0x3ee4f8b5
 8002528:	200013ac 	.word	0x200013ac
 800252c:	20001360 	.word	0x20001360
 8002530:	20000278 	.word	0x20000278
 8002534:	2000027c 	.word	0x2000027c
 8002538:	403e8000 	.word	0x403e8000
 800253c:	20000280 	.word	0x20000280
 8002540:	20000299 	.word	0x20000299
 8002544:	0800bed8 	.word	0x0800bed8
 8002548:	0800bee0 	.word	0x0800bee0
 800254c:	20000284 	.word	0x20000284
 8002550:	20000294 	.word	0x20000294
 8002554:	0800bee4 	.word	0x0800bee4
 8002558:	0800beec 	.word	0x0800beec
 800255c:	0800bef4 	.word	0x0800bef4
 8002560:	20000214 	.word	0x20000214
 8002564:	0800bef8 	.word	0x0800bef8
 8002568:	20001834 	.word	0x20001834
 800256c:	0800befc 	.word	0x0800befc
 8002570:	0800bf00 	.word	0x0800bf00
 8002574:	0800be94 	.word	0x0800be94
 8002578:	200018ec 	.word	0x200018ec
 800257c:	20001848 	.word	0x20001848
 8002580:	20000310 	.word	0x20000310
 8002584:	2000135c 	.word	0x2000135c
 8002588:	200013c0 	.word	0x200013c0

0800258c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b094      	sub	sp, #80	; 0x50
 8002590:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	2234      	movs	r2, #52	; 0x34
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f006 fdc0 	bl	8009120 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
 80025b4:	4b2a      	ldr	r3, [pc, #168]	; (8002660 <SystemClock_Config+0xd4>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	4a29      	ldr	r2, [pc, #164]	; (8002660 <SystemClock_Config+0xd4>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6413      	str	r3, [r2, #64]	; 0x40
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <SystemClock_Config+0xd4>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80025cc:	2300      	movs	r3, #0
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	4b24      	ldr	r3, [pc, #144]	; (8002664 <SystemClock_Config+0xd8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025d8:	4a22      	ldr	r2, [pc, #136]	; (8002664 <SystemClock_Config+0xd8>)
 80025da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <SystemClock_Config+0xd8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025e8:	603b      	str	r3, [r7, #0]
 80025ea:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f4:	2310      	movs	r3, #16
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f8:	2302      	movs	r3, #2
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025fc:	2300      	movs	r3, #0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8002600:	2310      	movs	r3, #16
 8002602:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8002604:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002608:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800260a:	2304      	movs	r3, #4
 800260c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800260e:	2302      	movs	r3, #2
 8002610:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002612:	2302      	movs	r3, #2
 8002614:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4618      	mov	r0, r3
 800261c:	f002 fca0 	bl	8004f60 <HAL_RCC_OscConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8002626:	f000 fa1f 	bl	8002a68 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262a:	230f      	movs	r3, #15
 800262c:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800262e:	2302      	movs	r3, #2
 8002630:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800263a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002640:	f107 0308 	add.w	r3, r7, #8
 8002644:	2102      	movs	r1, #2
 8002646:	4618      	mov	r0, r3
 8002648:	f002 f9be 	bl	80049c8 <HAL_RCC_ClockConfig>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <SystemClock_Config+0xca>
	{
		Error_Handler();
 8002652:	f000 fa09 	bl	8002a68 <Error_Handler>
	}
}
 8002656:	bf00      	nop
 8002658:	3750      	adds	r7, #80	; 0x50
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000

08002668 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800266e:	463b      	mov	r3, r7
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <MX_ADC1_Init+0x98>)
 800267c:	4a21      	ldr	r2, [pc, #132]	; (8002704 <MX_ADC1_Init+0x9c>)
 800267e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002680:	4b1f      	ldr	r3, [pc, #124]	; (8002700 <MX_ADC1_Init+0x98>)
 8002682:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002686:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002688:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <MX_ADC1_Init+0x98>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <MX_ADC1_Init+0x98>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <MX_ADC1_Init+0x98>)
 8002696:	2200      	movs	r2, #0
 8002698:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800269a:	4b19      	ldr	r3, [pc, #100]	; (8002700 <MX_ADC1_Init+0x98>)
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <MX_ADC1_Init+0x98>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <MX_ADC1_Init+0x98>)
 80026aa:	4a17      	ldr	r2, [pc, #92]	; (8002708 <MX_ADC1_Init+0xa0>)
 80026ac:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <MX_ADC1_Init+0x98>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <MX_ADC1_Init+0x98>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <MX_ADC1_Init+0x98>)
 80026bc:	2201      	movs	r2, #1
 80026be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <MX_ADC1_Init+0x98>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <MX_ADC1_Init+0x98>)
 80026ca:	f000 fd6d 	bl	80031a8 <HAL_ADC_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80026d4:	f000 f9c8 	bl	8002a68 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80026dc:	2301      	movs	r3, #1
 80026de:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 80026e0:	2304      	movs	r3, #4
 80026e2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e4:	463b      	mov	r3, r7
 80026e6:	4619      	mov	r1, r3
 80026e8:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_ADC1_Init+0x98>)
 80026ea:	f000 ff8d 	bl	8003608 <HAL_ADC_ConfigChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80026f4:	f000 f9b8 	bl	8002a68 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20001360 	.word	0x20001360
 8002704:	40012000 	.word	0x40012000
 8002708:	0f000001 	.word	0x0f000001

0800270c <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 8002712:	463b      	mov	r3, r7
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <MX_DAC_Init+0x4c>)
 800271c:	4a0f      	ldr	r2, [pc, #60]	; (800275c <MX_DAC_Init+0x50>)
 800271e:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002720:	480d      	ldr	r0, [pc, #52]	; (8002758 <MX_DAC_Init+0x4c>)
 8002722:	f001 fb32 	bl	8003d8a <HAL_DAC_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_DAC_Init+0x24>
	{
		Error_Handler();
 800272c:	f000 f99c 	bl	8002a68 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002730:	2300      	movs	r3, #0
 8002732:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002738:	463b      	mov	r3, r7
 800273a:	2200      	movs	r2, #0
 800273c:	4619      	mov	r1, r3
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <MX_DAC_Init+0x4c>)
 8002740:	f001 fbbc 	bl	8003ebc <HAL_DAC_ConfigChannel>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_DAC_Init+0x42>
	{
		Error_Handler();
 800274a:	f000 f98d 	bl	8002a68 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200013ac 	.word	0x200013ac
 800275c:	40007400 	.word	0x40007400

08002760 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002764:	4b17      	ldr	r3, [pc, #92]	; (80027c4 <MX_SPI1_Init+0x64>)
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <MX_SPI1_Init+0x68>)
 8002768:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800276a:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_SPI1_Init+0x64>)
 800276c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002770:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <MX_SPI1_Init+0x64>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <MX_SPI1_Init+0x64>)
 800277a:	2200      	movs	r2, #0
 800277c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800277e:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_SPI1_Init+0x64>)
 8002780:	2200      	movs	r2, #0
 8002782:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <MX_SPI1_Init+0x64>)
 8002786:	2200      	movs	r2, #0
 8002788:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_SPI1_Init+0x64>)
 800278c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002790:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_SPI1_Init+0x64>)
 8002794:	2218      	movs	r2, #24
 8002796:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <MX_SPI1_Init+0x64>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_SPI1_Init+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a4:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <MX_SPI1_Init+0x64>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_SPI1_Init+0x64>)
 80027ac:	220a      	movs	r2, #10
 80027ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_SPI1_Init+0x64>)
 80027b2:	f002 fe73 	bl	800549c <HAL_SPI_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 80027bc:	f000 f954 	bl	8002a68 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2000184c 	.word	0x2000184c
 80027c8:	40013000 	.word	0x40013000

080027cc <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <MX_USART2_UART_Init+0x50>)
 80027d4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027dc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027e4:	4b0c      	ldr	r3, [pc, #48]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80027ea:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027f2:	220c      	movs	r2, #12
 80027f4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027f6:	4b08      	ldr	r3, [pc, #32]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027fc:	4b06      	ldr	r3, [pc, #24]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002802:	4805      	ldr	r0, [pc, #20]	; (8002818 <MX_USART2_UART_Init+0x4c>)
 8002804:	f003 fa7c 	bl	8005d00 <HAL_UART_Init>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800280e:	f000 f92b 	bl	8002a68 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	200018a4 	.word	0x200018a4
 800281c:	40004400 	.word	0x40004400

08002820 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_DMA_Init+0x3c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <MX_DMA_Init+0x3c>)
 8002830:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_DMA_Init+0x3c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2100      	movs	r1, #0
 8002846:	2038      	movs	r0, #56	; 0x38
 8002848:	f001 fa69 	bl	8003d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800284c:	2038      	movs	r0, #56	; 0x38
 800284e:	f001 fa82 	bl	8003d56 <HAL_NVIC_EnableIRQ>

}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800

08002860 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4b43      	ldr	r3, [pc, #268]	; (8002988 <MX_GPIO_Init+0x128>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a42      	ldr	r2, [pc, #264]	; (8002988 <MX_GPIO_Init+0x128>)
 8002880:	f043 0304 	orr.w	r3, r3, #4
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <MX_GPIO_Init+0x128>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0304 	and.w	r3, r3, #4
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <MX_GPIO_Init+0x128>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4a3b      	ldr	r2, [pc, #236]	; (8002988 <MX_GPIO_Init+0x128>)
 800289c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a0:	6313      	str	r3, [r2, #48]	; 0x30
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <MX_GPIO_Init+0x128>)
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b35      	ldr	r3, [pc, #212]	; (8002988 <MX_GPIO_Init+0x128>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	4a34      	ldr	r2, [pc, #208]	; (8002988 <MX_GPIO_Init+0x128>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6313      	str	r3, [r2, #48]	; 0x30
 80028be:	4b32      	ldr	r3, [pc, #200]	; (8002988 <MX_GPIO_Init+0x128>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <MX_GPIO_Init+0x128>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <MX_GPIO_Init+0x128>)
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	6313      	str	r3, [r2, #48]	; 0x30
 80028da:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <MX_GPIO_Init+0x128>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	607b      	str	r3, [r7, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, RNW_Pin|EN_Pin|RS_Pin|DB6_Pin
 80028e6:	2200      	movs	r2, #0
 80028e8:	f24f 010e 	movw	r1, #61454	; 0xf00e
 80028ec:	4827      	ldr	r0, [pc, #156]	; (800298c <MX_GPIO_Init+0x12c>)
 80028ee:	f002 f839 	bl	8004964 <HAL_GPIO_WritePin>
			|DB5_Pin|DB4_Pin|DB7_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80028f2:	2200      	movs	r2, #0
 80028f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028f8:	4825      	ldr	r0, [pc, #148]	; (8002990 <MX_GPIO_Init+0x130>)
 80028fa:	f002 f833 	bl	8004964 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80028fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002902:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002904:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002908:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800290e:	f107 0314 	add.w	r3, r7, #20
 8002912:	4619      	mov	r1, r3
 8002914:	481e      	ldr	r0, [pc, #120]	; (8002990 <MX_GPIO_Init+0x130>)
 8002916:	f001 fe91 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pin : Button_Pin */
	GPIO_InitStruct.Pin = Button_Pin;
 800291a:	2302      	movs	r3, #2
 800291c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	4819      	ldr	r0, [pc, #100]	; (8002994 <MX_GPIO_Init+0x134>)
 800292e:	f001 fe85 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pins : RNW_Pin EN_Pin RS_Pin DB6_Pin
                           DB5_Pin DB4_Pin DB7_Pin */
	GPIO_InitStruct.Pin = RNW_Pin|EN_Pin|RS_Pin|DB6_Pin
 8002932:	f24f 030e 	movw	r3, #61454	; 0xf00e
 8002936:	617b      	str	r3, [r7, #20]
			|DB5_Pin|DB4_Pin|DB7_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002938:	2301      	movs	r3, #1
 800293a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	4619      	mov	r1, r3
 800294a:	4810      	ldr	r0, [pc, #64]	; (800298c <MX_GPIO_Init+0x12c>)
 800294c:	f001 fe76 	bl	800463c <HAL_GPIO_Init>

	/*Configure GPIO pin : CS_Pin */
	GPIO_InitStruct.Pin = CS_Pin;
 8002950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002954:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002956:	2301      	movs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002962:	f107 0314 	add.w	r3, r7, #20
 8002966:	4619      	mov	r1, r3
 8002968:	4809      	ldr	r0, [pc, #36]	; (8002990 <MX_GPIO_Init+0x130>)
 800296a:	f001 fe67 	bl	800463c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2028      	movs	r0, #40	; 0x28
 8002974:	f001 f9d3 	bl	8003d1e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002978:	2028      	movs	r0, #40	; 0x28
 800297a:	f001 f9ec 	bl	8003d56 <HAL_NVIC_EnableIRQ>

}
 800297e:	bf00      	nop
 8002980:	3728      	adds	r7, #40	; 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020000 	.word	0x40020000

08002998 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	__NOP();
 80029a0:	bf00      	nop
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HAL_ADC_ConvCpltCallback>:
//conversion complete callback in non-blocking mode
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
	__NOP();
 80029b6:	bf00      	nop
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	80fb      	strh	r3, [r7, #6]
	counter_outside++;
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_GPIO_EXTI_Callback+0x8c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	4a1e      	ldr	r2, [pc, #120]	; (8002a50 <HAL_GPIO_EXTI_Callback+0x8c>)
 80029d6:	6013      	str	r3, [r2, #0]
	current_millis = HAL_GetTick();
 80029d8:	f000 fbb6 	bl	8003148 <HAL_GetTick>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_GPIO_EXTI_Callback+0x90>)
 80029e0:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_13 && (current_millis - previous_millis > 10))
 80029e2:	88fb      	ldrh	r3, [r7, #6]
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e8:	d12e      	bne.n	8002a48 <HAL_GPIO_EXTI_Callback+0x84>
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_GPIO_EXTI_Callback+0x90>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x94>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b0a      	cmp	r3, #10
 80029f6:	d927      	bls.n	8002a48 <HAL_GPIO_EXTI_Callback+0x84>
	{
		button_pressed = 1;
 80029f8:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x98>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
		previous_millis = current_millis;
 80029fe:	4b15      	ldr	r3, [pc, #84]	; (8002a54 <HAL_GPIO_EXTI_Callback+0x90>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <HAL_GPIO_EXTI_Callback+0x94>)
 8002a04:	6013      	str	r3, [r2, #0]

		if(button_pressed == 1 && button_state == 0)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x98>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d109      	bne.n	8002a22 <HAL_GPIO_EXTI_Callback+0x5e>
 8002a0e:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			button_state = 1;
 8002a16:	4b12      	ldr	r3, [pc, #72]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]
			button_pressed = 0;
 8002a1c:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x98>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
		}

		if(button_pressed == 1 && button_state == 1)
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x98>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d10e      	bne.n	8002a48 <HAL_GPIO_EXTI_Callback+0x84>
 8002a2a:	4b0d      	ldr	r3, [pc, #52]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10a      	bne.n	8002a48 <HAL_GPIO_EXTI_Callback+0x84>
		{
			measurement++;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3301      	adds	r3, #1
 8002a38:	4a0a      	ldr	r2, [pc, #40]	; (8002a64 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002a3a:	6013      	str	r3, [r2, #0]
			button_state = 2;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
			button_pressed = 0;
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_GPIO_EXTI_Callback+0x98>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000290 	.word	0x20000290
 8002a54:	2000028c 	.word	0x2000028c
 8002a58:	20000288 	.word	0x20000288
 8002a5c:	20000298 	.word	0x20000298
 8002a60:	20000299 	.word	0x20000299
 8002a64:	20000294 	.word	0x20000294

08002a68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a6c:	b672      	cpsid	i
}
 8002a6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a70:	e7fe      	b.n	8002a70 <Error_Handler+0x8>
	...

08002a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_MspInit+0x4c>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_MspInit+0x4c>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_MspInit+0x4c>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	603b      	str	r3, [r7, #0]
 8002a9a:	4b09      	ldr	r3, [pc, #36]	; (8002ac0 <HAL_MspInit+0x4c>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a08      	ldr	r2, [pc, #32]	; (8002ac0 <HAL_MspInit+0x4c>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_MspInit+0x4c>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ab2:	2007      	movs	r0, #7
 8002ab4:	f001 f928 	bl	8003d08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a2f      	ldr	r2, [pc, #188]	; (8002ba0 <HAL_ADC_MspInit+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d157      	bne.n	8002b96 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	4b2e      	ldr	r3, [pc, #184]	; (8002ba4 <HAL_ADC_MspInit+0xe0>)
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	4a2d      	ldr	r2, [pc, #180]	; (8002ba4 <HAL_ADC_MspInit+0xe0>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_ADC_MspInit+0xe0>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <HAL_ADC_MspInit+0xe0>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <HAL_ADC_MspInit+0xe0>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_ADC_MspInit+0xe0>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b22:	2303      	movs	r3, #3
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	481d      	ldr	r0, [pc, #116]	; (8002ba8 <HAL_ADC_MspInit+0xe4>)
 8002b32:	f001 fd83 	bl	800463c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b36:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b38:	4a1d      	ldr	r2, [pc, #116]	; (8002bb0 <HAL_ADC_MspInit+0xec>)
 8002b3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b5e:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b7a:	480c      	ldr	r0, [pc, #48]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b7c:	f001 f9ee 	bl	8003f5c <HAL_DMA_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002b86:	f7ff ff6f 	bl	8002a68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b8e:	639a      	str	r2, [r3, #56]	; 0x38
 8002b90:	4a06      	ldr	r2, [pc, #24]	; (8002bac <HAL_ADC_MspInit+0xe8>)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b96:	bf00      	nop
 8002b98:	3728      	adds	r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40012000 	.word	0x40012000
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	200017d4 	.word	0x200017d4
 8002bb0:	40026410 	.word	0x40026410

08002bb4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	; 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_DAC_MspInit+0x7c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d127      	bne.n	8002c26 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_DAC_MspInit+0x80>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a15      	ldr	r2, [pc, #84]	; (8002c34 <HAL_DAC_MspInit+0x80>)
 8002be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_DAC_MspInit+0x80>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <HAL_DAC_MspInit+0x80>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_DAC_MspInit+0x80>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	6313      	str	r3, [r2, #48]	; 0x30
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <HAL_DAC_MspInit+0x80>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c0e:	2310      	movs	r3, #16
 8002c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c12:	2303      	movs	r3, #3
 8002c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <HAL_DAC_MspInit+0x84>)
 8002c22:	f001 fd0b 	bl	800463c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002c26:	bf00      	nop
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40007400 	.word	0x40007400
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000

08002c3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <HAL_SPI_MspInit+0x84>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12b      	bne.n	8002cb6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b18      	ldr	r3, [pc, #96]	; (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	4a17      	ldr	r2, [pc, #92]	; (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6e:	4b15      	ldr	r3, [pc, #84]	; (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_SPI_MspInit+0x88>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c96:	23e0      	movs	r3, #224	; 0xe0
 8002c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ca6:	2305      	movs	r3, #5
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <HAL_SPI_MspInit+0x8c>)
 8002cb2:	f001 fcc3 	bl	800463c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40013000 	.word	0x40013000
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	; 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_UART_MspInit+0x84>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d12b      	bne.n	8002d46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_UART_MspInit+0x88>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	4a17      	ldr	r2, [pc, #92]	; (8002d54 <HAL_UART_MspInit+0x88>)
 8002cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfe:	4b15      	ldr	r3, [pc, #84]	; (8002d54 <HAL_UART_MspInit+0x88>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <HAL_UART_MspInit+0x88>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a10      	ldr	r2, [pc, #64]	; (8002d54 <HAL_UART_MspInit+0x88>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <HAL_UART_MspInit+0x88>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d26:	230c      	movs	r3, #12
 8002d28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d32:	2303      	movs	r3, #3
 8002d34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d36:	2307      	movs	r3, #7
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0314 	add.w	r3, r7, #20
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <HAL_UART_MspInit+0x8c>)
 8002d42:	f001 fc7b 	bl	800463c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	; 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40004400 	.word	0x40004400
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020000 	.word	0x40020000

08002d5c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002d60:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <SDTimer_Handler+0x40>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d006      	beq.n	8002d78 <SDTimer_Handler+0x1c>
		Timer1--;
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <SDTimer_Handler+0x40>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3b01      	subs	r3, #1
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <SDTimer_Handler+0x40>)
 8002d76:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <SDTimer_Handler+0x44>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <SDTimer_Handler+0x34>
		Timer2--;
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <SDTimer_Handler+0x44>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <SDTimer_Handler+0x44>)
 8002d8e:	701a      	strb	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000291d 	.word	0x2000291d
 8002da0:	2000291c 	.word	0x2000291c

08002da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002da8:	e7fe      	b.n	8002da8 <NMI_Handler+0x4>

08002daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002daa:	b480      	push	{r7}
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dae:	e7fe      	b.n	8002dae <HardFault_Handler+0x4>

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	e7fe      	b.n	8002db4 <MemManage_Handler+0x4>

08002db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db6:	b480      	push	{r7}
 8002db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dba:	e7fe      	b.n	8002dba <BusFault_Handler+0x4>

08002dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <UsageFault_Handler+0x4>

08002dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/* SD */
	FatFsCnt++;
 8002df0:	4b15      	ldr	r3, [pc, #84]	; (8002e48 <SysTick_Handler+0x5c>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	3301      	adds	r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4b13      	ldr	r3, [pc, #76]	; (8002e48 <SysTick_Handler+0x5c>)
 8002dfc:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <SysTick_Handler+0x5c>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b09      	cmp	r3, #9
 8002e06:	d904      	bls.n	8002e12 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <SysTick_Handler+0x5c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002e0e:	f7ff ffa5 	bl	8002d5c <SDTimer_Handler>
	}

	/* DAC */
	DACCounter++;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <SysTick_Handler+0x60>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <SysTick_Handler+0x60>)
 8002e1a:	6013      	str	r3, [r2, #0]
	if(DACCounter == 40)
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <SysTick_Handler+0x60>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b28      	cmp	r3, #40	; 0x28
 8002e22:	d102      	bne.n	8002e2a <SysTick_Handler+0x3e>
	{
		DACout = 1;
 8002e24:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <SysTick_Handler+0x64>)
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
	}
	if(DACCounter == 80)
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <SysTick_Handler+0x60>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b50      	cmp	r3, #80	; 0x50
 8002e30:	d105      	bne.n	8002e3e <SysTick_Handler+0x52>
	{
		DACout = 0;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <SysTick_Handler+0x64>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
		DACCounter = 0;
 8002e38:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SysTick_Handler+0x60>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e3e:	f000 f96f 	bl	8003120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	200002a0 	.word	0x200002a0
 8002e4c:	2000029c 	.word	0x2000029c
 8002e50:	20001840 	.word	0x20001840

08002e54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e5c:	f001 fd9c 	bl	8004998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e68:	4802      	ldr	r0, [pc, #8]	; (8002e74 <DMA2_Stream0_IRQHandler+0x10>)
 8002e6a:	f001 f97d 	bl	8004168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200017d4 	.word	0x200017d4

08002e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
	return 1;
 8002e7c:	2301      	movs	r3, #1
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <_kill>:

int _kill(int pid, int sig)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e92:	f006 f91b 	bl	80090cc <__errno>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2216      	movs	r2, #22
 8002e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <_exit>:

void _exit (int status)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7ff ffe7 	bl	8002e88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eba:	e7fe      	b.n	8002eba <_exit+0x12>

08002ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]
 8002ecc:	e00a      	b.n	8002ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ece:	f3af 8000 	nop.w
 8002ed2:	4601      	mov	r1, r0
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60ba      	str	r2, [r7, #8]
 8002eda:	b2ca      	uxtb	r2, r1
 8002edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	617b      	str	r3, [r7, #20]
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	dbf0      	blt.n	8002ece <_read+0x12>
	}

return len;
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b086      	sub	sp, #24
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e009      	b.n	8002f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	60ba      	str	r2, [r7, #8]
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	dbf1      	blt.n	8002f08 <_write+0x12>
	}
	return len;
 8002f24:	687b      	ldr	r3, [r7, #4]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <_close>:

int _close(int file)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
	return -1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f56:	605a      	str	r2, [r3, #4]
	return 0;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_isatty>:

int _isatty(int file)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
	return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa0:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <_sbrk+0x5c>)
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <_sbrk+0x60>)
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <_sbrk+0x64>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d102      	bne.n	8002fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <_sbrk+0x64>)
 8002fb6:	4a12      	ldr	r2, [pc, #72]	; (8003000 <_sbrk+0x68>)
 8002fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <_sbrk+0x64>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d207      	bcs.n	8002fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc8:	f006 f880 	bl	80090cc <__errno>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	220c      	movs	r2, #12
 8002fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	e009      	b.n	8002fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <_sbrk+0x64>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <_sbrk+0x64>)
 8002fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fea:	68fb      	ldr	r3, [r7, #12]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20020000 	.word	0x20020000
 8002ff8:	00000400 	.word	0x00000400
 8002ffc:	200002a4 	.word	0x200002a4
 8003000:	200049a0 	.word	0x200049a0

08003004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <SystemInit+0x20>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	4a05      	ldr	r2, [pc, #20]	; (8003024 <SystemInit+0x20>)
 8003010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800302c:	480d      	ldr	r0, [pc, #52]	; (8003064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800302e:	490e      	ldr	r1, [pc, #56]	; (8003068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003030:	4a0e      	ldr	r2, [pc, #56]	; (800306c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003034:	e002      	b.n	800303c <LoopCopyDataInit>

08003036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303a:	3304      	adds	r3, #4

0800303c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800303c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003040:	d3f9      	bcc.n	8003036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003042:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003044:	4c0b      	ldr	r4, [pc, #44]	; (8003074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003048:	e001      	b.n	800304e <LoopFillZerobss>

0800304a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800304c:	3204      	adds	r2, #4

0800304e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003050:	d3fb      	bcc.n	800304a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003052:	f7ff ffd7 	bl	8003004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003056:	f006 f83f 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800305a:	f7ff f85d 	bl	8002118 <main>
  bx  lr    
 800305e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003060:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003068:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800306c:	0800c3dc 	.word	0x0800c3dc
  ldr r2, =_sbss
 8003070:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003074:	200049a0 	.word	0x200049a0

08003078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003078:	e7fe      	b.n	8003078 <ADC_IRQHandler>
	...

0800307c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003080:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_Init+0x40>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <HAL_Init+0x40>)
 8003086:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800308a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800308c:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_Init+0x40>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_Init+0x40>)
 8003092:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003096:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003098:	4b08      	ldr	r3, [pc, #32]	; (80030bc <HAL_Init+0x40>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a07      	ldr	r2, [pc, #28]	; (80030bc <HAL_Init+0x40>)
 800309e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a4:	2003      	movs	r0, #3
 80030a6:	f000 fe2f 	bl	8003d08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f000 f808 	bl	80030c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b0:	f7ff fce0 	bl	8002a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40023c00 	.word	0x40023c00

080030c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_InitTick+0x54>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_InitTick+0x58>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	4619      	mov	r1, r3
 80030d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fe47 	bl	8003d72 <HAL_SYSTICK_Config>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00e      	b.n	800310c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0f      	cmp	r3, #15
 80030f2:	d80a      	bhi.n	800310a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f4:	2200      	movs	r2, #0
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f000 fe0f 	bl	8003d1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003100:	4a06      	ldr	r2, [pc, #24]	; (800311c <HAL_InitTick+0x5c>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e000      	b.n	800310c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20000004 	.word	0x20000004
 8003118:	2000000c 	.word	0x2000000c
 800311c:	20000008 	.word	0x20000008

08003120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003124:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x20>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	461a      	mov	r2, r3
 800312a:	4b06      	ldr	r3, [pc, #24]	; (8003144 <HAL_IncTick+0x24>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4413      	add	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	; (8003144 <HAL_IncTick+0x24>)
 8003132:	6013      	str	r3, [r2, #0]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	2000000c 	.word	0x2000000c
 8003144:	20002920 	.word	0x20002920

08003148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return uwTick;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_GetTick+0x14>)
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	20002920 	.word	0x20002920

08003160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003168:	f7ff ffee 	bl	8003148 <HAL_GetTick>
 800316c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d005      	beq.n	8003186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800317a:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <HAL_Delay+0x44>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4413      	add	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003186:	bf00      	nop
 8003188:	f7ff ffde 	bl	8003148 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	429a      	cmp	r2, r3
 8003196:	d8f7      	bhi.n	8003188 <HAL_Delay+0x28>
  {
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000000c 	.word	0x2000000c

080031a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e033      	b.n	8003226 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7ff fc7c 	bl	8002ac4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ee:	f023 0302 	bic.w	r3, r3, #2
 80031f2:	f043 0202 	orr.w	r2, r3, #2
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fb36 	bl	800386c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	641a      	str	r2, [r3, #64]	; 0x40
 8003216:	e001      	b.n	800321c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003224:	7bfb      	ldrb	r3, [r7, #15]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_ADC_Start+0x1a>
 8003246:	2302      	movs	r3, #2
 8003248:	e0b2      	b.n	80033b0 <HAL_ADC_Start+0x180>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d018      	beq.n	8003292 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003270:	4b52      	ldr	r3, [pc, #328]	; (80033bc <HAL_ADC_Start+0x18c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_ADC_Start+0x190>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0c9a      	lsrs	r2, r3, #18
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003284:	e002      	b.n	800328c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	3b01      	subs	r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f9      	bne.n	8003286 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d17a      	bne.n	8003396 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80032a8:	f023 0301 	bic.w	r3, r3, #1
 80032ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d106      	bne.n	80032ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	f023 0206 	bic.w	r2, r3, #6
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	645a      	str	r2, [r3, #68]	; 0x44
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032fc:	4b31      	ldr	r3, [pc, #196]	; (80033c4 <HAL_ADC_Start+0x194>)
 80032fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003308:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2b00      	cmp	r3, #0
 8003314:	d12a      	bne.n	800336c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a2b      	ldr	r2, [pc, #172]	; (80033c8 <HAL_ADC_Start+0x198>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d015      	beq.n	800334c <HAL_ADC_Start+0x11c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a29      	ldr	r2, [pc, #164]	; (80033cc <HAL_ADC_Start+0x19c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d105      	bne.n	8003336 <HAL_ADC_Start+0x106>
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_ADC_Start+0x194>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a25      	ldr	r2, [pc, #148]	; (80033d0 <HAL_ADC_Start+0x1a0>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d136      	bne.n	80033ae <HAL_ADC_Start+0x17e>
 8003340:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <HAL_ADC_Start+0x194>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d130      	bne.n	80033ae <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d129      	bne.n	80033ae <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003368:	609a      	str	r2, [r3, #8]
 800336a:	e020      	b.n	80033ae <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <HAL_ADC_Start+0x198>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d11b      	bne.n	80033ae <HAL_ADC_Start+0x17e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d114      	bne.n	80033ae <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	e00b      	b.n	80033ae <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f043 0210 	orr.w	r2, r3, #16
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f043 0201 	orr.w	r2, r3, #1
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	20000004 	.word	0x20000004
 80033c0:	431bde83 	.word	0x431bde83
 80033c4:	40012300 	.word	0x40012300
 80033c8:	40012000 	.word	0x40012000
 80033cc:	40012100 	.word	0x40012100
 80033d0:	40012200 	.word	0x40012200

080033d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_Start_DMA+0x1e>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0e9      	b.n	80035c6 <HAL_ADC_Start_DMA+0x1f2>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b01      	cmp	r3, #1
 8003406:	d018      	beq.n	800343a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f042 0201 	orr.w	r2, r2, #1
 8003416:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003418:	4b6d      	ldr	r3, [pc, #436]	; (80035d0 <HAL_ADC_Start_DMA+0x1fc>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6d      	ldr	r2, [pc, #436]	; (80035d4 <HAL_ADC_Start_DMA+0x200>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0c9a      	lsrs	r2, r3, #18
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800342c:	e002      	b.n	8003434 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	3b01      	subs	r3, #1
 8003432:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f9      	bne.n	800342e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d107      	bne.n	800345a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003458:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 80a1 	bne.w	80035ac <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003472:	f023 0301 	bic.w	r3, r3, #1
 8003476:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003494:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a8:	d106      	bne.n	80034b8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f023 0206 	bic.w	r2, r3, #6
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
 80034b6:	e002      	b.n	80034be <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 80034c8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	4a43      	ldr	r2, [pc, #268]	; (80035dc <HAL_ADC_Start_DMA+0x208>)
 80034d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	4a42      	ldr	r2, [pc, #264]	; (80035e0 <HAL_ADC_Start_DMA+0x20c>)
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	4a41      	ldr	r2, [pc, #260]	; (80035e4 <HAL_ADC_Start_DMA+0x210>)
 80034e0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034fa:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	334c      	adds	r3, #76	; 0x4c
 8003516:	4619      	mov	r1, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f000 fdcc 	bl	80040b8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 031f 	and.w	r3, r3, #31
 8003528:	2b00      	cmp	r3, #0
 800352a:	d12a      	bne.n	8003582 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2d      	ldr	r2, [pc, #180]	; (80035e8 <HAL_ADC_Start_DMA+0x214>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d015      	beq.n	8003562 <HAL_ADC_Start_DMA+0x18e>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	; (80035ec <HAL_ADC_Start_DMA+0x218>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d105      	bne.n	800354c <HAL_ADC_Start_DMA+0x178>
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_ADC_Start_DMA+0x21c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d136      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <HAL_ADC_Start_DMA+0x204>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d130      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d129      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	e020      	b.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <HAL_ADC_Start_DMA+0x214>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d11b      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d114      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035a8:	609a      	str	r2, [r3, #8]
 80035aa:	e00b      	b.n	80035c4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0210 	orr.w	r2, r3, #16
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0201 	orr.w	r2, r3, #1
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000004 	.word	0x20000004
 80035d4:	431bde83 	.word	0x431bde83
 80035d8:	40012300 	.word	0x40012300
 80035dc:	08003a65 	.word	0x08003a65
 80035e0:	08003b1f 	.word	0x08003b1f
 80035e4:	08003b3b 	.word	0x08003b3b
 80035e8:	40012000 	.word	0x40012000
 80035ec:	40012100 	.word	0x40012100
 80035f0:	40012200 	.word	0x40012200

080035f4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800361c:	2b01      	cmp	r3, #1
 800361e:	d101      	bne.n	8003624 <HAL_ADC_ConfigChannel+0x1c>
 8003620:	2302      	movs	r3, #2
 8003622:	e113      	b.n	800384c <HAL_ADC_ConfigChannel+0x244>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b09      	cmp	r3, #9
 8003632:	d925      	bls.n	8003680 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68d9      	ldr	r1, [r3, #12]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	4613      	mov	r3, r2
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	4413      	add	r3, r2
 8003648:	3b1e      	subs	r3, #30
 800364a:	2207      	movs	r2, #7
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	43da      	mvns	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	400a      	ands	r2, r1
 8003658:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68d9      	ldr	r1, [r3, #12]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b29b      	uxth	r3, r3
 800366a:	4618      	mov	r0, r3
 800366c:	4603      	mov	r3, r0
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4403      	add	r3, r0
 8003672:	3b1e      	subs	r3, #30
 8003674:	409a      	lsls	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e022      	b.n	80036c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6919      	ldr	r1, [r3, #16]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	2207      	movs	r2, #7
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	400a      	ands	r2, r1
 80036a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6919      	ldr	r1, [r3, #16]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	4618      	mov	r0, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	4403      	add	r3, r0
 80036bc:	409a      	lsls	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d824      	bhi.n	8003718 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	3b05      	subs	r3, #5
 80036e0:	221f      	movs	r2, #31
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	400a      	ands	r2, r1
 80036ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	4618      	mov	r0, r3
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	3b05      	subs	r3, #5
 800370a:	fa00 f203 	lsl.w	r2, r0, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	635a      	str	r2, [r3, #52]	; 0x34
 8003716:	e04c      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b0c      	cmp	r3, #12
 800371e:	d824      	bhi.n	800376a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	3b23      	subs	r3, #35	; 0x23
 8003732:	221f      	movs	r2, #31
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	43da      	mvns	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	400a      	ands	r2, r1
 8003740:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	4618      	mov	r0, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	3b23      	subs	r3, #35	; 0x23
 800375c:	fa00 f203 	lsl.w	r2, r0, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
 8003768:	e023      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3b41      	subs	r3, #65	; 0x41
 800377c:	221f      	movs	r2, #31
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	400a      	ands	r2, r1
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	4618      	mov	r0, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	3b41      	subs	r3, #65	; 0x41
 80037a6:	fa00 f203 	lsl.w	r2, r0, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	430a      	orrs	r2, r1
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b2:	4b29      	ldr	r3, [pc, #164]	; (8003858 <HAL_ADC_ConfigChannel+0x250>)
 80037b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a28      	ldr	r2, [pc, #160]	; (800385c <HAL_ADC_ConfigChannel+0x254>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10f      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1d8>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b12      	cmp	r3, #18
 80037c6:	d10b      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <HAL_ADC_ConfigChannel+0x254>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d12b      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x23a>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_ADC_ConfigChannel+0x258>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d003      	beq.n	80037fc <HAL_ADC_ConfigChannel+0x1f4>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b11      	cmp	r3, #17
 80037fa:	d122      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a11      	ldr	r2, [pc, #68]	; (8003860 <HAL_ADC_ConfigChannel+0x258>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d111      	bne.n	8003842 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800381e:	4b11      	ldr	r3, [pc, #68]	; (8003864 <HAL_ADC_ConfigChannel+0x25c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a11      	ldr	r2, [pc, #68]	; (8003868 <HAL_ADC_ConfigChannel+0x260>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	0c9a      	lsrs	r2, r3, #18
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003834:	e002      	b.n	800383c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3b01      	subs	r3, #1
 800383a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f9      	bne.n	8003836 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40012300 	.word	0x40012300
 800385c:	40012000 	.word	0x40012000
 8003860:	10000012 	.word	0x10000012
 8003864:	20000004 	.word	0x20000004
 8003868:	431bde83 	.word	0x431bde83

0800386c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003874:	4b79      	ldr	r3, [pc, #484]	; (8003a5c <ADC_Init+0x1f0>)
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <ADC_Init+0x1f4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d022      	beq.n	800394a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e00f      	b.n	800396a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003968:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0202 	bic.w	r2, r2, #2
 8003978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6899      	ldr	r1, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7e1b      	ldrb	r3, [r3, #24]
 8003984:	005a      	lsls	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01b      	beq.n	80039d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	3b01      	subs	r3, #1
 80039c4:	035a      	lsls	r2, r3, #13
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	e007      	b.n	80039e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	051a      	lsls	r2, r3, #20
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a22:	025a      	lsls	r2, r3, #9
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	029a      	lsls	r2, r3, #10
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40012300 	.word	0x40012300
 8003a60:	0f000001 	.word	0x0f000001

08003a64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d13c      	bne.n	8003af8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12b      	bne.n	8003af0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d127      	bne.n	8003af0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d119      	bne.n	8003af0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0220 	bic.w	r2, r2, #32
 8003aca:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0201 	orr.w	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f7fe ff5c 	bl	80029ae <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003af6:	e00e      	b.n	8003b16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff fd75 	bl	80035f4 <HAL_ADC_ErrorCallback>
}
 8003b0a:	e004      	b.n	8003b16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	4798      	blx	r3
}
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7fe ff33 	bl	8002998 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2240      	movs	r2, #64	; 0x40
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f043 0204 	orr.w	r2, r3, #4
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fd4a 	bl	80035f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b60:	bf00      	nop
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 0307 	and.w	r3, r3, #7
 8003b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b84:	4013      	ands	r3, r2
 8003b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b9a:	4a04      	ldr	r2, [pc, #16]	; (8003bac <__NVIC_SetPriorityGrouping+0x44>)
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	60d3      	str	r3, [r2, #12]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	e000ed00 	.word	0xe000ed00

08003bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	0a1b      	lsrs	r3, r3, #8
 8003bba:	f003 0307 	and.w	r3, r3, #7
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db0b      	blt.n	8003bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	4907      	ldr	r1, [pc, #28]	; (8003c04 <__NVIC_EnableIRQ+0x38>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000e100 	.word	0xe000e100

08003c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6039      	str	r1, [r7, #0]
 8003c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	db0a      	blt.n	8003c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	490c      	ldr	r1, [pc, #48]	; (8003c54 <__NVIC_SetPriority+0x4c>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	0112      	lsls	r2, r2, #4
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	440b      	add	r3, r1
 8003c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c30:	e00a      	b.n	8003c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	4908      	ldr	r1, [pc, #32]	; (8003c58 <__NVIC_SetPriority+0x50>)
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	0112      	lsls	r2, r2, #4
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	440b      	add	r3, r1
 8003c46:	761a      	strb	r2, [r3, #24]
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	e000e100 	.word	0xe000e100
 8003c58:	e000ed00 	.word	0xe000ed00

08003c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b089      	sub	sp, #36	; 0x24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f1c3 0307 	rsb	r3, r3, #7
 8003c76:	2b04      	cmp	r3, #4
 8003c78:	bf28      	it	cs
 8003c7a:	2304      	movcs	r3, #4
 8003c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2b06      	cmp	r3, #6
 8003c84:	d902      	bls.n	8003c8c <NVIC_EncodePriority+0x30>
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	3b03      	subs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <NVIC_EncodePriority+0x32>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c90:	f04f 32ff 	mov.w	r2, #4294967295
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa01 f303 	lsl.w	r3, r1, r3
 8003cae:	43d9      	mvns	r1, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb4:	4313      	orrs	r3, r2
         );
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd4:	d301      	bcc.n	8003cda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e00f      	b.n	8003cfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cda:	4a0a      	ldr	r2, [pc, #40]	; (8003d04 <SysTick_Config+0x40>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ce2:	210f      	movs	r1, #15
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	f7ff ff8e 	bl	8003c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <SysTick_Config+0x40>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cf2:	4b04      	ldr	r3, [pc, #16]	; (8003d04 <SysTick_Config+0x40>)
 8003cf4:	2207      	movs	r2, #7
 8003cf6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	e000e010 	.word	0xe000e010

08003d08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff ff29 	bl	8003b68 <__NVIC_SetPriorityGrouping>
}
 8003d16:	bf00      	nop
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	4603      	mov	r3, r0
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d30:	f7ff ff3e 	bl	8003bb0 <__NVIC_GetPriorityGrouping>
 8003d34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff ff8e 	bl	8003c5c <NVIC_EncodePriority>
 8003d40:	4602      	mov	r2, r0
 8003d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d46:	4611      	mov	r1, r2
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff ff5d 	bl	8003c08 <__NVIC_SetPriority>
}
 8003d4e:	bf00      	nop
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b082      	sub	sp, #8
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff31 	bl	8003bcc <__NVIC_EnableIRQ>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ffa2 	bl	8003cc4 <SysTick_Config>
 8003d80:	4603      	mov	r3, r0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3708      	adds	r7, #8
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b082      	sub	sp, #8
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e014      	b.n	8003dc6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	791b      	ldrb	r3, [r3, #4]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d105      	bne.n	8003db2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7fe ff01 	bl	8002bb4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2202      	movs	r2, #2
 8003db6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	795b      	ldrb	r3, [r3, #5]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_DAC_Start+0x16>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e040      	b.n	8003e66 <HAL_DAC_Start+0x98>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	409a      	lsls	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003e18:	2b3c      	cmp	r3, #60	; 0x3c
 8003e1a:	d11d      	bne.n	8003e58 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	605a      	str	r2, [r3, #4]
 8003e2c:	e014      	b.n	8003e58 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	213c      	movs	r1, #60	; 0x3c
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d107      	bne.n	8003e58 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685a      	ldr	r2, [r3, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0202 	orr.w	r2, r2, #2
 8003e56:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b087      	sub	sp, #28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d105      	bne.n	8003e9c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	3308      	adds	r3, #8
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e004      	b.n	8003ea6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	371c      	adds	r7, #28
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	795b      	ldrb	r3, [r3, #5]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d101      	bne.n	8003ed4 <HAL_DAC_ConfigChannel+0x18>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e03c      	b.n	8003f4e <HAL_DAC_ConfigChannel+0x92>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2202      	movs	r2, #2
 8003ede:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4013      	ands	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6819      	ldr	r1, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	22c0      	movs	r2, #192	; 0xc0
 8003f32:	fa02 f303 	lsl.w	r3, r2, r3
 8003f36:	43da      	mvns	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
	...

08003f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f68:	f7ff f8ee 	bl	8003148 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e099      	b.n	80040ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f98:	e00f      	b.n	8003fba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f9a:	f7ff f8d5 	bl	8003148 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d908      	bls.n	8003fba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2220      	movs	r2, #32
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e078      	b.n	80040ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e8      	bne.n	8003f9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4b38      	ldr	r3, [pc, #224]	; (80040b4 <HAL_DMA_Init+0x158>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2b04      	cmp	r3, #4
 8004012:	d107      	bne.n	8004024 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	4313      	orrs	r3, r2
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0307 	bic.w	r3, r3, #7
 800403a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b04      	cmp	r3, #4
 800404c:	d117      	bne.n	800407e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fa6f 	bl	8004544 <DMA_CheckFifoParam>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2240      	movs	r2, #64	; 0x40
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800407a:	2301      	movs	r3, #1
 800407c:	e016      	b.n	80040ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fa26 	bl	80044d8 <DMA_CalcBaseAndBitshift>
 800408c:	4603      	mov	r3, r0
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	223f      	movs	r2, #63	; 0x3f
 8004096:	409a      	lsls	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	f010803f 	.word	0xf010803f

080040b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d101      	bne.n	80040de <HAL_DMA_Start_IT+0x26>
 80040da:	2302      	movs	r3, #2
 80040dc:	e040      	b.n	8004160 <HAL_DMA_Start_IT+0xa8>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d12f      	bne.n	8004152 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68b9      	ldr	r1, [r7, #8]
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f9b8 	bl	800447c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	223f      	movs	r2, #63	; 0x3f
 8004112:	409a      	lsls	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0216 	orr.w	r2, r2, #22
 8004126:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0208 	orr.w	r2, r2, #8
 800413e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	e005      	b.n	800415e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800415a:	2302      	movs	r3, #2
 800415c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800415e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004174:	4b92      	ldr	r3, [pc, #584]	; (80043c0 <HAL_DMA_IRQHandler+0x258>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a92      	ldr	r2, [pc, #584]	; (80043c4 <HAL_DMA_IRQHandler+0x25c>)
 800417a:	fba2 2303 	umull	r2, r3, r2, r3
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004186:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004192:	2208      	movs	r2, #8
 8004194:	409a      	lsls	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4013      	ands	r3, r2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d01a      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0204 	bic.w	r2, r2, #4
 80041ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	2208      	movs	r2, #8
 80041c2:	409a      	lsls	r2, r3
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041cc:	f043 0201 	orr.w	r2, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	2201      	movs	r2, #1
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4013      	ands	r3, r2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d012      	beq.n	800420a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f6:	2201      	movs	r2, #1
 80041f8:	409a      	lsls	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f043 0202 	orr.w	r2, r3, #2
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	2204      	movs	r2, #4
 8004210:	409a      	lsls	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4013      	ands	r3, r2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d012      	beq.n	8004240 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2204      	movs	r2, #4
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0204 	orr.w	r2, r3, #4
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2210      	movs	r2, #16
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d043      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03c      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2210      	movs	r2, #16
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d018      	beq.n	80042aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d108      	bne.n	8004298 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d024      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
 8004296:	e01f      	b.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01b      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	4798      	blx	r3
 80042a8:	e016      	b.n	80042d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0208 	bic.w	r2, r2, #8
 80042c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2220      	movs	r2, #32
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 808e 	beq.w	8004406 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0310 	and.w	r3, r3, #16
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8086 	beq.w	8004406 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2220      	movs	r2, #32
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b05      	cmp	r3, #5
 8004310:	d136      	bne.n	8004380 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0216 	bic.w	r2, r2, #22
 8004320:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004330:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	2b00      	cmp	r3, #0
 8004338:	d103      	bne.n	8004342 <HAL_DMA_IRQHandler+0x1da>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0208 	bic.w	r2, r2, #8
 8004350:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004356:	223f      	movs	r2, #63	; 0x3f
 8004358:	409a      	lsls	r2, r3
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004372:	2b00      	cmp	r3, #0
 8004374:	d07d      	beq.n	8004472 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	4798      	blx	r3
        }
        return;
 800437e:	e078      	b.n	8004472 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d01c      	beq.n	80043c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d030      	beq.n	8004406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e02b      	b.n	8004406 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d027      	beq.n	8004406 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	4798      	blx	r3
 80043be:	e022      	b.n	8004406 <HAL_DMA_IRQHandler+0x29e>
 80043c0:	20000004 	.word	0x20000004
 80043c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10f      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0210 	bic.w	r2, r2, #16
 80043e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	2b00      	cmp	r3, #0
 800440c:	d032      	beq.n	8004474 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d022      	beq.n	8004460 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2205      	movs	r2, #5
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	3301      	adds	r3, #1
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	429a      	cmp	r2, r3
 800443c:	d307      	bcc.n	800444e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f2      	bne.n	8004432 <HAL_DMA_IRQHandler+0x2ca>
 800444c:	e000      	b.n	8004450 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800444e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	4798      	blx	r3
 8004470:	e000      	b.n	8004474 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004472:	bf00      	nop
    }
  }
}
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop

0800447c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004498:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	2b40      	cmp	r3, #64	; 0x40
 80044a8:	d108      	bne.n	80044bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044ba:	e007      	b.n	80044cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	60da      	str	r2, [r3, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	3b10      	subs	r3, #16
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <DMA_CalcBaseAndBitshift+0x64>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	091b      	lsrs	r3, r3, #4
 80044f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <DMA_CalcBaseAndBitshift+0x68>)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d909      	bls.n	800451a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	1d1a      	adds	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
 8004518:	e007      	b.n	800452a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004522:	f023 0303 	bic.w	r3, r3, #3
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	aaaaaaab 	.word	0xaaaaaaab
 8004540:	0800bf60 	.word	0x0800bf60

08004544 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004554:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11f      	bne.n	800459e <DMA_CheckFifoParam+0x5a>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d856      	bhi.n	8004612 <DMA_CheckFifoParam+0xce>
 8004564:	a201      	add	r2, pc, #4	; (adr r2, 800456c <DMA_CheckFifoParam+0x28>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	0800457d 	.word	0x0800457d
 8004570:	0800458f 	.word	0x0800458f
 8004574:	0800457d 	.word	0x0800457d
 8004578:	08004613 	.word	0x08004613
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d046      	beq.n	8004616 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800458c:	e043      	b.n	8004616 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004596:	d140      	bne.n	800461a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800459c:	e03d      	b.n	800461a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	d121      	bne.n	80045ec <DMA_CheckFifoParam+0xa8>
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d837      	bhi.n	800461e <DMA_CheckFifoParam+0xda>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <DMA_CheckFifoParam+0x70>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cb 	.word	0x080045cb
 80045bc:	080045c5 	.word	0x080045c5
 80045c0:	080045dd 	.word	0x080045dd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      break;
 80045c8:	e030      	b.n	800462c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d025      	beq.n	8004622 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045da:	e022      	b.n	8004622 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045e4:	d11f      	bne.n	8004626 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045ea:	e01c      	b.n	8004626 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d903      	bls.n	80045fa <DMA_CheckFifoParam+0xb6>
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	2b03      	cmp	r3, #3
 80045f6:	d003      	beq.n	8004600 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045f8:	e018      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	73fb      	strb	r3, [r7, #15]
      break;
 80045fe:	e015      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00e      	beq.n	800462a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
      break;
 8004610:	e00b      	b.n	800462a <DMA_CheckFifoParam+0xe6>
      break;
 8004612:	bf00      	nop
 8004614:	e00a      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 8004616:	bf00      	nop
 8004618:	e008      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800461a:	bf00      	nop
 800461c:	e006      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;   
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
    }
  } 
  
  return status; 
 800462c:	7bfb      	ldrb	r3, [r7, #15]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop

0800463c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800463c:	b480      	push	{r7}
 800463e:	b089      	sub	sp, #36	; 0x24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800464e:	2300      	movs	r3, #0
 8004650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	e165      	b.n	8004924 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004658:	2201      	movs	r2, #1
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	fa02 f303 	lsl.w	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4013      	ands	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	429a      	cmp	r2, r3
 8004672:	f040 8154 	bne.w	800491e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d005      	beq.n	800468e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468a:	2b02      	cmp	r3, #2
 800468c:	d130      	bne.n	80046f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	2203      	movs	r2, #3
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	43db      	mvns	r3, r3
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	4013      	ands	r3, r2
 80046d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 0201 	and.w	r2, r3, #1
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d017      	beq.n	800472c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2203      	movs	r2, #3
 8004708:	fa02 f303 	lsl.w	r3, r2, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	4013      	ands	r3, r2
 8004712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4313      	orrs	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d123      	bne.n	8004780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	08da      	lsrs	r2, r3, #3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3208      	adds	r2, #8
 8004740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	220f      	movs	r2, #15
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	08da      	lsrs	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3208      	adds	r2, #8
 800477a:	69b9      	ldr	r1, [r7, #24]
 800477c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	2203      	movs	r2, #3
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0203 	and.w	r2, r3, #3
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 80ae 	beq.w	800491e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	4b5d      	ldr	r3, [pc, #372]	; (800493c <HAL_GPIO_Init+0x300>)
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	4a5c      	ldr	r2, [pc, #368]	; (800493c <HAL_GPIO_Init+0x300>)
 80047cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d0:	6453      	str	r3, [r2, #68]	; 0x44
 80047d2:	4b5a      	ldr	r3, [pc, #360]	; (800493c <HAL_GPIO_Init+0x300>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047de:	4a58      	ldr	r2, [pc, #352]	; (8004940 <HAL_GPIO_Init+0x304>)
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	089b      	lsrs	r3, r3, #2
 80047e4:	3302      	adds	r3, #2
 80047e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0303 	and.w	r3, r3, #3
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	220f      	movs	r2, #15
 80047f6:	fa02 f303 	lsl.w	r3, r2, r3
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a4f      	ldr	r2, [pc, #316]	; (8004944 <HAL_GPIO_Init+0x308>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d025      	beq.n	8004856 <HAL_GPIO_Init+0x21a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a4e      	ldr	r2, [pc, #312]	; (8004948 <HAL_GPIO_Init+0x30c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01f      	beq.n	8004852 <HAL_GPIO_Init+0x216>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a4d      	ldr	r2, [pc, #308]	; (800494c <HAL_GPIO_Init+0x310>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d019      	beq.n	800484e <HAL_GPIO_Init+0x212>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4c      	ldr	r2, [pc, #304]	; (8004950 <HAL_GPIO_Init+0x314>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <HAL_GPIO_Init+0x20e>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a4b      	ldr	r2, [pc, #300]	; (8004954 <HAL_GPIO_Init+0x318>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00d      	beq.n	8004846 <HAL_GPIO_Init+0x20a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a4a      	ldr	r2, [pc, #296]	; (8004958 <HAL_GPIO_Init+0x31c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d007      	beq.n	8004842 <HAL_GPIO_Init+0x206>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a49      	ldr	r2, [pc, #292]	; (800495c <HAL_GPIO_Init+0x320>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_GPIO_Init+0x202>
 800483a:	2306      	movs	r3, #6
 800483c:	e00c      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 800483e:	2307      	movs	r3, #7
 8004840:	e00a      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 8004842:	2305      	movs	r3, #5
 8004844:	e008      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 8004846:	2304      	movs	r3, #4
 8004848:	e006      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 800484a:	2303      	movs	r3, #3
 800484c:	e004      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 800484e:	2302      	movs	r3, #2
 8004850:	e002      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <HAL_GPIO_Init+0x21c>
 8004856:	2300      	movs	r3, #0
 8004858:	69fa      	ldr	r2, [r7, #28]
 800485a:	f002 0203 	and.w	r2, r2, #3
 800485e:	0092      	lsls	r2, r2, #2
 8004860:	4093      	lsls	r3, r2
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	4313      	orrs	r3, r2
 8004866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004868:	4935      	ldr	r1, [pc, #212]	; (8004940 <HAL_GPIO_Init+0x304>)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	3302      	adds	r3, #2
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004876:	4b3a      	ldr	r3, [pc, #232]	; (8004960 <HAL_GPIO_Init+0x324>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	43db      	mvns	r3, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4013      	ands	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800489a:	4a31      	ldr	r2, [pc, #196]	; (8004960 <HAL_GPIO_Init+0x324>)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_GPIO_Init+0x324>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048c4:	4a26      	ldr	r2, [pc, #152]	; (8004960 <HAL_GPIO_Init+0x324>)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ca:	4b25      	ldr	r3, [pc, #148]	; (8004960 <HAL_GPIO_Init+0x324>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ee:	4a1c      	ldr	r2, [pc, #112]	; (8004960 <HAL_GPIO_Init+0x324>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048f4:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <HAL_GPIO_Init+0x324>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004918:	4a11      	ldr	r2, [pc, #68]	; (8004960 <HAL_GPIO_Init+0x324>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	3301      	adds	r3, #1
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	2b0f      	cmp	r3, #15
 8004928:	f67f ae96 	bls.w	8004658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	3724      	adds	r7, #36	; 0x24
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	40013800 	.word	0x40013800
 8004944:	40020000 	.word	0x40020000
 8004948:	40020400 	.word	0x40020400
 800494c:	40020800 	.word	0x40020800
 8004950:	40020c00 	.word	0x40020c00
 8004954:	40021000 	.word	0x40021000
 8004958:	40021400 	.word	0x40021400
 800495c:	40021800 	.word	0x40021800
 8004960:	40013c00 	.word	0x40013c00

08004964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	807b      	strh	r3, [r7, #2]
 8004970:	4613      	mov	r3, r2
 8004972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004974:	787b      	ldrb	r3, [r7, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800497a:	887a      	ldrh	r2, [r7, #2]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004980:	e003      	b.n	800498a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004982:	887b      	ldrh	r3, [r7, #2]
 8004984:	041a      	lsls	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	619a      	str	r2, [r3, #24]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049a2:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d006      	beq.n	80049bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049ae:	4a05      	ldr	r2, [pc, #20]	; (80049c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049b4:	88fb      	ldrh	r3, [r7, #6]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe f804 	bl	80029c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40013c00 	.word	0x40013c00

080049c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cc      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b68      	ldr	r3, [pc, #416]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d90c      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b3f      	ldr	r3, [pc, #252]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e067      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4934      	ldr	r1, [pc, #208]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fe fb46 	bl	8003148 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fe fb42 	bl	8003148 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20c      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f855 	bl	8004bfc <HAL_RCC_GetSysClockFreq>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	490a      	ldr	r1, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	5ccb      	ldrb	r3, [r1, r3]
 8004b62:	fa22 f303 	lsr.w	r3, r2, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe faa6 	bl	80030c0 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800bf48 	.word	0x0800bf48
 8004b8c:	20000004 	.word	0x20000004
 8004b90:	20000008 	.word	0x20000008

08004b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	20000004 	.word	0x20000004

08004bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bb0:	f7ff fff0 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0a9b      	lsrs	r3, r3, #10
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800bf58 	.word	0x0800bf58

08004bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bd8:	f7ff ffdc 	bl	8004b94 <HAL_RCC_GetHCLKFreq>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	0b5b      	lsrs	r3, r3, #13
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	4903      	ldr	r1, [pc, #12]	; (8004bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bea:	5ccb      	ldrb	r3, [r1, r3]
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	0800bf58 	.word	0x0800bf58

08004bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c18:	4bce      	ldr	r3, [pc, #824]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b0c      	cmp	r3, #12
 8004c22:	f200 818d 	bhi.w	8004f40 <HAL_RCC_GetSysClockFreq+0x344>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <HAL_RCC_GetSysClockFreq+0x30>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004f41 	.word	0x08004f41
 8004c34:	08004f41 	.word	0x08004f41
 8004c38:	08004f41 	.word	0x08004f41
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004f41 	.word	0x08004f41
 8004c44:	08004f41 	.word	0x08004f41
 8004c48:	08004f41 	.word	0x08004f41
 8004c4c:	08004c6d 	.word	0x08004c6d
 8004c50:	08004f41 	.word	0x08004f41
 8004c54:	08004f41 	.word	0x08004f41
 8004c58:	08004f41 	.word	0x08004f41
 8004c5c:	08004de1 	.word	0x08004de1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c60:	4bbd      	ldr	r3, [pc, #756]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004c62:	61bb      	str	r3, [r7, #24]
       break;
 8004c64:	e16f      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c66:	4bbd      	ldr	r3, [pc, #756]	; (8004f5c <HAL_RCC_GetSysClockFreq+0x360>)
 8004c68:	61bb      	str	r3, [r7, #24]
      break;
 8004c6a:	e16c      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c6c:	4bb9      	ldr	r3, [pc, #740]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c74:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c76:	4bb7      	ldr	r3, [pc, #732]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d053      	beq.n	8004d2a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c82:	4bb4      	ldr	r3, [pc, #720]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	099b      	lsrs	r3, r3, #6
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f04f 0300 	mov.w	r3, #0
 8004c8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	ea02 0400 	and.w	r4, r2, r0
 8004c9a:	603c      	str	r4, [r7, #0]
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	014b      	lsls	r3, r1, #5
 8004cb2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cb6:	0142      	lsls	r2, r0, #5
 8004cb8:	4610      	mov	r0, r2
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	1ac0      	subs	r0, r0, r3
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	eb61 0103 	sbc.w	r1, r1, r3
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	f04f 0300 	mov.w	r3, #0
 8004cce:	018b      	lsls	r3, r1, #6
 8004cd0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004cd4:	0182      	lsls	r2, r0, #6
 8004cd6:	1a12      	subs	r2, r2, r0
 8004cd8:	eb63 0301 	sbc.w	r3, r3, r1
 8004cdc:	f04f 0000 	mov.w	r0, #0
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	00d9      	lsls	r1, r3, #3
 8004ce6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cea:	00d0      	lsls	r0, r2, #3
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	1852      	adds	r2, r2, r1
 8004cf4:	4629      	mov	r1, r5
 8004cf6:	eb43 0101 	adc.w	r1, r3, r1
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	f04f 0000 	mov.w	r0, #0
 8004d00:	f04f 0100 	mov.w	r1, #0
 8004d04:	0259      	lsls	r1, r3, #9
 8004d06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d0a:	0250      	lsls	r0, r2, #9
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	461a      	mov	r2, r3
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	f7fb ffb4 	bl	8000c88 <__aeabi_uldivmod>
 8004d20:	4602      	mov	r2, r0
 8004d22:	460b      	mov	r3, r1
 8004d24:	4613      	mov	r3, r2
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e04c      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	4b8a      	ldr	r3, [pc, #552]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	461a      	mov	r2, r3
 8004d32:	f04f 0300 	mov.w	r3, #0
 8004d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d3a:	f04f 0100 	mov.w	r1, #0
 8004d3e:	ea02 0a00 	and.w	sl, r2, r0
 8004d42:	ea03 0b01 	and.w	fp, r3, r1
 8004d46:	4650      	mov	r0, sl
 8004d48:	4659      	mov	r1, fp
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	014b      	lsls	r3, r1, #5
 8004d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d58:	0142      	lsls	r2, r0, #5
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	ebb0 000a 	subs.w	r0, r0, sl
 8004d62:	eb61 010b 	sbc.w	r1, r1, fp
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	018b      	lsls	r3, r1, #6
 8004d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d74:	0182      	lsls	r2, r0, #6
 8004d76:	1a12      	subs	r2, r2, r0
 8004d78:	eb63 0301 	sbc.w	r3, r3, r1
 8004d7c:	f04f 0000 	mov.w	r0, #0
 8004d80:	f04f 0100 	mov.w	r1, #0
 8004d84:	00d9      	lsls	r1, r3, #3
 8004d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d8a:	00d0      	lsls	r0, r2, #3
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	eb12 020a 	adds.w	r2, r2, sl
 8004d94:	eb43 030b 	adc.w	r3, r3, fp
 8004d98:	f04f 0000 	mov.w	r0, #0
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	0299      	lsls	r1, r3, #10
 8004da2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004da6:	0290      	lsls	r0, r2, #10
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4610      	mov	r0, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f04f 0300 	mov.w	r3, #0
 8004db8:	f7fb ff66 	bl	8000c88 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dc4:	4b63      	ldr	r3, [pc, #396]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	61bb      	str	r3, [r7, #24]
      break;
 8004dde:	e0b2      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004de0:	4b5c      	ldr	r3, [pc, #368]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dea:	4b5a      	ldr	r3, [pc, #360]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d04d      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b57      	ldr	r3, [pc, #348]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	ea02 0800 	and.w	r8, r2, r0
 8004e0e:	ea03 0901 	and.w	r9, r3, r1
 8004e12:	4640      	mov	r0, r8
 8004e14:	4649      	mov	r1, r9
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	014b      	lsls	r3, r1, #5
 8004e20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e24:	0142      	lsls	r2, r0, #5
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	ebb0 0008 	subs.w	r0, r0, r8
 8004e2e:	eb61 0109 	sbc.w	r1, r1, r9
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	018b      	lsls	r3, r1, #6
 8004e3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e40:	0182      	lsls	r2, r0, #6
 8004e42:	1a12      	subs	r2, r2, r0
 8004e44:	eb63 0301 	sbc.w	r3, r3, r1
 8004e48:	f04f 0000 	mov.w	r0, #0
 8004e4c:	f04f 0100 	mov.w	r1, #0
 8004e50:	00d9      	lsls	r1, r3, #3
 8004e52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e56:	00d0      	lsls	r0, r2, #3
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	eb12 0208 	adds.w	r2, r2, r8
 8004e60:	eb43 0309 	adc.w	r3, r3, r9
 8004e64:	f04f 0000 	mov.w	r0, #0
 8004e68:	f04f 0100 	mov.w	r1, #0
 8004e6c:	0259      	lsls	r1, r3, #9
 8004e6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e72:	0250      	lsls	r0, r2, #9
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4610      	mov	r0, r2
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	f7fb ff00 	bl	8000c88 <__aeabi_uldivmod>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e04a      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e92:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	099b      	lsrs	r3, r3, #6
 8004e98:	461a      	mov	r2, r3
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ea2:	f04f 0100 	mov.w	r1, #0
 8004ea6:	ea02 0400 	and.w	r4, r2, r0
 8004eaa:	ea03 0501 	and.w	r5, r3, r1
 8004eae:	4620      	mov	r0, r4
 8004eb0:	4629      	mov	r1, r5
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	014b      	lsls	r3, r1, #5
 8004ebc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ec0:	0142      	lsls	r2, r0, #5
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	1b00      	subs	r0, r0, r4
 8004ec8:	eb61 0105 	sbc.w	r1, r1, r5
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	018b      	lsls	r3, r1, #6
 8004ed6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004eda:	0182      	lsls	r2, r0, #6
 8004edc:	1a12      	subs	r2, r2, r0
 8004ede:	eb63 0301 	sbc.w	r3, r3, r1
 8004ee2:	f04f 0000 	mov.w	r0, #0
 8004ee6:	f04f 0100 	mov.w	r1, #0
 8004eea:	00d9      	lsls	r1, r3, #3
 8004eec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ef0:	00d0      	lsls	r0, r2, #3
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	1912      	adds	r2, r2, r4
 8004ef8:	eb45 0303 	adc.w	r3, r5, r3
 8004efc:	f04f 0000 	mov.w	r0, #0
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	0299      	lsls	r1, r3, #10
 8004f06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004f0a:	0290      	lsls	r0, r2, #10
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	f7fb feb4 	bl	8000c88 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4613      	mov	r3, r2
 8004f26:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	0f1b      	lsrs	r3, r3, #28
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	61bb      	str	r3, [r7, #24]
      break;
 8004f3e:	e002      	b.n	8004f46 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f40:	4b05      	ldr	r3, [pc, #20]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004f42:	61bb      	str	r3, [r7, #24]
      break;
 8004f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f46:	69bb      	ldr	r3, [r7, #24]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800
 8004f58:	00f42400 	.word	0x00f42400
 8004f5c:	007a1200 	.word	0x007a1200

08004f60 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e28d      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8083 	beq.w	8005086 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f80:	4b94      	ldr	r3, [pc, #592]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d019      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f8c:	4b91      	ldr	r3, [pc, #580]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d106      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f98:	4b8e      	ldr	r3, [pc, #568]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa6:	4b8b      	ldr	r3, [pc, #556]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d112      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb2:	4b88      	ldr	r3, [pc, #544]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	4b84      	ldr	r3, [pc, #528]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05b      	beq.n	8005084 <HAL_RCC_OscConfig+0x124>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d157      	bne.n	8005084 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e25a      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x90>
 8004fe2:	4b7c      	ldr	r3, [pc, #496]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7b      	ldr	r2, [pc, #492]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xcc>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0xb4>
 8004ffa:	4b76      	ldr	r3, [pc, #472]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a75      	ldr	r2, [pc, #468]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b73      	ldr	r3, [pc, #460]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a72      	ldr	r2, [pc, #456]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xcc>
 8005014:	4b6f      	ldr	r3, [pc, #444]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a6e      	ldr	r2, [pc, #440]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b6c      	ldr	r3, [pc, #432]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a6b      	ldr	r2, [pc, #428]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fe f888 	bl	8003148 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800503c:	f7fe f884 	bl	8003148 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e21f      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	4b61      	ldr	r3, [pc, #388]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xdc>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe f874 	bl	8003148 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005064:	f7fe f870 	bl	8003148 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e20b      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	4b57      	ldr	r3, [pc, #348]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x104>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d06f      	beq.n	8005172 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005092:	4b50      	ldr	r3, [pc, #320]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800509e:	4b4d      	ldr	r3, [pc, #308]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d105      	bne.n	80050b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050aa:	4b4a      	ldr	r3, [pc, #296]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00b      	beq.n	80050ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050b6:	4b47      	ldr	r3, [pc, #284]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80050be:	2b0c      	cmp	r3, #12
 80050c0:	d11c      	bne.n	80050fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c2:	4b44      	ldr	r3, [pc, #272]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d116      	bne.n	80050fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ce:	4b41      	ldr	r3, [pc, #260]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d005      	beq.n	80050e6 <HAL_RCC_OscConfig+0x186>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d001      	beq.n	80050e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e1d3      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e6:	4b3b      	ldr	r3, [pc, #236]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	4937      	ldr	r1, [pc, #220]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	e03a      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005104:	4b34      	ldr	r3, [pc, #208]	; (80051d8 <HAL_RCC_OscConfig+0x278>)
 8005106:	2201      	movs	r2, #1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fe f81d 	bl	8003148 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005112:	f7fe f819 	bl	8003148 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e1b4      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005124:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005130:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	4925      	ldr	r1, [pc, #148]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005140:	4313      	orrs	r3, r2
 8005142:	600b      	str	r3, [r1, #0]
 8005144:	e015      	b.n	8005172 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005146:	4b24      	ldr	r3, [pc, #144]	; (80051d8 <HAL_RCC_OscConfig+0x278>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514c:	f7fd fffc 	bl	8003148 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005154:	f7fd fff8 	bl	8003148 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e193      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005166:	4b1b      	ldr	r3, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0308 	and.w	r3, r3, #8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d036      	beq.n	80051ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005186:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_RCC_OscConfig+0x27c>)
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fd ffdc 	bl	8003148 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005194:	f7fd ffd8 	bl	8003148 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e173      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a6:	4b0b      	ldr	r3, [pc, #44]	; (80051d4 <HAL_RCC_OscConfig+0x274>)
 80051a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0x234>
 80051b2:	e01b      	b.n	80051ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b4:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_OscConfig+0x27c>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ba:	f7fd ffc5 	bl	8003148 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c0:	e00e      	b.n	80051e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c2:	f7fd ffc1 	bl	8003148 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d907      	bls.n	80051e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e15c      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
 80051d4:	40023800 	.word	0x40023800
 80051d8:	42470000 	.word	0x42470000
 80051dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051e0:	4b8a      	ldr	r3, [pc, #552]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80051e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1ea      	bne.n	80051c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8097 	beq.w	8005328 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051fe:	4b83      	ldr	r3, [pc, #524]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10f      	bne.n	800522a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	4b7f      	ldr	r3, [pc, #508]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a7e      	ldr	r2, [pc, #504]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b7c      	ldr	r3, [pc, #496]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60bb      	str	r3, [r7, #8]
 8005224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005226:	2301      	movs	r3, #1
 8005228:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	4b79      	ldr	r3, [pc, #484]	; (8005410 <HAL_RCC_OscConfig+0x4b0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d118      	bne.n	8005268 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005236:	4b76      	ldr	r3, [pc, #472]	; (8005410 <HAL_RCC_OscConfig+0x4b0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a75      	ldr	r2, [pc, #468]	; (8005410 <HAL_RCC_OscConfig+0x4b0>)
 800523c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005242:	f7fd ff81 	bl	8003148 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005248:	e008      	b.n	800525c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524a:	f7fd ff7d 	bl	8003148 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d901      	bls.n	800525c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e118      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b6c      	ldr	r3, [pc, #432]	; (8005410 <HAL_RCC_OscConfig+0x4b0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0f0      	beq.n	800524a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d106      	bne.n	800527e <HAL_RCC_OscConfig+0x31e>
 8005270:	4b66      	ldr	r3, [pc, #408]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	4a65      	ldr	r2, [pc, #404]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005276:	f043 0301 	orr.w	r3, r3, #1
 800527a:	6713      	str	r3, [r2, #112]	; 0x70
 800527c:	e01c      	b.n	80052b8 <HAL_RCC_OscConfig+0x358>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b05      	cmp	r3, #5
 8005284:	d10c      	bne.n	80052a0 <HAL_RCC_OscConfig+0x340>
 8005286:	4b61      	ldr	r3, [pc, #388]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528a:	4a60      	ldr	r2, [pc, #384]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	6713      	str	r3, [r2, #112]	; 0x70
 8005292:	4b5e      	ldr	r3, [pc, #376]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	4a5d      	ldr	r2, [pc, #372]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	6713      	str	r3, [r2, #112]	; 0x70
 800529e:	e00b      	b.n	80052b8 <HAL_RCC_OscConfig+0x358>
 80052a0:	4b5a      	ldr	r3, [pc, #360]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80052a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a4:	4a59      	ldr	r2, [pc, #356]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80052a6:	f023 0301 	bic.w	r3, r3, #1
 80052aa:	6713      	str	r3, [r2, #112]	; 0x70
 80052ac:	4b57      	ldr	r3, [pc, #348]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b0:	4a56      	ldr	r2, [pc, #344]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80052b2:	f023 0304 	bic.w	r3, r3, #4
 80052b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d015      	beq.n	80052ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c0:	f7fd ff42 	bl	8003148 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	e00a      	b.n	80052de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c8:	f7fd ff3e 	bl	8003148 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e0d7      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	4b4b      	ldr	r3, [pc, #300]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0ee      	beq.n	80052c8 <HAL_RCC_OscConfig+0x368>
 80052ea:	e014      	b.n	8005316 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fd ff2c 	bl	8003148 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f4:	f7fd ff28 	bl	8003148 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0c1      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530a:	4b40      	ldr	r3, [pc, #256]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ee      	bne.n	80052f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005316:	7dfb      	ldrb	r3, [r7, #23]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d105      	bne.n	8005328 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800531c:	4b3b      	ldr	r3, [pc, #236]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	4a3a      	ldr	r2, [pc, #232]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005326:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b00      	cmp	r3, #0
 800532e:	f000 80ad 	beq.w	800548c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005332:	4b36      	ldr	r3, [pc, #216]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 030c 	and.w	r3, r3, #12
 800533a:	2b08      	cmp	r3, #8
 800533c:	d060      	beq.n	8005400 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d145      	bne.n	80053d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b33      	ldr	r3, [pc, #204]	; (8005414 <HAL_RCC_OscConfig+0x4b4>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd fefc 	bl	8003148 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005354:	f7fd fef8 	bl	8003148 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e093      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b29      	ldr	r3, [pc, #164]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	019b      	lsls	r3, r3, #6
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	3b01      	subs	r3, #1
 800538c:	041b      	lsls	r3, r3, #16
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	061b      	lsls	r3, r3, #24
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	071b      	lsls	r3, r3, #28
 800539e:	491b      	ldr	r1, [pc, #108]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <HAL_RCC_OscConfig+0x4b4>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053aa:	f7fd fecd 	bl	8003148 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053b2:	f7fd fec9 	bl	8003148 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e064      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c4:	4b11      	ldr	r3, [pc, #68]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x452>
 80053d0:	e05c      	b.n	800548c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_OscConfig+0x4b4>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d8:	f7fd feb6 	bl	8003148 <HAL_GetTick>
 80053dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053e0:	f7fd feb2 	bl	8003148 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e04d      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f2:	4b06      	ldr	r3, [pc, #24]	; (800540c <HAL_RCC_OscConfig+0x4ac>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1f0      	bne.n	80053e0 <HAL_RCC_OscConfig+0x480>
 80053fe:	e045      	b.n	800548c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d107      	bne.n	8005418 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e040      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
 800540c:	40023800 	.word	0x40023800
 8005410:	40007000 	.word	0x40007000
 8005414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005418:	4b1f      	ldr	r3, [pc, #124]	; (8005498 <HAL_RCC_OscConfig+0x538>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d030      	beq.n	8005488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005430:	429a      	cmp	r2, r3
 8005432:	d129      	bne.n	8005488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d122      	bne.n	8005488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005448:	4013      	ands	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800544e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005450:	4293      	cmp	r3, r2
 8005452:	d119      	bne.n	8005488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	085b      	lsrs	r3, r3, #1
 8005460:	3b01      	subs	r3, #1
 8005462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d10f      	bne.n	8005488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800

0800549c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e07b      	b.n	80055a6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054be:	d009      	beq.n	80054d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	61da      	str	r2, [r3, #28]
 80054c6:	e005      	b.n	80054d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fd fba4 	bl	8002c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800550a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	431a      	orrs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005544:	431a      	orrs	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005558:	ea42 0103 	orr.w	r1, r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005560:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	0c1b      	lsrs	r3, r3, #16
 8005572:	f003 0104 	and.w	r1, r3, #4
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	f003 0210 	and.w	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005594:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b088      	sub	sp, #32
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	603b      	str	r3, [r7, #0]
 80055ba:	4613      	mov	r3, r2
 80055bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_SPI_Transmit+0x22>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e126      	b.n	800581e <HAL_SPI_Transmit+0x270>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d8:	f7fd fdb6 	bl	8003148 <HAL_GetTick>
 80055dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d002      	beq.n	80055f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055ee:	2302      	movs	r3, #2
 80055f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055f2:	e10b      	b.n	800580c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_SPI_Transmit+0x52>
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d102      	bne.n	8005606 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005604:	e102      	b.n	800580c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2203      	movs	r2, #3
 800560a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	88fa      	ldrh	r2, [r7, #6]
 800561e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	88fa      	ldrh	r2, [r7, #6]
 8005624:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800564c:	d10f      	bne.n	800566e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800565c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800566c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	d007      	beq.n	800568c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800568a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005694:	d14b      	bne.n	800572e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_SPI_Transmit+0xf6>
 800569e:	8afb      	ldrh	r3, [r7, #22]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d13e      	bne.n	8005722 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	881a      	ldrh	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056c8:	e02b      	b.n	8005722 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d112      	bne.n	80056fe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	881a      	ldrh	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e8:	1c9a      	adds	r2, r3, #2
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80056fc:	e011      	b.n	8005722 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056fe:	f7fd fd23 	bl	8003148 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	429a      	cmp	r2, r3
 800570c:	d803      	bhi.n	8005716 <HAL_SPI_Transmit+0x168>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005714:	d102      	bne.n	800571c <HAL_SPI_Transmit+0x16e>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005720:	e074      	b.n	800580c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ce      	bne.n	80056ca <HAL_SPI_Transmit+0x11c>
 800572c:	e04c      	b.n	80057c8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_SPI_Transmit+0x18e>
 8005736:	8afb      	ldrh	r3, [r7, #22]
 8005738:	2b01      	cmp	r3, #1
 800573a:	d140      	bne.n	80057be <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	7812      	ldrb	r2, [r2, #0]
 8005748:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005762:	e02c      	b.n	80057be <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d113      	bne.n	800579a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	330c      	adds	r3, #12
 800577c:	7812      	ldrb	r2, [r2, #0]
 800577e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	86da      	strh	r2, [r3, #54]	; 0x36
 8005798:	e011      	b.n	80057be <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800579a:	f7fd fcd5 	bl	8003148 <HAL_GetTick>
 800579e:	4602      	mov	r2, r0
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d803      	bhi.n	80057b2 <HAL_SPI_Transmit+0x204>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b0:	d102      	bne.n	80057b8 <HAL_SPI_Transmit+0x20a>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057bc:	e026      	b.n	800580c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1cd      	bne.n	8005764 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fa55 	bl	8005c7c <SPI_EndRxTxTransaction>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057e6:	2300      	movs	r3, #0
 80057e8:	613b      	str	r3, [r7, #16]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	77fb      	strb	r3, [r7, #31]
 8005808:	e000      	b.n	800580c <HAL_SPI_Transmit+0x25e>
  }

error:
 800580a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800581c:	7ffb      	ldrb	r3, [r7, #31]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b08c      	sub	sp, #48	; 0x30
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005834:	2301      	movs	r3, #1
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_SPI_TransmitReceive+0x26>
 8005848:	2302      	movs	r3, #2
 800584a:	e18a      	b.n	8005b62 <HAL_SPI_TransmitReceive+0x33c>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005854:	f7fd fc78 	bl	8003148 <HAL_GetTick>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800586a:	887b      	ldrh	r3, [r7, #2]
 800586c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800586e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005872:	2b01      	cmp	r3, #1
 8005874:	d00f      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x70>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587c:	d107      	bne.n	800588e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d103      	bne.n	800588e <HAL_SPI_TransmitReceive+0x68>
 8005886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800588a:	2b04      	cmp	r3, #4
 800588c:	d003      	beq.n	8005896 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800588e:	2302      	movs	r3, #2
 8005890:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005894:	e15b      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x82>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <HAL_SPI_TransmitReceive+0x82>
 80058a2:	887b      	ldrh	r3, [r7, #2]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80058ae:	e14e      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d003      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2205      	movs	r2, #5
 80058c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	887a      	ldrh	r2, [r7, #2]
 80058d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	887a      	ldrh	r2, [r7, #2]
 80058da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	887a      	ldrh	r2, [r7, #2]
 80058e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	887a      	ldrh	r2, [r7, #2]
 80058ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d007      	beq.n	8005918 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005916:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005920:	d178      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <HAL_SPI_TransmitReceive+0x10a>
 800592a:	8b7b      	ldrh	r3, [r7, #26]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d166      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005934:	881a      	ldrh	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	1c9a      	adds	r2, r3, #2
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005954:	e053      	b.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b02      	cmp	r3, #2
 8005962:	d11b      	bne.n	800599c <HAL_SPI_TransmitReceive+0x176>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d016      	beq.n	800599c <HAL_SPI_TransmitReceive+0x176>
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d113      	bne.n	800599c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005978:	881a      	ldrh	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005984:	1c9a      	adds	r2, r3, #2
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800598e:	b29b      	uxth	r3, r3
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d119      	bne.n	80059de <HAL_SPI_TransmitReceive+0x1b8>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d014      	beq.n	80059de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68da      	ldr	r2, [r3, #12]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	b292      	uxth	r2, r2
 80059c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	1c9a      	adds	r2, r3, #2
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	3b01      	subs	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059da:	2301      	movs	r3, #1
 80059dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059de:	f7fd fbb3 	bl	8003148 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d807      	bhi.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f4:	d003      	beq.n	80059fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80059fc:	e0a7      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1a6      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x130>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1a1      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x130>
 8005a12:	e07c      	b.n	8005b0e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_TransmitReceive+0x1fc>
 8005a1c:	8b7b      	ldrh	r3, [r7, #26]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d16b      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a48:	e057      	b.n	8005afa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d11c      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x26c>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <HAL_SPI_TransmitReceive+0x26c>
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d114      	bne.n	8005a92 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	330c      	adds	r3, #12
 8005a72:	7812      	ldrb	r2, [r2, #0]
 8005a74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d119      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x2ae>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d014      	beq.n	8005ad4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	1c5a      	adds	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad4:	f7fd fb38 	bl	8003148 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d803      	bhi.n	8005aec <HAL_SPI_TransmitReceive+0x2c6>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aea:	d102      	bne.n	8005af2 <HAL_SPI_TransmitReceive+0x2cc>
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d103      	bne.n	8005afa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005af8:	e029      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1a2      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x224>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d19d      	bne.n	8005a4a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f8b2 	bl	8005c7c <SPI_EndRxTxTransaction>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d006      	beq.n	8005b2c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005b2a:	e010      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	e000      	b.n	8005b4e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005b4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3730      	adds	r7, #48	; 0x30
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b088      	sub	sp, #32
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b7c:	f7fd fae4 	bl	8003148 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b84:	1a9b      	subs	r3, r3, r2
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4413      	add	r3, r2
 8005b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b8c:	f7fd fadc 	bl	8003148 <HAL_GetTick>
 8005b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b92:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	0d1b      	lsrs	r3, r3, #20
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ba2:	e054      	b.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005baa:	d050      	beq.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bac:	f7fd facc 	bl	8003148 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d902      	bls.n	8005bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d13d      	bne.n	8005c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bda:	d111      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be4:	d004      	beq.n	8005bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bee:	d107      	bne.n	8005c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c08:	d10f      	bne.n	8005c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e017      	b.n	8005c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	bf0c      	ite	eq
 8005c5e:	2301      	moveq	r3, #1
 8005c60:	2300      	movne	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d19b      	bne.n	8005ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3720      	adds	r7, #32
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000004 	.word	0x20000004

08005c7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b088      	sub	sp, #32
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c88:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <SPI_EndRxTxTransaction+0x7c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <SPI_EndRxTxTransaction+0x80>)
 8005c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c92:	0d5b      	lsrs	r3, r3, #21
 8005c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c98:	fb02 f303 	mul.w	r3, r2, r3
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ca6:	d112      	bne.n	8005cce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2180      	movs	r1, #128	; 0x80
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f7ff ff5a 	bl	8005b6c <SPI_WaitFlagStateUntilTimeout>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f043 0220 	orr.w	r2, r3, #32
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e00f      	b.n	8005cee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce4:	2b80      	cmp	r3, #128	; 0x80
 8005ce6:	d0f2      	beq.n	8005cce <SPI_EndRxTxTransaction+0x52>
 8005ce8:	e000      	b.n	8005cec <SPI_EndRxTxTransaction+0x70>
        break;
 8005cea:	bf00      	nop
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3718      	adds	r7, #24
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000004 	.word	0x20000004
 8005cfc:	165e9f81 	.word	0x165e9f81

08005d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e03f      	b.n	8005d92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fc ffd0 	bl	8002ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	; 0x24
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f829 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	695a      	ldr	r2, [r3, #20]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68da      	ldr	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	b09f      	sub	sp, #124	; 0x7c
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	68d9      	ldr	r1, [r3, #12]
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	ea40 0301 	orr.w	r3, r0, r1
 8005dbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	689a      	ldr	r2, [r3, #8]
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de0:	f021 010c 	bic.w	r1, r1, #12
 8005de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dea:	430b      	orrs	r3, r1
 8005dec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfa:	6999      	ldr	r1, [r3, #24]
 8005dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	ea40 0301 	orr.w	r3, r0, r1
 8005e04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4bc5      	ldr	r3, [pc, #788]	; (8006120 <UART_SetConfig+0x384>)
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d004      	beq.n	8005e1a <UART_SetConfig+0x7e>
 8005e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4bc3      	ldr	r3, [pc, #780]	; (8006124 <UART_SetConfig+0x388>)
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d103      	bne.n	8005e22 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e1a:	f7fe fedb 	bl	8004bd4 <HAL_RCC_GetPCLK2Freq>
 8005e1e:	6778      	str	r0, [r7, #116]	; 0x74
 8005e20:	e002      	b.n	8005e28 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e22:	f7fe fec3 	bl	8004bac <HAL_RCC_GetPCLK1Freq>
 8005e26:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e30:	f040 80b6 	bne.w	8005fa0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e36:	461c      	mov	r4, r3
 8005e38:	f04f 0500 	mov.w	r5, #0
 8005e3c:	4622      	mov	r2, r4
 8005e3e:	462b      	mov	r3, r5
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	6439      	str	r1, [r7, #64]	; 0x40
 8005e44:	415b      	adcs	r3, r3
 8005e46:	647b      	str	r3, [r7, #68]	; 0x44
 8005e48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e4c:	1912      	adds	r2, r2, r4
 8005e4e:	eb45 0303 	adc.w	r3, r5, r3
 8005e52:	f04f 0000 	mov.w	r0, #0
 8005e56:	f04f 0100 	mov.w	r1, #0
 8005e5a:	00d9      	lsls	r1, r3, #3
 8005e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e60:	00d0      	lsls	r0, r2, #3
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	1911      	adds	r1, r2, r4
 8005e68:	6639      	str	r1, [r7, #96]	; 0x60
 8005e6a:	416b      	adcs	r3, r5
 8005e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f04f 0300 	mov.w	r3, #0
 8005e78:	1891      	adds	r1, r2, r2
 8005e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e84:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e88:	f7fa fefe 	bl	8000c88 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4ba5      	ldr	r3, [pc, #660]	; (8006128 <UART_SetConfig+0x38c>)
 8005e92:	fba3 2302 	umull	r2, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	011e      	lsls	r6, r3, #4
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	461c      	mov	r4, r3
 8005e9e:	f04f 0500 	mov.w	r5, #0
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	462b      	mov	r3, r5
 8005ea6:	1891      	adds	r1, r2, r2
 8005ea8:	6339      	str	r1, [r7, #48]	; 0x30
 8005eaa:	415b      	adcs	r3, r3
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
 8005eae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005eb2:	1912      	adds	r2, r2, r4
 8005eb4:	eb45 0303 	adc.w	r3, r5, r3
 8005eb8:	f04f 0000 	mov.w	r0, #0
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	00d9      	lsls	r1, r3, #3
 8005ec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec6:	00d0      	lsls	r0, r2, #3
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	1911      	adds	r1, r2, r4
 8005ece:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ed0:	416b      	adcs	r3, r5
 8005ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	1891      	adds	r1, r2, r2
 8005ee0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ee2:	415b      	adcs	r3, r3
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005eee:	f7fa fecb 	bl	8000c88 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4b8c      	ldr	r3, [pc, #560]	; (8006128 <UART_SetConfig+0x38c>)
 8005ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	2164      	movs	r1, #100	; 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	3332      	adds	r3, #50	; 0x32
 8005f0a:	4a87      	ldr	r2, [pc, #540]	; (8006128 <UART_SetConfig+0x38c>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f18:	441e      	add	r6, r3
 8005f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f04f 0100 	mov.w	r1, #0
 8005f22:	4602      	mov	r2, r0
 8005f24:	460b      	mov	r3, r1
 8005f26:	1894      	adds	r4, r2, r2
 8005f28:	623c      	str	r4, [r7, #32]
 8005f2a:	415b      	adcs	r3, r3
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f32:	1812      	adds	r2, r2, r0
 8005f34:	eb41 0303 	adc.w	r3, r1, r3
 8005f38:	f04f 0400 	mov.w	r4, #0
 8005f3c:	f04f 0500 	mov.w	r5, #0
 8005f40:	00dd      	lsls	r5, r3, #3
 8005f42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f46:	00d4      	lsls	r4, r2, #3
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	1814      	adds	r4, r2, r0
 8005f4e:	653c      	str	r4, [r7, #80]	; 0x50
 8005f50:	414b      	adcs	r3, r1
 8005f52:	657b      	str	r3, [r7, #84]	; 0x54
 8005f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	1891      	adds	r1, r2, r2
 8005f60:	61b9      	str	r1, [r7, #24]
 8005f62:	415b      	adcs	r3, r3
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f6a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f6e:	f7fa fe8b 	bl	8000c88 <__aeabi_uldivmod>
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4b6c      	ldr	r3, [pc, #432]	; (8006128 <UART_SetConfig+0x38c>)
 8005f78:	fba3 1302 	umull	r1, r3, r3, r2
 8005f7c:	095b      	lsrs	r3, r3, #5
 8005f7e:	2164      	movs	r1, #100	; 0x64
 8005f80:	fb01 f303 	mul.w	r3, r1, r3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	3332      	adds	r3, #50	; 0x32
 8005f8a:	4a67      	ldr	r2, [pc, #412]	; (8006128 <UART_SetConfig+0x38c>)
 8005f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	f003 0207 	and.w	r2, r3, #7
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4432      	add	r2, r6
 8005f9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f9e:	e0b9      	b.n	8006114 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa2:	461c      	mov	r4, r3
 8005fa4:	f04f 0500 	mov.w	r5, #0
 8005fa8:	4622      	mov	r2, r4
 8005faa:	462b      	mov	r3, r5
 8005fac:	1891      	adds	r1, r2, r2
 8005fae:	6139      	str	r1, [r7, #16]
 8005fb0:	415b      	adcs	r3, r3
 8005fb2:	617b      	str	r3, [r7, #20]
 8005fb4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fb8:	1912      	adds	r2, r2, r4
 8005fba:	eb45 0303 	adc.w	r3, r5, r3
 8005fbe:	f04f 0000 	mov.w	r0, #0
 8005fc2:	f04f 0100 	mov.w	r1, #0
 8005fc6:	00d9      	lsls	r1, r3, #3
 8005fc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fcc:	00d0      	lsls	r0, r2, #3
 8005fce:	4602      	mov	r2, r0
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	eb12 0804 	adds.w	r8, r2, r4
 8005fd6:	eb43 0905 	adc.w	r9, r3, r5
 8005fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f04f 0100 	mov.w	r1, #0
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	008b      	lsls	r3, r1, #2
 8005fee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ff2:	0082      	lsls	r2, r0, #2
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	4649      	mov	r1, r9
 8005ff8:	f7fa fe46 	bl	8000c88 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b49      	ldr	r3, [pc, #292]	; (8006128 <UART_SetConfig+0x38c>)
 8006002:	fba3 2302 	umull	r2, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	011e      	lsls	r6, r3, #4
 800600a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800600c:	4618      	mov	r0, r3
 800600e:	f04f 0100 	mov.w	r1, #0
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	1894      	adds	r4, r2, r2
 8006018:	60bc      	str	r4, [r7, #8]
 800601a:	415b      	adcs	r3, r3
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006022:	1812      	adds	r2, r2, r0
 8006024:	eb41 0303 	adc.w	r3, r1, r3
 8006028:	f04f 0400 	mov.w	r4, #0
 800602c:	f04f 0500 	mov.w	r5, #0
 8006030:	00dd      	lsls	r5, r3, #3
 8006032:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006036:	00d4      	lsls	r4, r2, #3
 8006038:	4622      	mov	r2, r4
 800603a:	462b      	mov	r3, r5
 800603c:	1814      	adds	r4, r2, r0
 800603e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006040:	414b      	adcs	r3, r1
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	4618      	mov	r0, r3
 800604a:	f04f 0100 	mov.w	r1, #0
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	008b      	lsls	r3, r1, #2
 8006058:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800605c:	0082      	lsls	r2, r0, #2
 800605e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006062:	f7fa fe11 	bl	8000c88 <__aeabi_uldivmod>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <UART_SetConfig+0x38c>)
 800606c:	fba3 1302 	umull	r1, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	2164      	movs	r1, #100	; 0x64
 8006074:	fb01 f303 	mul.w	r3, r1, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	011b      	lsls	r3, r3, #4
 800607c:	3332      	adds	r3, #50	; 0x32
 800607e:	4a2a      	ldr	r2, [pc, #168]	; (8006128 <UART_SetConfig+0x38c>)
 8006080:	fba2 2303 	umull	r2, r3, r2, r3
 8006084:	095b      	lsrs	r3, r3, #5
 8006086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800608a:	441e      	add	r6, r3
 800608c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800608e:	4618      	mov	r0, r3
 8006090:	f04f 0100 	mov.w	r1, #0
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	1894      	adds	r4, r2, r2
 800609a:	603c      	str	r4, [r7, #0]
 800609c:	415b      	adcs	r3, r3
 800609e:	607b      	str	r3, [r7, #4]
 80060a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a4:	1812      	adds	r2, r2, r0
 80060a6:	eb41 0303 	adc.w	r3, r1, r3
 80060aa:	f04f 0400 	mov.w	r4, #0
 80060ae:	f04f 0500 	mov.w	r5, #0
 80060b2:	00dd      	lsls	r5, r3, #3
 80060b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b8:	00d4      	lsls	r4, r2, #3
 80060ba:	4622      	mov	r2, r4
 80060bc:	462b      	mov	r3, r5
 80060be:	eb12 0a00 	adds.w	sl, r2, r0
 80060c2:	eb43 0b01 	adc.w	fp, r3, r1
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f04f 0100 	mov.w	r1, #0
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060de:	0082      	lsls	r2, r0, #2
 80060e0:	4650      	mov	r0, sl
 80060e2:	4659      	mov	r1, fp
 80060e4:	f7fa fdd0 	bl	8000c88 <__aeabi_uldivmod>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <UART_SetConfig+0x38c>)
 80060ee:	fba3 1302 	umull	r1, r3, r3, r2
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2164      	movs	r1, #100	; 0x64
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	3332      	adds	r3, #50	; 0x32
 8006100:	4a09      	ldr	r2, [pc, #36]	; (8006128 <UART_SetConfig+0x38c>)
 8006102:	fba2 2303 	umull	r2, r3, r2, r3
 8006106:	095b      	lsrs	r3, r3, #5
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4432      	add	r2, r6
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	377c      	adds	r7, #124	; 0x7c
 8006118:	46bd      	mov	sp, r7
 800611a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800611e:	bf00      	nop
 8006120:	40011000 	.word	0x40011000
 8006124:	40011400 	.word	0x40011400
 8006128:	51eb851f 	.word	0x51eb851f

0800612c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <MX_FATFS_Init+0x18>)
 8006132:	4805      	ldr	r0, [pc, #20]	; (8006148 <MX_FATFS_Init+0x1c>)
 8006134:	f002 ffba 	bl	80090ac <FATFS_LinkDriver>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <MX_FATFS_Init+0x20>)
 800613e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006140:	bf00      	nop
 8006142:	bd80      	pop	{r7, pc}
 8006144:	20002924 	.word	0x20002924
 8006148:	20000010 	.word	0x20000010
 800614c:	20002928 	.word	0x20002928

08006150 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006154:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006156:	4618      	mov	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	4603      	mov	r3, r0
 8006168:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800616a:	79fb      	ldrb	r3, [r7, #7]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fb fc83 	bl	8001a78 <SD_disk_initialize>
 8006172:	4603      	mov	r3, r0
 8006174:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b082      	sub	sp, #8
 8006182:	af00      	add	r7, sp, #0
 8006184:	4603      	mov	r3, r0
 8006186:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006188:	79fb      	ldrb	r3, [r7, #7]
 800618a:	4618      	mov	r0, r3
 800618c:	f7fb fd60 	bl	8001c50 <SD_disk_status>
 8006190:	4603      	mov	r3, r0
 8006192:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 80061ac:	7bf8      	ldrb	r0, [r7, #15]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	f7fb fd62 	bl	8001c7c <SD_disk_read>
 80061b8:	4603      	mov	r3, r0
 80061ba:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3710      	adds	r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80061d4:	7bf8      	ldrb	r0, [r7, #15]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	f7fb fdb8 	bl	8001d50 <SD_disk_write>
 80061e0:	4603      	mov	r3, r0
 80061e2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	603a      	str	r2, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	460b      	mov	r3, r1
 80061fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	79b9      	ldrb	r1, [r7, #6]
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fb fe28 	bl	8001e58 <SD_disk_ioctl>
 8006208:	4603      	mov	r3, r0
 800620a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	4603      	mov	r3, r0
 800621c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	4a08      	ldr	r2, [pc, #32]	; (8006244 <disk_status+0x30>)
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	79fa      	ldrb	r2, [r7, #7]
 800622c:	4905      	ldr	r1, [pc, #20]	; (8006244 <disk_status+0x30>)
 800622e:	440a      	add	r2, r1
 8006230:	7a12      	ldrb	r2, [r2, #8]
 8006232:	4610      	mov	r0, r2
 8006234:	4798      	blx	r3
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]
  return stat;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200002d0 	.word	0x200002d0

08006248 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	4a0d      	ldr	r2, [pc, #52]	; (8006290 <disk_initialize+0x48>)
 800625a:	5cd3      	ldrb	r3, [r2, r3]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d111      	bne.n	8006284 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006260:	79fb      	ldrb	r3, [r7, #7]
 8006262:	4a0b      	ldr	r2, [pc, #44]	; (8006290 <disk_initialize+0x48>)
 8006264:	2101      	movs	r1, #1
 8006266:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	4a09      	ldr	r2, [pc, #36]	; (8006290 <disk_initialize+0x48>)
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	79fa      	ldrb	r2, [r7, #7]
 8006276:	4906      	ldr	r1, [pc, #24]	; (8006290 <disk_initialize+0x48>)
 8006278:	440a      	add	r2, r1
 800627a:	7a12      	ldrb	r2, [r2, #8]
 800627c:	4610      	mov	r0, r2
 800627e:	4798      	blx	r3
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006284:	7bfb      	ldrb	r3, [r7, #15]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3710      	adds	r7, #16
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	200002d0 	.word	0x200002d0

08006294 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <disk_read+0x3c>)
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4413      	add	r3, r2
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	689c      	ldr	r4, [r3, #8]
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	4a07      	ldr	r2, [pc, #28]	; (80062d0 <disk_read+0x3c>)
 80062b4:	4413      	add	r3, r2
 80062b6:	7a18      	ldrb	r0, [r3, #8]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	47a0      	blx	r4
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd90      	pop	{r4, r7, pc}
 80062ce:	bf00      	nop
 80062d0:	200002d0 	.word	0x200002d0

080062d4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80062d4:	b590      	push	{r4, r7, lr}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80062e4:	7bfb      	ldrb	r3, [r7, #15]
 80062e6:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <disk_write+0x3c>)
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68dc      	ldr	r4, [r3, #12]
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	4a07      	ldr	r2, [pc, #28]	; (8006310 <disk_write+0x3c>)
 80062f4:	4413      	add	r3, r2
 80062f6:	7a18      	ldrb	r0, [r3, #8]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	47a0      	blx	r4
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
  return res;
 8006304:	7dfb      	ldrb	r3, [r7, #23]
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd90      	pop	{r4, r7, pc}
 800630e:	bf00      	nop
 8006310:	200002d0 	.word	0x200002d0

08006314 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	603a      	str	r2, [r7, #0]
 800631e:	71fb      	strb	r3, [r7, #7]
 8006320:	460b      	mov	r3, r1
 8006322:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <disk_ioctl+0x38>)
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	79fa      	ldrb	r2, [r7, #7]
 8006332:	4906      	ldr	r1, [pc, #24]	; (800634c <disk_ioctl+0x38>)
 8006334:	440a      	add	r2, r1
 8006336:	7a10      	ldrb	r0, [r2, #8]
 8006338:	79b9      	ldrb	r1, [r7, #6]
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	4798      	blx	r3
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]
  return res;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	200002d0 	.word	0x200002d0

08006350 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3301      	adds	r3, #1
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	b21a      	sxth	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	b21b      	sxth	r3, r3
 800636c:	4313      	orrs	r3, r2
 800636e:	b21b      	sxth	r3, r3
 8006370:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006372:	89fb      	ldrh	r3, [r7, #14]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3714      	adds	r7, #20
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3303      	adds	r3, #3
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	021b      	lsls	r3, r3, #8
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	3202      	adds	r2, #2
 8006398:	7812      	ldrb	r2, [r2, #0]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	021b      	lsls	r3, r3, #8
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	3201      	adds	r2, #1
 80063a6:	7812      	ldrb	r2, [r2, #0]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	7812      	ldrb	r2, [r2, #0]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80063b8:	68fb      	ldr	r3, [r7, #12]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80063c6:	b480      	push	{r7}
 80063c8:	b083      	sub	sp, #12
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	887a      	ldrh	r2, [r7, #2]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]
 80063de:	887b      	ldrh	r3, [r7, #2]
 80063e0:	0a1b      	lsrs	r3, r3, #8
 80063e2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	607a      	str	r2, [r7, #4]
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	1c5a      	adds	r2, r3, #1
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	0a1b      	lsrs	r3, r3, #8
 8006428:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	0a1b      	lsrs	r3, r3, #8
 800643a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	607a      	str	r2, [r7, #4]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	b2d2      	uxtb	r2, r2
 8006446:	701a      	strb	r2, [r3, #0]
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00d      	beq.n	800648a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800646e:	693a      	ldr	r2, [r7, #16]
 8006470:	1c53      	adds	r3, r2, #1
 8006472:	613b      	str	r3, [r7, #16]
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	1c59      	adds	r1, r3, #1
 8006478:	6179      	str	r1, [r7, #20]
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	3b01      	subs	r3, #1
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1f1      	bne.n	800646e <mem_cpy+0x1a>
	}
}
 800648a:	bf00      	nop
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006496:	b480      	push	{r7}
 8006498:	b087      	sub	sp, #28
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	617a      	str	r2, [r7, #20]
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f3      	bne.n	80064a6 <mem_set+0x10>
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	371c      	adds	r7, #28
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80064cc:	b480      	push	{r7}
 80064ce:	b089      	sub	sp, #36	; 0x24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	61fa      	str	r2, [r7, #28]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	4619      	mov	r1, r3
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	61ba      	str	r2, [r7, #24]
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	1acb      	subs	r3, r1, r3
 80064f8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	607b      	str	r3, [r7, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <mem_cmp+0x40>
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0eb      	beq.n	80064e4 <mem_cmp+0x18>

	return r;
 800650c:	697b      	ldr	r3, [r7, #20]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3724      	adds	r7, #36	; 0x24
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
 8006522:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006524:	e002      	b.n	800652c <chk_chr+0x12>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3301      	adds	r3, #1
 800652a:	607b      	str	r3, [r7, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <chk_chr+0x26>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	461a      	mov	r2, r3
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	4293      	cmp	r3, r2
 800653e:	d1f2      	bne.n	8006526 <chk_chr+0xc>
	return *str;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	781b      	ldrb	r3, [r3, #0]
}
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	60fb      	str	r3, [r7, #12]
 8006562:	e029      	b.n	80065b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006564:	4a27      	ldr	r2, [pc, #156]	; (8006604 <chk_lock+0xb4>)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	4413      	add	r3, r2
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d01d      	beq.n	80065ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006572:	4a24      	ldr	r2, [pc, #144]	; (8006604 <chk_lock+0xb4>)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	4413      	add	r3, r2
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d116      	bne.n	80065b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006584:	4a1f      	ldr	r2, [pc, #124]	; (8006604 <chk_lock+0xb4>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	4413      	add	r3, r2
 800658c:	3304      	adds	r3, #4
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006594:	429a      	cmp	r2, r3
 8006596:	d10c      	bne.n	80065b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006598:	4a1a      	ldr	r2, [pc, #104]	; (8006604 <chk_lock+0xb4>)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	4413      	add	r3, r2
 80065a0:	3308      	adds	r3, #8
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d102      	bne.n	80065b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80065ac:	e007      	b.n	80065be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3301      	adds	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d9d2      	bls.n	8006564 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d109      	bne.n	80065d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <chk_lock+0x80>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d101      	bne.n	80065d4 <chk_lock+0x84>
 80065d0:	2300      	movs	r3, #0
 80065d2:	e010      	b.n	80065f6 <chk_lock+0xa6>
 80065d4:	2312      	movs	r3, #18
 80065d6:	e00e      	b.n	80065f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d108      	bne.n	80065f0 <chk_lock+0xa0>
 80065de:	4a09      	ldr	r2, [pc, #36]	; (8006604 <chk_lock+0xb4>)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	4413      	add	r3, r2
 80065e6:	330c      	adds	r3, #12
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065ee:	d101      	bne.n	80065f4 <chk_lock+0xa4>
 80065f0:	2310      	movs	r3, #16
 80065f2:	e000      	b.n	80065f6 <chk_lock+0xa6>
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	200002b0 	.word	0x200002b0

08006608 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800660e:	2300      	movs	r3, #0
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	e002      	b.n	800661a <enq_lock+0x12>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	3301      	adds	r3, #1
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d806      	bhi.n	800662e <enq_lock+0x26>
 8006620:	4a09      	ldr	r2, [pc, #36]	; (8006648 <enq_lock+0x40>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4413      	add	r3, r2
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1f2      	bne.n	8006614 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b02      	cmp	r3, #2
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
}
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	200002b0 	.word	0x200002b0

0800664c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	e01f      	b.n	800669c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800665c:	4a41      	ldr	r2, [pc, #260]	; (8006764 <inc_lock+0x118>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	4413      	add	r3, r2
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	429a      	cmp	r2, r3
 800666c:	d113      	bne.n	8006696 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800666e:	4a3d      	ldr	r2, [pc, #244]	; (8006764 <inc_lock+0x118>)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	011b      	lsls	r3, r3, #4
 8006674:	4413      	add	r3, r2
 8006676:	3304      	adds	r3, #4
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800667e:	429a      	cmp	r2, r3
 8006680:	d109      	bne.n	8006696 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006682:	4a38      	ldr	r2, [pc, #224]	; (8006764 <inc_lock+0x118>)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	4413      	add	r3, r2
 800668a:	3308      	adds	r3, #8
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006692:	429a      	cmp	r2, r3
 8006694:	d006      	beq.n	80066a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3301      	adds	r3, #1
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d9dc      	bls.n	800665c <inc_lock+0x10>
 80066a2:	e000      	b.n	80066a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80066a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d132      	bne.n	8006712 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e002      	b.n	80066b8 <inc_lock+0x6c>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d806      	bhi.n	80066cc <inc_lock+0x80>
 80066be:	4a29      	ldr	r2, [pc, #164]	; (8006764 <inc_lock+0x118>)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	4413      	add	r3, r2
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1f2      	bne.n	80066b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d101      	bne.n	80066d6 <inc_lock+0x8a>
 80066d2:	2300      	movs	r3, #0
 80066d4:	e040      	b.n	8006758 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4922      	ldr	r1, [pc, #136]	; (8006764 <inc_lock+0x118>)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	440b      	add	r3, r1
 80066e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	491e      	ldr	r1, [pc, #120]	; (8006764 <inc_lock+0x118>)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	011b      	lsls	r3, r3, #4
 80066ee:	440b      	add	r3, r1
 80066f0:	3304      	adds	r3, #4
 80066f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	695a      	ldr	r2, [r3, #20]
 80066f8:	491a      	ldr	r1, [pc, #104]	; (8006764 <inc_lock+0x118>)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	440b      	add	r3, r1
 8006700:	3308      	adds	r3, #8
 8006702:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006704:	4a17      	ldr	r2, [pc, #92]	; (8006764 <inc_lock+0x118>)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	4413      	add	r3, r2
 800670c:	330c      	adds	r3, #12
 800670e:	2200      	movs	r2, #0
 8006710:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d009      	beq.n	800672c <inc_lock+0xe0>
 8006718:	4a12      	ldr	r2, [pc, #72]	; (8006764 <inc_lock+0x118>)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	4413      	add	r3, r2
 8006720:	330c      	adds	r3, #12
 8006722:	881b      	ldrh	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d001      	beq.n	800672c <inc_lock+0xe0>
 8006728:	2300      	movs	r3, #0
 800672a:	e015      	b.n	8006758 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d108      	bne.n	8006744 <inc_lock+0xf8>
 8006732:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <inc_lock+0x118>)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	4413      	add	r3, r2
 800673a:	330c      	adds	r3, #12
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	3301      	adds	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	e001      	b.n	8006748 <inc_lock+0xfc>
 8006744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006748:	4906      	ldr	r1, [pc, #24]	; (8006764 <inc_lock+0x118>)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	440b      	add	r3, r1
 8006750:	330c      	adds	r3, #12
 8006752:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3301      	adds	r3, #1
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	200002b0 	.word	0x200002b0

08006768 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3b01      	subs	r3, #1
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d825      	bhi.n	80067c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800677c:	4a17      	ldr	r2, [pc, #92]	; (80067dc <dec_lock+0x74>)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	4413      	add	r3, r2
 8006784:	330c      	adds	r3, #12
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800678a:	89fb      	ldrh	r3, [r7, #14]
 800678c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006790:	d101      	bne.n	8006796 <dec_lock+0x2e>
 8006792:	2300      	movs	r3, #0
 8006794:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <dec_lock+0x3a>
 800679c:	89fb      	ldrh	r3, [r7, #14]
 800679e:	3b01      	subs	r3, #1
 80067a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80067a2:	4a0e      	ldr	r2, [pc, #56]	; (80067dc <dec_lock+0x74>)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	011b      	lsls	r3, r3, #4
 80067a8:	4413      	add	r3, r2
 80067aa:	330c      	adds	r3, #12
 80067ac:	89fa      	ldrh	r2, [r7, #14]
 80067ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80067b0:	89fb      	ldrh	r3, [r7, #14]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <dec_lock+0x5a>
 80067b6:	4a09      	ldr	r2, [pc, #36]	; (80067dc <dec_lock+0x74>)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	4413      	add	r3, r2
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	737b      	strb	r3, [r7, #13]
 80067c6:	e001      	b.n	80067cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80067c8:	2302      	movs	r3, #2
 80067ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80067cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	200002b0 	.word	0x200002b0

080067e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e010      	b.n	8006810 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80067ee:	4a0d      	ldr	r2, [pc, #52]	; (8006824 <clear_lock+0x44>)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	4413      	add	r3, r2
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d105      	bne.n	800680a <clear_lock+0x2a>
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <clear_lock+0x44>)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	4413      	add	r3, r2
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	3301      	adds	r3, #1
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d9eb      	bls.n	80067ee <clear_lock+0xe>
	}
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	200002b0 	.word	0x200002b0

08006828 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	78db      	ldrb	r3, [r3, #3]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d034      	beq.n	80068a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006840:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	7858      	ldrb	r0, [r3, #1]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800684c:	2301      	movs	r3, #1
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	f7ff fd40 	bl	80062d4 <disk_write>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <sync_window+0x38>
			res = FR_DISK_ERR;
 800685a:	2301      	movs	r3, #1
 800685c:	73fb      	strb	r3, [r7, #15]
 800685e:	e022      	b.n	80068a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	1ad2      	subs	r2, r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	429a      	cmp	r2, r3
 8006874:	d217      	bcs.n	80068a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	789b      	ldrb	r3, [r3, #2]
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	e010      	b.n	80068a0 <sync_window+0x78>
					wsect += fs->fsize;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	7858      	ldrb	r0, [r3, #1]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006892:	2301      	movs	r3, #1
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	f7ff fd1d 	bl	80062d4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	3b01      	subs	r3, #1
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d8eb      	bhi.n	800687e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3718      	adds	r7, #24
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d01b      	beq.n	8006900 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7ff ffad 	bl	8006828 <sync_window>
 80068ce:	4603      	mov	r3, r0
 80068d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d113      	bne.n	8006900 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	7858      	ldrb	r0, [r3, #1]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80068e2:	2301      	movs	r3, #1
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	f7ff fcd5 	bl	8006294 <disk_read>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d004      	beq.n	80068fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	683a      	ldr	r2, [r7, #0]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006900:	7bfb      	ldrb	r3, [r7, #15]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
	...

0800690c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff ff87 	bl	8006828 <sync_window>
 800691a:	4603      	mov	r3, r0
 800691c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d159      	bne.n	80069d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b03      	cmp	r3, #3
 800692a:	d149      	bne.n	80069c0 <sync_fs+0xb4>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	791b      	ldrb	r3, [r3, #4]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d145      	bne.n	80069c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	899b      	ldrh	r3, [r3, #12]
 800693e:	461a      	mov	r2, r3
 8006940:	2100      	movs	r1, #0
 8006942:	f7ff fda8 	bl	8006496 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	3334      	adds	r3, #52	; 0x34
 800694a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800694e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006952:	4618      	mov	r0, r3
 8006954:	f7ff fd37 	bl	80063c6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3334      	adds	r3, #52	; 0x34
 800695c:	4921      	ldr	r1, [pc, #132]	; (80069e4 <sync_fs+0xd8>)
 800695e:	4618      	mov	r0, r3
 8006960:	f7ff fd4c 	bl	80063fc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	3334      	adds	r3, #52	; 0x34
 8006968:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800696c:	491e      	ldr	r1, [pc, #120]	; (80069e8 <sync_fs+0xdc>)
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fd44 	bl	80063fc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3334      	adds	r3, #52	; 0x34
 8006978:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	4619      	mov	r1, r3
 8006982:	4610      	mov	r0, r2
 8006984:	f7ff fd3a 	bl	80063fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3334      	adds	r3, #52	; 0x34
 800698c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	4619      	mov	r1, r3
 8006996:	4610      	mov	r0, r2
 8006998:	f7ff fd30 	bl	80063fc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	7858      	ldrb	r0, [r3, #1]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b4:	2301      	movs	r3, #1
 80069b6:	f7ff fc8d 	bl	80062d4 <disk_write>
			fs->fsi_flag = 0;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	785b      	ldrb	r3, [r3, #1]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fca3 	bl	8006314 <disk_ioctl>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <sync_fs+0xcc>
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	41615252 	.word	0x41615252
 80069e8:	61417272 	.word	0x61417272

080069ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	3b02      	subs	r3, #2
 80069fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	3b02      	subs	r3, #2
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d301      	bcc.n	8006a0c <clust2sect+0x20>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e008      	b.n	8006a1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	895b      	ldrh	r3, [r3, #10]
 8006a10:	461a      	mov	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	fb03 f202 	mul.w	r2, r3, r2
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4413      	add	r3, r2
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d904      	bls.n	8006a4a <get_fat+0x20>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e0bb      	b.n	8006bc8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	f000 8083 	beq.w	8006b66 <get_fat+0x13c>
 8006a60:	2b03      	cmp	r3, #3
 8006a62:	f300 80a7 	bgt.w	8006bb4 <get_fat+0x18a>
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d002      	beq.n	8006a70 <get_fat+0x46>
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d056      	beq.n	8006b1c <get_fat+0xf2>
 8006a6e:	e0a1      	b.n	8006bb4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	899b      	ldrh	r3, [r3, #12]
 8006a86:	4619      	mov	r1, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a8e:	4413      	add	r3, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	6938      	ldr	r0, [r7, #16]
 8006a94:	f7ff ff0c 	bl	80068b0 <move_window>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f040 808d 	bne.w	8006bba <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	60fa      	str	r2, [r7, #12]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	8992      	ldrh	r2, [r2, #12]
 8006aaa:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aae:	fb02 f201 	mul.w	r2, r2, r1
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006abc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	899b      	ldrh	r3, [r3, #12]
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ace:	4413      	add	r3, r2
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f7ff feec 	bl	80068b0 <move_window>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d16f      	bne.n	8006bbe <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	899b      	ldrh	r3, [r3, #12]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aea:	fb02 f201 	mul.w	r2, r2, r1
 8006aee:	1a9b      	subs	r3, r3, r2
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4413      	add	r3, r2
 8006af4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	461a      	mov	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <get_fat+0xe8>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	091b      	lsrs	r3, r3, #4
 8006b10:	e002      	b.n	8006b18 <get_fat+0xee>
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b18:	617b      	str	r3, [r7, #20]
			break;
 8006b1a:	e055      	b.n	8006bc8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	899b      	ldrh	r3, [r3, #12]
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	4619      	mov	r1, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b30:	4413      	add	r3, r2
 8006b32:	4619      	mov	r1, r3
 8006b34:	6938      	ldr	r0, [r7, #16]
 8006b36:	f7ff febb 	bl	80068b0 <move_window>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d140      	bne.n	8006bc2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	8992      	ldrh	r2, [r2, #12]
 8006b4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b52:	fb02 f200 	mul.w	r2, r2, r0
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	440b      	add	r3, r1
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f7ff fbf8 	bl	8006350 <ld_word>
 8006b60:	4603      	mov	r3, r0
 8006b62:	617b      	str	r3, [r7, #20]
			break;
 8006b64:	e030      	b.n	8006bc8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	899b      	ldrh	r3, [r3, #12]
 8006b6e:	089b      	lsrs	r3, r3, #2
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4619      	mov	r1, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b7a:	4413      	add	r3, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6938      	ldr	r0, [r7, #16]
 8006b80:	f7ff fe96 	bl	80068b0 <move_window>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d11d      	bne.n	8006bc6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	8992      	ldrh	r2, [r2, #12]
 8006b98:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b9c:	fb02 f200 	mul.w	r2, r2, r0
 8006ba0:	1a9b      	subs	r3, r3, r2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff fbeb 	bl	8006380 <ld_dword>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bb0:	617b      	str	r3, [r7, #20]
			break;
 8006bb2:	e009      	b.n	8006bc8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	e006      	b.n	8006bc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bba:	bf00      	nop
 8006bbc:	e004      	b.n	8006bc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006bc6:	bf00      	nop
		}
	}

	return val;
 8006bc8:	697b      	ldr	r3, [r7, #20]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006bd2:	b590      	push	{r4, r7, lr}
 8006bd4:	b089      	sub	sp, #36	; 0x24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006bde:	2302      	movs	r3, #2
 8006be0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	f240 8102 	bls.w	8006dee <put_fat+0x21c>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	f080 80fc 	bcs.w	8006dee <put_fat+0x21c>
		switch (fs->fs_type) {
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f000 80b6 	beq.w	8006d6c <put_fat+0x19a>
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	f300 80fd 	bgt.w	8006e00 <put_fat+0x22e>
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d003      	beq.n	8006c12 <put_fat+0x40>
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	f000 8083 	beq.w	8006d16 <put_fat+0x144>
 8006c10:	e0f6      	b.n	8006e00 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	61bb      	str	r3, [r7, #24]
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	899b      	ldrh	r3, [r3, #12]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c30:	4413      	add	r3, r2
 8006c32:	4619      	mov	r1, r3
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f7ff fe3b 	bl	80068b0 <move_window>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 80d6 	bne.w	8006df2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	61ba      	str	r2, [r7, #24]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	8992      	ldrh	r2, [r2, #12]
 8006c56:	fbb3 f0f2 	udiv	r0, r3, r2
 8006c5a:	fb02 f200 	mul.w	r2, r2, r0
 8006c5e:	1a9b      	subs	r3, r3, r2
 8006c60:	440b      	add	r3, r1
 8006c62:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00d      	beq.n	8006c8a <put_fat+0xb8>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	b25a      	sxtb	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	b25b      	sxtb	r3, r3
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	e001      	b.n	8006c8e <put_fat+0xbc>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	899b      	ldrh	r3, [r3, #12]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ca8:	4413      	add	r3, r2
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fdff 	bl	80068b0 <move_window>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006cb6:	7ffb      	ldrb	r3, [r7, #31]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f040 809c 	bne.w	8006df6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	899b      	ldrh	r3, [r3, #12]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cd0:	fb02 f200 	mul.w	r2, r2, r0
 8006cd4:	1a9b      	subs	r3, r3, r2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <put_fat+0x11a>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	091b      	lsrs	r3, r3, #4
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	e00e      	b.n	8006d0a <put_fat+0x138>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	b25b      	sxtb	r3, r3
 8006cf2:	f023 030f 	bic.w	r3, r3, #15
 8006cf6:	b25a      	sxtb	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	b25b      	sxtb	r3, r3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	b25b      	sxtb	r3, r3
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	70da      	strb	r2, [r3, #3]
			break;
 8006d14:	e074      	b.n	8006e00 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	899b      	ldrh	r3, [r3, #12]
 8006d1e:	085b      	lsrs	r3, r3, #1
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	4619      	mov	r1, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d2a:	4413      	add	r3, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f7ff fdbe 	bl	80068b0 <move_window>
 8006d34:	4603      	mov	r3, r0
 8006d36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d38:	7ffb      	ldrb	r3, [r7, #31]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d15d      	bne.n	8006dfa <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	8992      	ldrh	r2, [r2, #12]
 8006d4c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d50:	fb02 f200 	mul.w	r2, r2, r0
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	440b      	add	r3, r1
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	b292      	uxth	r2, r2
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fb31 	bl	80063c6 <st_word>
			fs->wflag = 1;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	70da      	strb	r2, [r3, #3]
			break;
 8006d6a:	e049      	b.n	8006e00 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	899b      	ldrh	r3, [r3, #12]
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4619      	mov	r1, r3
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d80:	4413      	add	r3, r2
 8006d82:	4619      	mov	r1, r3
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f7ff fd93 	bl	80068b0 <move_window>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d8e:	7ffb      	ldrb	r3, [r7, #31]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d134      	bne.n	8006dfe <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	8992      	ldrh	r2, [r2, #12]
 8006da8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dac:	fb02 f200 	mul.w	r2, r2, r0
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	440b      	add	r3, r1
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7ff fae3 	bl	8006380 <ld_dword>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006dc0:	4323      	orrs	r3, r4
 8006dc2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	8992      	ldrh	r2, [r2, #12]
 8006dd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006dd6:	fb02 f200 	mul.w	r2, r2, r0
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	440b      	add	r3, r1
 8006dde:	6879      	ldr	r1, [r7, #4]
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7ff fb0b 	bl	80063fc <st_dword>
			fs->wflag = 1;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	70da      	strb	r2, [r3, #3]
			break;
 8006dec:	e008      	b.n	8006e00 <put_fat+0x22e>
		}
	}
 8006dee:	bf00      	nop
 8006df0:	e006      	b.n	8006e00 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006df2:	bf00      	nop
 8006df4:	e004      	b.n	8006e00 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006df6:	bf00      	nop
 8006df8:	e002      	b.n	8006e00 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dfa:	bf00      	nop
 8006dfc:	e000      	b.n	8006e00 <put_fat+0x22e>
			if (res != FR_OK) break;
 8006dfe:	bf00      	nop
	return res;
 8006e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3724      	adds	r7, #36	; 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd90      	pop	{r4, r7, pc}

08006e0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b088      	sub	sp, #32
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d904      	bls.n	8006e30 <remove_chain+0x26>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d301      	bcc.n	8006e34 <remove_chain+0x2a>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e04b      	b.n	8006ecc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00c      	beq.n	8006e54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	69b8      	ldr	r0, [r7, #24]
 8006e42:	f7ff fec6 	bl	8006bd2 <put_fat>
 8006e46:	4603      	mov	r3, r0
 8006e48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006e4a:	7ffb      	ldrb	r3, [r7, #31]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <remove_chain+0x4a>
 8006e50:	7ffb      	ldrb	r3, [r7, #31]
 8006e52:	e03b      	b.n	8006ecc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7ff fde7 	bl	8006a2a <get_fat>
 8006e5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d031      	beq.n	8006ec8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d101      	bne.n	8006e6e <remove_chain+0x64>
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e02e      	b.n	8006ecc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e74:	d101      	bne.n	8006e7a <remove_chain+0x70>
 8006e76:	2301      	movs	r3, #1
 8006e78:	e028      	b.n	8006ecc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	68b9      	ldr	r1, [r7, #8]
 8006e7e:	69b8      	ldr	r0, [r7, #24]
 8006e80:	f7ff fea7 	bl	8006bd2 <put_fat>
 8006e84:	4603      	mov	r3, r0
 8006e86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006e88:	7ffb      	ldrb	r3, [r7, #31]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <remove_chain+0x88>
 8006e8e:	7ffb      	ldrb	r3, [r7, #31]
 8006e90:	e01c      	b.n	8006ecc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	3b02      	subs	r3, #2
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d20b      	bcs.n	8006eb8 <remove_chain+0xae>
			fs->free_clst++;
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	791b      	ldrb	r3, [r3, #4]
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3c6      	bcc.n	8006e54 <remove_chain+0x4a>
 8006ec6:	e000      	b.n	8006eca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006ec8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3720      	adds	r7, #32
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10d      	bne.n	8006f06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <create_chain+0x2c>
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	69ba      	ldr	r2, [r7, #24]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d31b      	bcc.n	8006f38 <create_chain+0x64>
 8006f00:	2301      	movs	r3, #1
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	e018      	b.n	8006f38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006f06:	6839      	ldr	r1, [r7, #0]
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff fd8e 	bl	8006a2a <get_fat>
 8006f0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d801      	bhi.n	8006f1a <create_chain+0x46>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e070      	b.n	8006ffc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f20:	d101      	bne.n	8006f26 <create_chain+0x52>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	e06a      	b.n	8006ffc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d201      	bcs.n	8006f34 <create_chain+0x60>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	e063      	b.n	8006ffc <create_chain+0x128>
		scl = clst;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3301      	adds	r3, #1
 8006f40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d307      	bcc.n	8006f5c <create_chain+0x88>
				ncl = 2;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006f50:	69fa      	ldr	r2, [r7, #28]
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d901      	bls.n	8006f5c <create_chain+0x88>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e04f      	b.n	8006ffc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006f5c:	69f9      	ldr	r1, [r7, #28]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fd63 	bl	8006a2a <get_fat>
 8006f64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00e      	beq.n	8006f8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d003      	beq.n	8006f7a <create_chain+0xa6>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d101      	bne.n	8006f7e <create_chain+0xaa>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	e03e      	b.n	8006ffc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d1da      	bne.n	8006f3c <create_chain+0x68>
 8006f86:	2300      	movs	r3, #0
 8006f88:	e038      	b.n	8006ffc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006f8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	6938      	ldr	r0, [r7, #16]
 8006f94:	f7ff fe1d 	bl	8006bd2 <put_fat>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <create_chain+0xe2>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d006      	beq.n	8006fb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006fa8:	69fa      	ldr	r2, [r7, #28]
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6938      	ldr	r0, [r7, #16]
 8006fae:	f7ff fe10 	bl	8006bd2 <put_fat>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006fb6:	7dfb      	ldrb	r3, [r7, #23]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d116      	bne.n	8006fea <create_chain+0x116>
		fs->last_clst = ncl;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	695a      	ldr	r2, [r3, #20]
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	3b02      	subs	r3, #2
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d804      	bhi.n	8006fda <create_chain+0x106>
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	1e5a      	subs	r2, r3, #1
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	f043 0301 	orr.w	r3, r3, #1
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	711a      	strb	r2, [r3, #4]
 8006fe8:	e007      	b.n	8006ffa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d102      	bne.n	8006ff6 <create_chain+0x122>
 8006ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff4:	e000      	b.n	8006ff8 <create_chain+0x124>
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006ffa:	69fb      	ldr	r3, [r7, #28]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	3304      	adds	r3, #4
 800701a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	899b      	ldrh	r3, [r3, #12]
 8007020:	461a      	mov	r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	fbb3 f3f2 	udiv	r3, r3, r2
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	8952      	ldrh	r2, [r2, #10]
 800702c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007030:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	1d1a      	adds	r2, r3, #4
 8007036:	613a      	str	r2, [r7, #16]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <clmt_clust+0x42>
 8007042:	2300      	movs	r3, #0
 8007044:	e010      	b.n	8007068 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	429a      	cmp	r2, r3
 800704c:	d307      	bcc.n	800705e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	3304      	adds	r3, #4
 800705a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800705c:	e7e9      	b.n	8007032 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800705e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	4413      	add	r3, r2
}
 8007068:	4618      	mov	r0, r3
 800706a:	371c      	adds	r7, #28
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800708a:	d204      	bcs.n	8007096 <dir_sdi+0x22>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	f003 031f 	and.w	r3, r3, #31
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007096:	2302      	movs	r3, #2
 8007098:	e071      	b.n	800717e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <dir_sdi+0x46>
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d902      	bls.n	80070ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10c      	bne.n	80070da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	095b      	lsrs	r3, r3, #5
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	8912      	ldrh	r2, [r2, #8]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d301      	bcc.n	80070d0 <dir_sdi+0x5c>
 80070cc:	2302      	movs	r3, #2
 80070ce:	e056      	b.n	800717e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	61da      	str	r2, [r3, #28]
 80070d8:	e02d      	b.n	8007136 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	895b      	ldrh	r3, [r3, #10]
 80070de:	461a      	mov	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	899b      	ldrh	r3, [r3, #12]
 80070e4:	fb03 f302 	mul.w	r3, r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80070ea:	e019      	b.n	8007120 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6979      	ldr	r1, [r7, #20]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff fc9a 	bl	8006a2a <get_fat>
 80070f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fe:	d101      	bne.n	8007104 <dir_sdi+0x90>
 8007100:	2301      	movs	r3, #1
 8007102:	e03c      	b.n	800717e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d904      	bls.n	8007114 <dir_sdi+0xa0>
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	429a      	cmp	r2, r3
 8007112:	d301      	bcc.n	8007118 <dir_sdi+0xa4>
 8007114:	2302      	movs	r3, #2
 8007116:	e032      	b.n	800717e <dir_sdi+0x10a>
			ofs -= csz;
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	429a      	cmp	r2, r3
 8007126:	d2e1      	bcs.n	80070ec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007128:	6979      	ldr	r1, [r7, #20]
 800712a:	6938      	ldr	r0, [r7, #16]
 800712c:	f7ff fc5e 	bl	80069ec <clust2sect>
 8007130:	4602      	mov	r2, r0
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	697a      	ldr	r2, [r7, #20]
 800713a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <dir_sdi+0xd4>
 8007144:	2302      	movs	r3, #2
 8007146:	e01a      	b.n	800717e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	899b      	ldrh	r3, [r3, #12]
 8007150:	4619      	mov	r1, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	fbb3 f3f1 	udiv	r3, r3, r1
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	899b      	ldrh	r3, [r3, #12]
 8007168:	461a      	mov	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007170:	fb02 f200 	mul.w	r2, r2, r0
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	18ca      	adds	r2, r1, r3
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b086      	sub	sp, #24
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	695b      	ldr	r3, [r3, #20]
 800719a:	3320      	adds	r3, #32
 800719c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <dir_next+0x28>
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071ac:	d301      	bcc.n	80071b2 <dir_next+0x2c>
 80071ae:	2304      	movs	r3, #4
 80071b0:	e0bb      	b.n	800732a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	899b      	ldrh	r3, [r3, #12]
 80071b6:	461a      	mov	r2, r3
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80071be:	fb02 f201 	mul.w	r2, r2, r1
 80071c2:	1a9b      	subs	r3, r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f040 809d 	bne.w	8007304 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	8912      	ldrh	r2, [r2, #8]
 80071e4:	4293      	cmp	r3, r2
 80071e6:	f0c0 808d 	bcc.w	8007304 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	61da      	str	r2, [r3, #28]
 80071f0:	2304      	movs	r3, #4
 80071f2:	e09a      	b.n	800732a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	899b      	ldrh	r3, [r3, #12]
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	8952      	ldrh	r2, [r2, #10]
 8007204:	3a01      	subs	r2, #1
 8007206:	4013      	ands	r3, r2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d17b      	bne.n	8007304 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7ff fc08 	bl	8006a2a <get_fat>
 800721a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d801      	bhi.n	8007226 <dir_next+0xa0>
 8007222:	2302      	movs	r3, #2
 8007224:	e081      	b.n	800732a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d101      	bne.n	8007232 <dir_next+0xac>
 800722e:	2301      	movs	r3, #1
 8007230:	e07b      	b.n	800732a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	429a      	cmp	r2, r3
 800723a:	d359      	bcc.n	80072f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	61da      	str	r2, [r3, #28]
 8007248:	2304      	movs	r3, #4
 800724a:	e06e      	b.n	800732a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	4619      	mov	r1, r3
 8007254:	4610      	mov	r0, r2
 8007256:	f7ff fe3d 	bl	8006ed4 <create_chain>
 800725a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <dir_next+0xe0>
 8007262:	2307      	movs	r3, #7
 8007264:	e061      	b.n	800732a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d101      	bne.n	8007270 <dir_next+0xea>
 800726c:	2302      	movs	r3, #2
 800726e:	e05c      	b.n	800732a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007276:	d101      	bne.n	800727c <dir_next+0xf6>
 8007278:	2301      	movs	r3, #1
 800727a:	e056      	b.n	800732a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f7ff fad3 	bl	8006828 <sync_window>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <dir_next+0x106>
 8007288:	2301      	movs	r3, #1
 800728a:	e04e      	b.n	800732a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	899b      	ldrh	r3, [r3, #12]
 8007296:	461a      	mov	r2, r3
 8007298:	2100      	movs	r1, #0
 800729a:	f7ff f8fc 	bl	8006496 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	6979      	ldr	r1, [r7, #20]
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fba1 	bl	80069ec <clust2sect>
 80072aa:	4602      	mov	r2, r0
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30
 80072b0:	e012      	b.n	80072d8 <dir_next+0x152>
						fs->wflag = 1;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2201      	movs	r2, #1
 80072b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f7ff fab5 	bl	8006828 <sync_window>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <dir_next+0x142>
 80072c4:	2301      	movs	r3, #1
 80072c6:	e030      	b.n	800732a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	3301      	adds	r3, #1
 80072cc:	613b      	str	r3, [r7, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	1c5a      	adds	r2, r3, #1
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	895b      	ldrh	r3, [r3, #10]
 80072dc:	461a      	mov	r2, r3
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d3e6      	bcc.n	80072b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	1ad2      	subs	r2, r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80072f6:	6979      	ldr	r1, [r7, #20]
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff fb77 	bl	80069ec <clust2sect>
 80072fe:	4602      	mov	r2, r0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	899b      	ldrh	r3, [r3, #12]
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	fbb3 f0f2 	udiv	r0, r3, r2
 800731c:	fb02 f200 	mul.w	r2, r2, r0
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	18ca      	adds	r2, r1, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007342:	2100      	movs	r1, #0
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fe95 	bl	8007074 <dir_sdi>
 800734a:	4603      	mov	r3, r0
 800734c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800734e:	7dfb      	ldrb	r3, [r7, #23]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d12b      	bne.n	80073ac <dir_alloc+0x7a>
		n = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	4619      	mov	r1, r3
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff faa6 	bl	80068b0 <move_window>
 8007364:	4603      	mov	r3, r0
 8007366:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007368:	7dfb      	ldrb	r3, [r7, #23]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d11d      	bne.n	80073aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	2be5      	cmp	r3, #229	; 0xe5
 8007376:	d004      	beq.n	8007382 <dir_alloc+0x50>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d107      	bne.n	8007392 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	3301      	adds	r3, #1
 8007386:	613b      	str	r3, [r7, #16]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d102      	bne.n	8007396 <dir_alloc+0x64>
 8007390:	e00c      	b.n	80073ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007396:	2101      	movs	r1, #1
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fef4 	bl	8007186 <dir_next>
 800739e:	4603      	mov	r3, r0
 80073a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80073a2:	7dfb      	ldrb	r3, [r7, #23]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d0d7      	beq.n	8007358 <dir_alloc+0x26>
 80073a8:	e000      	b.n	80073ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80073aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	d101      	bne.n	80073b6 <dir_alloc+0x84>
 80073b2:	2307      	movs	r3, #7
 80073b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	331a      	adds	r3, #26
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fe ffbe 	bl	8006350 <ld_word>
 80073d4:	4603      	mov	r3, r0
 80073d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d109      	bne.n	80073f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	3314      	adds	r3, #20
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fe ffb3 	bl	8006350 <ld_word>
 80073ea:	4603      	mov	r3, r0
 80073ec:	041b      	lsls	r3, r3, #16
 80073ee:	68fa      	ldr	r2, [r7, #12]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80073f4:	68fb      	ldr	r3, [r7, #12]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	331a      	adds	r3, #26
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	b292      	uxth	r2, r2
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe ffd6 	bl	80063c6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b03      	cmp	r3, #3
 8007420:	d109      	bne.n	8007436 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f103 0214 	add.w	r2, r3, #20
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	b29b      	uxth	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fe ffc8 	bl	80063c6 <st_word>
	}
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800744c:	2100      	movs	r1, #0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fe10 	bl	8007074 <dir_sdi>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <dir_find+0x24>
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	e03e      	b.n	80074e0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69db      	ldr	r3, [r3, #28]
 8007466:	4619      	mov	r1, r3
 8007468:	6938      	ldr	r0, [r7, #16]
 800746a:	f7ff fa21 	bl	80068b0 <move_window>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d12f      	bne.n	80074d8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a1b      	ldr	r3, [r3, #32]
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d102      	bne.n	800748c <dir_find+0x4e>
 8007486:	2304      	movs	r3, #4
 8007488:	75fb      	strb	r3, [r7, #23]
 800748a:	e028      	b.n	80074de <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	330b      	adds	r3, #11
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007498:	b2da      	uxtb	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	330b      	adds	r3, #11
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10a      	bne.n	80074c4 <dir_find+0x86>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a18      	ldr	r0, [r3, #32]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3324      	adds	r3, #36	; 0x24
 80074b6:	220b      	movs	r2, #11
 80074b8:	4619      	mov	r1, r3
 80074ba:	f7ff f807 	bl	80064cc <mem_cmp>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fe5d 	bl	8007186 <dir_next>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0c5      	beq.n	8007462 <dir_find+0x24>
 80074d6:	e002      	b.n	80074de <dir_find+0xa0>
		if (res != FR_OK) break;
 80074d8:	bf00      	nop
 80074da:	e000      	b.n	80074de <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80074dc:	bf00      	nop

	return res;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80074f6:	2101      	movs	r1, #1
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff ff1a 	bl	8007332 <dir_alloc>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d11c      	bne.n	8007542 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
 800750c:	4619      	mov	r1, r3
 800750e:	68b8      	ldr	r0, [r7, #8]
 8007510:	f7ff f9ce 	bl	80068b0 <move_window>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d111      	bne.n	8007542 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	2220      	movs	r2, #32
 8007524:	2100      	movs	r1, #0
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe ffb5 	bl	8006496 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a18      	ldr	r0, [r3, #32]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3324      	adds	r3, #36	; 0x24
 8007534:	220b      	movs	r2, #11
 8007536:	4619      	mov	r1, r3
 8007538:	f7fe ff8c 	bl	8006454 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2201      	movs	r2, #1
 8007540:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b086      	sub	sp, #24
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2200      	movs	r2, #0
 800755a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d04e      	beq.n	8007602 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800756c:	e021      	b.n	80075b2 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1a      	ldr	r2, [r3, #32]
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	1c59      	adds	r1, r3, #1
 8007576:	6179      	str	r1, [r7, #20]
 8007578:	4413      	add	r3, r2
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b20      	cmp	r3, #32
 8007582:	d100      	bne.n	8007586 <get_fileinfo+0x3a>
 8007584:	e015      	b.n	80075b2 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b05      	cmp	r3, #5
 800758a:	d101      	bne.n	8007590 <get_fileinfo+0x44>
 800758c:	23e5      	movs	r3, #229	; 0xe5
 800758e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2b09      	cmp	r3, #9
 8007594:	d106      	bne.n	80075a4 <get_fileinfo+0x58>
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	613a      	str	r2, [r7, #16]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	4413      	add	r3, r2
 80075a0:	222e      	movs	r2, #46	; 0x2e
 80075a2:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	613a      	str	r2, [r7, #16]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	7bfa      	ldrb	r2, [r7, #15]
 80075b0:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b0a      	cmp	r3, #10
 80075b6:	d9da      	bls.n	800756e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	4413      	add	r3, r2
 80075be:	3309      	adds	r3, #9
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	7ada      	ldrb	r2, [r3, #11]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	331c      	adds	r3, #28
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fed3 	bl	8006380 <ld_dword>
 80075da:	4602      	mov	r2, r0
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	3316      	adds	r3, #22
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe feca 	bl	8006380 <ld_dword>
 80075ec:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	80da      	strh	r2, [r3, #6]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	0c1b      	lsrs	r3, r3, #16
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	809a      	strh	r2, [r3, #4]
 8007600:	e000      	b.n	8007604 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007602:	bf00      	nop
}
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b088      	sub	sp, #32
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60fb      	str	r3, [r7, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3324      	adds	r3, #36	; 0x24
 8007620:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007622:	220b      	movs	r2, #11
 8007624:	2120      	movs	r1, #32
 8007626:	68b8      	ldr	r0, [r7, #8]
 8007628:	f7fe ff35 	bl	8006496 <mem_set>
	si = i = 0; ni = 8;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	61fb      	str	r3, [r7, #28]
 8007634:	2308      	movs	r3, #8
 8007636:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	1c5a      	adds	r2, r3, #1
 800763c:	61fa      	str	r2, [r7, #28]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007646:	7efb      	ldrb	r3, [r7, #27]
 8007648:	2b20      	cmp	r3, #32
 800764a:	d94e      	bls.n	80076ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800764c:	7efb      	ldrb	r3, [r7, #27]
 800764e:	2b2f      	cmp	r3, #47	; 0x2f
 8007650:	d006      	beq.n	8007660 <create_name+0x54>
 8007652:	7efb      	ldrb	r3, [r7, #27]
 8007654:	2b5c      	cmp	r3, #92	; 0x5c
 8007656:	d110      	bne.n	800767a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007658:	e002      	b.n	8007660 <create_name+0x54>
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	3301      	adds	r3, #1
 800765e:	61fb      	str	r3, [r7, #28]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	4413      	add	r3, r2
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b2f      	cmp	r3, #47	; 0x2f
 800766a:	d0f6      	beq.n	800765a <create_name+0x4e>
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	4413      	add	r3, r2
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b5c      	cmp	r3, #92	; 0x5c
 8007676:	d0f0      	beq.n	800765a <create_name+0x4e>
			break;
 8007678:	e038      	b.n	80076ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800767a:	7efb      	ldrb	r3, [r7, #27]
 800767c:	2b2e      	cmp	r3, #46	; 0x2e
 800767e:	d003      	beq.n	8007688 <create_name+0x7c>
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	429a      	cmp	r2, r3
 8007686:	d30c      	bcc.n	80076a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2b0b      	cmp	r3, #11
 800768c:	d002      	beq.n	8007694 <create_name+0x88>
 800768e:	7efb      	ldrb	r3, [r7, #27]
 8007690:	2b2e      	cmp	r3, #46	; 0x2e
 8007692:	d001      	beq.n	8007698 <create_name+0x8c>
 8007694:	2306      	movs	r3, #6
 8007696:	e044      	b.n	8007722 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007698:	2308      	movs	r3, #8
 800769a:	613b      	str	r3, [r7, #16]
 800769c:	230b      	movs	r3, #11
 800769e:	617b      	str	r3, [r7, #20]
			continue;
 80076a0:	e022      	b.n	80076e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80076a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	da04      	bge.n	80076b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80076aa:	7efb      	ldrb	r3, [r7, #27]
 80076ac:	3b80      	subs	r3, #128	; 0x80
 80076ae:	4a1f      	ldr	r2, [pc, #124]	; (800772c <create_name+0x120>)
 80076b0:	5cd3      	ldrb	r3, [r2, r3]
 80076b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80076b4:	7efb      	ldrb	r3, [r7, #27]
 80076b6:	4619      	mov	r1, r3
 80076b8:	481d      	ldr	r0, [pc, #116]	; (8007730 <create_name+0x124>)
 80076ba:	f7fe ff2e 	bl	800651a <chk_chr>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <create_name+0xbc>
 80076c4:	2306      	movs	r3, #6
 80076c6:	e02c      	b.n	8007722 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80076c8:	7efb      	ldrb	r3, [r7, #27]
 80076ca:	2b60      	cmp	r3, #96	; 0x60
 80076cc:	d905      	bls.n	80076da <create_name+0xce>
 80076ce:	7efb      	ldrb	r3, [r7, #27]
 80076d0:	2b7a      	cmp	r3, #122	; 0x7a
 80076d2:	d802      	bhi.n	80076da <create_name+0xce>
 80076d4:	7efb      	ldrb	r3, [r7, #27]
 80076d6:	3b20      	subs	r3, #32
 80076d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	613a      	str	r2, [r7, #16]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	7efa      	ldrb	r2, [r7, #27]
 80076e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80076e8:	e7a6      	b.n	8007638 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80076ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	441a      	add	r2, r3
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <create_name+0xf4>
 80076fc:	2306      	movs	r3, #6
 80076fe:	e010      	b.n	8007722 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2be5      	cmp	r3, #229	; 0xe5
 8007706:	d102      	bne.n	800770e <create_name+0x102>
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2205      	movs	r2, #5
 800770c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800770e:	7efb      	ldrb	r3, [r7, #27]
 8007710:	2b20      	cmp	r3, #32
 8007712:	d801      	bhi.n	8007718 <create_name+0x10c>
 8007714:	2204      	movs	r2, #4
 8007716:	e000      	b.n	800771a <create_name+0x10e>
 8007718:	2200      	movs	r2, #0
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	330b      	adds	r3, #11
 800771e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007720:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007722:	4618      	mov	r0, r3
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	0800bf68 	.word	0x0800bf68
 8007730:	0800bf04 	.word	0x0800bf04

08007734 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007748:	e002      	b.n	8007750 <follow_path+0x1c>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	3301      	adds	r3, #1
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b2f      	cmp	r3, #47	; 0x2f
 8007756:	d0f8      	beq.n	800774a <follow_path+0x16>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b5c      	cmp	r3, #92	; 0x5c
 800775e:	d0f4      	beq.n	800774a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2200      	movs	r2, #0
 8007764:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b1f      	cmp	r3, #31
 800776c:	d80a      	bhi.n	8007784 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007776:	2100      	movs	r1, #0
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff fc7b 	bl	8007074 <dir_sdi>
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
 8007782:	e048      	b.n	8007816 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007784:	463b      	mov	r3, r7
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f7ff ff3f 	bl	800760c <create_name>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007792:	7dfb      	ldrb	r3, [r7, #23]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d139      	bne.n	800780c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fe50 	bl	800743e <dir_find>
 800779e:	4603      	mov	r3, r0
 80077a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80077a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00a      	beq.n	80077c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d12c      	bne.n	8007810 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80077b6:	7afb      	ldrb	r3, [r7, #11]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d127      	bne.n	8007810 <follow_path+0xdc>
 80077c0:	2305      	movs	r3, #5
 80077c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80077c4:	e024      	b.n	8007810 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80077c6:	7afb      	ldrb	r3, [r7, #11]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d121      	bne.n	8007814 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	799b      	ldrb	r3, [r3, #6]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80077dc:	2305      	movs	r3, #5
 80077de:	75fb      	strb	r3, [r7, #23]
 80077e0:	e019      	b.n	8007816 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	8992      	ldrh	r2, [r2, #12]
 80077f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80077f4:	fb02 f200 	mul.w	r2, r2, r0
 80077f8:	1a9b      	subs	r3, r3, r2
 80077fa:	440b      	add	r3, r1
 80077fc:	4619      	mov	r1, r3
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fdde 	bl	80073c0 <ld_clust>
 8007804:	4602      	mov	r2, r0
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800780a:	e7bb      	b.n	8007784 <follow_path+0x50>
			if (res != FR_OK) break;
 800780c:	bf00      	nop
 800780e:	e002      	b.n	8007816 <follow_path+0xe2>
				break;
 8007810:	bf00      	nop
 8007812:	e000      	b.n	8007816 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007814:	bf00      	nop
			}
		}
	}

	return res;
 8007816:	7dfb      	ldrb	r3, [r7, #23]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007820:	b480      	push	{r7}
 8007822:	b087      	sub	sp, #28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007828:	f04f 33ff 	mov.w	r3, #4294967295
 800782c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d031      	beq.n	800789a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e002      	b.n	8007844 <get_ldnumber+0x24>
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	3301      	adds	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b20      	cmp	r3, #32
 800784a:	d903      	bls.n	8007854 <get_ldnumber+0x34>
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b3a      	cmp	r3, #58	; 0x3a
 8007852:	d1f4      	bne.n	800783e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b3a      	cmp	r3, #58	; 0x3a
 800785a:	d11c      	bne.n	8007896 <get_ldnumber+0x76>
			tp = *path;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	60fa      	str	r2, [r7, #12]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	3b30      	subs	r3, #48	; 0x30
 800786c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b09      	cmp	r3, #9
 8007872:	d80e      	bhi.n	8007892 <get_ldnumber+0x72>
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	429a      	cmp	r2, r3
 800787a:	d10a      	bne.n	8007892 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d107      	bne.n	8007892 <get_ldnumber+0x72>
					vol = (int)i;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	3301      	adds	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	e002      	b.n	800789c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007896:	2300      	movs	r3, #0
 8007898:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800789a:	693b      	ldr	r3, [r7, #16]
}
 800789c:	4618      	mov	r0, r3
 800789e:	371c      	adds	r7, #28
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	70da      	strb	r2, [r3, #3]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f04f 32ff 	mov.w	r2, #4294967295
 80078be:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80078c0:	6839      	ldr	r1, [r7, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fe fff4 	bl	80068b0 <move_window>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <check_fs+0x2a>
 80078ce:	2304      	movs	r3, #4
 80078d0:	e038      	b.n	8007944 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	3334      	adds	r3, #52	; 0x34
 80078d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fd38 	bl	8006350 <ld_word>
 80078e0:	4603      	mov	r3, r0
 80078e2:	461a      	mov	r2, r3
 80078e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d001      	beq.n	80078f0 <check_fs+0x48>
 80078ec:	2303      	movs	r3, #3
 80078ee:	e029      	b.n	8007944 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078f6:	2be9      	cmp	r3, #233	; 0xe9
 80078f8:	d009      	beq.n	800790e <check_fs+0x66>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007900:	2beb      	cmp	r3, #235	; 0xeb
 8007902:	d11e      	bne.n	8007942 <check_fs+0x9a>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800790a:	2b90      	cmp	r3, #144	; 0x90
 800790c:	d119      	bne.n	8007942 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3334      	adds	r3, #52	; 0x34
 8007912:	3336      	adds	r3, #54	; 0x36
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fd33 	bl	8006380 <ld_dword>
 800791a:	4603      	mov	r3, r0
 800791c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007920:	4a0a      	ldr	r2, [pc, #40]	; (800794c <check_fs+0xa4>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d101      	bne.n	800792a <check_fs+0x82>
 8007926:	2300      	movs	r3, #0
 8007928:	e00c      	b.n	8007944 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	3334      	adds	r3, #52	; 0x34
 800792e:	3352      	adds	r3, #82	; 0x52
 8007930:	4618      	mov	r0, r3
 8007932:	f7fe fd25 	bl	8006380 <ld_dword>
 8007936:	4603      	mov	r3, r0
 8007938:	4a05      	ldr	r2, [pc, #20]	; (8007950 <check_fs+0xa8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d101      	bne.n	8007942 <check_fs+0x9a>
 800793e:	2300      	movs	r3, #0
 8007940:	e000      	b.n	8007944 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007942:	2302      	movs	r3, #2
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	00544146 	.word	0x00544146
 8007950:	33544146 	.word	0x33544146

08007954 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b096      	sub	sp, #88	; 0x58
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f7ff ff59 	bl	8007820 <get_ldnumber>
 800796e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007972:	2b00      	cmp	r3, #0
 8007974:	da01      	bge.n	800797a <find_volume+0x26>
 8007976:	230b      	movs	r3, #11
 8007978:	e265      	b.n	8007e46 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800797a:	4ab0      	ldr	r2, [pc, #704]	; (8007c3c <find_volume+0x2e8>)
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007982:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <find_volume+0x3a>
 800798a:	230c      	movs	r3, #12
 800798c:	e25b      	b.n	8007e46 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007992:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800799c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7fe fc33 	bl	8006214 <disk_status>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80079b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10c      	bne.n	80079da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80079c0:	79fb      	ldrb	r3, [r7, #7]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <find_volume+0x82>
 80079c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079ca:	f003 0304 	and.w	r3, r3, #4
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80079d2:	230a      	movs	r3, #10
 80079d4:	e237      	b.n	8007e46 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80079d6:	2300      	movs	r3, #0
 80079d8:	e235      	b.n	8007e46 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80079e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	785b      	ldrb	r3, [r3, #1]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fc2b 	bl	8006248 <disk_initialize>
 80079f2:	4603      	mov	r3, r0
 80079f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80079f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007a04:	2303      	movs	r3, #3
 8007a06:	e21e      	b.n	8007e46 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d007      	beq.n	8007a1e <find_volume+0xca>
 8007a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a12:	f003 0304 	and.w	r3, r3, #4
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007a1a:	230a      	movs	r3, #10
 8007a1c:	e213      	b.n	8007e46 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	7858      	ldrb	r0, [r3, #1]
 8007a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a24:	330c      	adds	r3, #12
 8007a26:	461a      	mov	r2, r3
 8007a28:	2102      	movs	r1, #2
 8007a2a:	f7fe fc73 	bl	8006314 <disk_ioctl>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <find_volume+0xe4>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e206      	b.n	8007e46 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3a:	899b      	ldrh	r3, [r3, #12]
 8007a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a40:	d80d      	bhi.n	8007a5e <find_volume+0x10a>
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	899b      	ldrh	r3, [r3, #12]
 8007a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4a:	d308      	bcc.n	8007a5e <find_volume+0x10a>
 8007a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a4e:	899b      	ldrh	r3, [r3, #12]
 8007a50:	461a      	mov	r2, r3
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	899b      	ldrh	r3, [r3, #12]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <find_volume+0x10e>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e1f1      	b.n	8007e46 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007a62:	2300      	movs	r3, #0
 8007a64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007a66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a6a:	f7ff ff1d 	bl	80078a8 <check_fs>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d14b      	bne.n	8007b14 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	643b      	str	r3, [r7, #64]	; 0x40
 8007a80:	e01f      	b.n	8007ac2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007a90:	4413      	add	r3, r2
 8007a92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	3304      	adds	r3, #4
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d006      	beq.n	8007aac <find_volume+0x158>
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fc6c 	bl	8006380 <ld_dword>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	e000      	b.n	8007aae <find_volume+0x15a>
 8007aac:	2200      	movs	r2, #0
 8007aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007ab6:	440b      	add	r3, r1
 8007ab8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	3301      	adds	r3, #1
 8007ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d9dc      	bls.n	8007a82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ac8:	2300      	movs	r3, #0
 8007aca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <find_volume+0x184>
 8007ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ae6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <find_volume+0x1a6>
 8007aee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007af2:	f7ff fed9 	bl	80078a8 <check_fs>
 8007af6:	4603      	mov	r3, r0
 8007af8:	e000      	b.n	8007afc <find_volume+0x1a8>
 8007afa:	2303      	movs	r3, #3
 8007afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d905      	bls.n	8007b14 <find_volume+0x1c0>
 8007b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d9e1      	bls.n	8007ad8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007b14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d101      	bne.n	8007b20 <find_volume+0x1cc>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e192      	b.n	8007e46 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007b20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d901      	bls.n	8007b2c <find_volume+0x1d8>
 8007b28:	230d      	movs	r3, #13
 8007b2a:	e18c      	b.n	8007e46 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2e:	3334      	adds	r3, #52	; 0x34
 8007b30:	330b      	adds	r3, #11
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fc0c 	bl	8006350 <ld_word>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	899b      	ldrh	r3, [r3, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d001      	beq.n	8007b48 <find_volume+0x1f4>
 8007b44:	230d      	movs	r3, #13
 8007b46:	e17e      	b.n	8007e46 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	3334      	adds	r3, #52	; 0x34
 8007b4c:	3316      	adds	r3, #22
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fe fbfe 	bl	8006350 <ld_word>
 8007b54:	4603      	mov	r3, r0
 8007b56:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <find_volume+0x218>
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	3334      	adds	r3, #52	; 0x34
 8007b62:	3324      	adds	r3, #36	; 0x24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe fc0b 	bl	8006380 <ld_dword>
 8007b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b70:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7e:	789b      	ldrb	r3, [r3, #2]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d005      	beq.n	8007b90 <find_volume+0x23c>
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	789b      	ldrb	r3, [r3, #2]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d001      	beq.n	8007b90 <find_volume+0x23c>
 8007b8c:	230d      	movs	r3, #13
 8007b8e:	e15a      	b.n	8007e46 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b92:	789b      	ldrb	r3, [r3, #2]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b98:	fb02 f303 	mul.w	r3, r2, r3
 8007b9c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bac:	895b      	ldrh	r3, [r3, #10]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <find_volume+0x270>
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	895b      	ldrh	r3, [r3, #10]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	895b      	ldrh	r3, [r3, #10]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <find_volume+0x274>
 8007bc4:	230d      	movs	r3, #13
 8007bc6:	e13e      	b.n	8007e46 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	3334      	adds	r3, #52	; 0x34
 8007bcc:	3311      	adds	r3, #17
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fbbe 	bl	8006350 <ld_word>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bda:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bde:	891b      	ldrh	r3, [r3, #8]
 8007be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007be2:	8992      	ldrh	r2, [r2, #12]
 8007be4:	0952      	lsrs	r2, r2, #5
 8007be6:	b292      	uxth	r2, r2
 8007be8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bec:	fb02 f201 	mul.w	r2, r2, r1
 8007bf0:	1a9b      	subs	r3, r3, r2
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d001      	beq.n	8007bfc <find_volume+0x2a8>
 8007bf8:	230d      	movs	r3, #13
 8007bfa:	e124      	b.n	8007e46 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	3334      	adds	r3, #52	; 0x34
 8007c00:	3313      	adds	r3, #19
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fba4 	bl	8006350 <ld_word>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <find_volume+0x2cc>
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	3334      	adds	r3, #52	; 0x34
 8007c16:	3320      	adds	r3, #32
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fe fbb1 	bl	8006380 <ld_dword>
 8007c1e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c22:	3334      	adds	r3, #52	; 0x34
 8007c24:	330e      	adds	r3, #14
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fb92 	bl	8006350 <ld_word>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007c30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d104      	bne.n	8007c40 <find_volume+0x2ec>
 8007c36:	230d      	movs	r3, #13
 8007c38:	e105      	b.n	8007e46 <find_volume+0x4f2>
 8007c3a:	bf00      	nop
 8007c3c:	200002a8 	.word	0x200002a8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007c40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c44:	4413      	add	r3, r2
 8007c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c48:	8911      	ldrh	r1, [r2, #8]
 8007c4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c4c:	8992      	ldrh	r2, [r2, #12]
 8007c4e:	0952      	lsrs	r2, r2, #5
 8007c50:	b292      	uxth	r2, r2
 8007c52:	fbb1 f2f2 	udiv	r2, r1, r2
 8007c56:	b292      	uxth	r2, r2
 8007c58:	4413      	add	r3, r2
 8007c5a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d201      	bcs.n	8007c68 <find_volume+0x314>
 8007c64:	230d      	movs	r3, #13
 8007c66:	e0ee      	b.n	8007e46 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c70:	8952      	ldrh	r2, [r2, #10]
 8007c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <find_volume+0x32e>
 8007c7e:	230d      	movs	r3, #13
 8007c80:	e0e1      	b.n	8007e46 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007c82:	2303      	movs	r3, #3
 8007c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d802      	bhi.n	8007c98 <find_volume+0x344>
 8007c92:	2302      	movs	r3, #2
 8007c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d802      	bhi.n	8007ca8 <find_volume+0x354>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	1c9a      	adds	r2, r3, #2
 8007cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cae:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cb4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007cb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cba:	441a      	add	r2, r3
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007cc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc4:	441a      	add	r2, r3
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007cca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d11e      	bne.n	8007d10 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd4:	3334      	adds	r3, #52	; 0x34
 8007cd6:	332a      	adds	r3, #42	; 0x2a
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f7fe fb39 	bl	8006350 <ld_word>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <find_volume+0x394>
 8007ce4:	230d      	movs	r3, #13
 8007ce6:	e0ae      	b.n	8007e46 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	891b      	ldrh	r3, [r3, #8]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <find_volume+0x3a0>
 8007cf0:	230d      	movs	r3, #13
 8007cf2:	e0a8      	b.n	8007e46 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	3334      	adds	r3, #52	; 0x34
 8007cf8:	332c      	adds	r3, #44	; 0x2c
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fe fb40 	bl	8006380 <ld_dword>
 8007d00:	4602      	mov	r2, r0
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0e:	e01f      	b.n	8007d50 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	891b      	ldrh	r3, [r3, #8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d101      	bne.n	8007d1c <find_volume+0x3c8>
 8007d18:	230d      	movs	r3, #13
 8007d1a:	e094      	b.n	8007e46 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d22:	441a      	add	r2, r3
 8007d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d26:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d103      	bne.n	8007d38 <find_volume+0x3e4>
 8007d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	e00a      	b.n	8007d4e <find_volume+0x3fa>
 8007d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d3a:	699a      	ldr	r2, [r3, #24]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	085a      	lsrs	r2, r3, #1
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007d4e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	69da      	ldr	r2, [r3, #28]
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	899b      	ldrh	r3, [r3, #12]
 8007d58:	4619      	mov	r1, r3
 8007d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5c:	440b      	add	r3, r1
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d62:	8989      	ldrh	r1, [r1, #12]
 8007d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d201      	bcs.n	8007d70 <find_volume+0x41c>
 8007d6c:	230d      	movs	r3, #13
 8007d6e:	e06a      	b.n	8007e46 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d72:	f04f 32ff 	mov.w	r2, #4294967295
 8007d76:	615a      	str	r2, [r3, #20]
 8007d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	2280      	movs	r2, #128	; 0x80
 8007d84:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007d86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d149      	bne.n	8007e22 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d90:	3334      	adds	r3, #52	; 0x34
 8007d92:	3330      	adds	r3, #48	; 0x30
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7fe fadb 	bl	8006350 <ld_word>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d140      	bne.n	8007e22 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da2:	3301      	adds	r3, #1
 8007da4:	4619      	mov	r1, r3
 8007da6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007da8:	f7fe fd82 	bl	80068b0 <move_window>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d137      	bne.n	8007e22 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2200      	movs	r2, #0
 8007db6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	3334      	adds	r3, #52	; 0x34
 8007dbc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fe fac5 	bl	8006350 <ld_word>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	461a      	mov	r2, r3
 8007dca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d127      	bne.n	8007e22 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	3334      	adds	r3, #52	; 0x34
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fad2 	bl	8006380 <ld_dword>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4a1c      	ldr	r2, [pc, #112]	; (8007e50 <find_volume+0x4fc>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d11e      	bne.n	8007e22 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	3334      	adds	r3, #52	; 0x34
 8007de8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7fe fac7 	bl	8006380 <ld_dword>
 8007df2:	4603      	mov	r3, r0
 8007df4:	4a17      	ldr	r2, [pc, #92]	; (8007e54 <find_volume+0x500>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d113      	bne.n	8007e22 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	3334      	adds	r3, #52	; 0x34
 8007dfe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fabc 	bl	8006380 <ld_dword>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e10:	3334      	adds	r3, #52	; 0x34
 8007e12:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7fe fab2 	bl	8006380 <ld_dword>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e20:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007e28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007e2a:	4b0b      	ldr	r3, [pc, #44]	; (8007e58 <find_volume+0x504>)
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	b29a      	uxth	r2, r3
 8007e32:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <find_volume+0x504>)
 8007e34:	801a      	strh	r2, [r3, #0]
 8007e36:	4b08      	ldr	r3, [pc, #32]	; (8007e58 <find_volume+0x504>)
 8007e38:	881a      	ldrh	r2, [r3, #0]
 8007e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007e3e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e40:	f7fe fcce 	bl	80067e0 <clear_lock>
#endif
	return FR_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3758      	adds	r7, #88	; 0x58
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	41615252 	.word	0x41615252
 8007e54:	61417272 	.word	0x61417272
 8007e58:	200002ac 	.word	0x200002ac

08007e5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007e66:	2309      	movs	r3, #9
 8007e68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01c      	beq.n	8007eaa <validate+0x4e>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d018      	beq.n	8007eaa <validate+0x4e>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d013      	beq.n	8007eaa <validate+0x4e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	889a      	ldrh	r2, [r3, #4]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	88db      	ldrh	r3, [r3, #6]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d10c      	bne.n	8007eaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe f9bc 	bl	8006214 <disk_status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <validate+0x4e>
			res = FR_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d102      	bne.n	8007eb6 <validate+0x5a>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	e000      	b.n	8007eb8 <validate+0x5c>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	6013      	str	r3, [r2, #0]
	return res;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3710      	adds	r7, #16
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007eda:	f107 0310 	add.w	r3, r7, #16
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fc9e 	bl	8007820 <get_ldnumber>
 8007ee4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da01      	bge.n	8007ef0 <f_mount+0x28>
 8007eec:	230b      	movs	r3, #11
 8007eee:	e02b      	b.n	8007f48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007ef0:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <f_mount+0x88>)
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007f00:	69b8      	ldr	r0, [r7, #24]
 8007f02:	f7fe fc6d 	bl	80067e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	490d      	ldr	r1, [pc, #52]	; (8007f50 <f_mount+0x88>)
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d002      	beq.n	8007f2e <f_mount+0x66>
 8007f28:	79fb      	ldrb	r3, [r7, #7]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d001      	beq.n	8007f32 <f_mount+0x6a>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e00a      	b.n	8007f48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007f32:	f107 010c 	add.w	r1, r7, #12
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff fd09 	bl	8007954 <find_volume>
 8007f42:	4603      	mov	r3, r0
 8007f44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	200002a8 	.word	0x200002a8

08007f54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b098      	sub	sp, #96	; 0x60
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <f_open+0x18>
 8007f68:	2309      	movs	r3, #9
 8007f6a:	e1bb      	b.n	80082e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007f74:	79fa      	ldrb	r2, [r7, #7]
 8007f76:	f107 0110 	add.w	r1, r7, #16
 8007f7a:	f107 0308 	add.w	r3, r7, #8
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fce8 	bl	8007954 <find_volume>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 819f 	bne.w	80082d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	f107 0314 	add.w	r3, r7, #20
 8007f9e:	4611      	mov	r1, r2
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7ff fbc7 	bl	8007734 <follow_path>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007fac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d11a      	bne.n	8007fea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007fb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007fb8:	b25b      	sxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	da03      	bge.n	8007fc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007fbe:	2306      	movs	r3, #6
 8007fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007fc4:	e011      	b.n	8007fea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007fc6:	79fb      	ldrb	r3, [r7, #7]
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	bf14      	ite	ne
 8007fd0:	2301      	movne	r3, #1
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f107 0314 	add.w	r3, r7, #20
 8007fdc:	4611      	mov	r1, r2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fab6 	bl	8006550 <chk_lock>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007fea:	79fb      	ldrb	r3, [r7, #7]
 8007fec:	f003 031c 	and.w	r3, r3, #28
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d07f      	beq.n	80080f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d017      	beq.n	800802c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007ffc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008000:	2b04      	cmp	r3, #4
 8008002:	d10e      	bne.n	8008022 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008004:	f7fe fb00 	bl	8006608 <enq_lock>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <f_open+0xc8>
 800800e:	f107 0314 	add.w	r3, r7, #20
 8008012:	4618      	mov	r0, r3
 8008014:	f7ff fa68 	bl	80074e8 <dir_register>
 8008018:	4603      	mov	r3, r0
 800801a:	e000      	b.n	800801e <f_open+0xca>
 800801c:	2312      	movs	r3, #18
 800801e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008022:	79fb      	ldrb	r3, [r7, #7]
 8008024:	f043 0308 	orr.w	r3, r3, #8
 8008028:	71fb      	strb	r3, [r7, #7]
 800802a:	e010      	b.n	800804e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800802c:	7ebb      	ldrb	r3, [r7, #26]
 800802e:	f003 0311 	and.w	r3, r3, #17
 8008032:	2b00      	cmp	r3, #0
 8008034:	d003      	beq.n	800803e <f_open+0xea>
					res = FR_DENIED;
 8008036:	2307      	movs	r3, #7
 8008038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800803c:	e007      	b.n	800804e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800803e:	79fb      	ldrb	r3, [r7, #7]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d002      	beq.n	800804e <f_open+0xfa>
 8008048:	2308      	movs	r3, #8
 800804a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800804e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008052:	2b00      	cmp	r3, #0
 8008054:	d168      	bne.n	8008128 <f_open+0x1d4>
 8008056:	79fb      	ldrb	r3, [r7, #7]
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	2b00      	cmp	r3, #0
 800805e:	d063      	beq.n	8008128 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008060:	f7fe f876 	bl	8006150 <get_fattime>
 8008064:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	330e      	adds	r3, #14
 800806a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800806c:	4618      	mov	r0, r3
 800806e:	f7fe f9c5 	bl	80063fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008074:	3316      	adds	r3, #22
 8008076:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008078:	4618      	mov	r0, r3
 800807a:	f7fe f9bf 	bl	80063fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800807e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008080:	330b      	adds	r3, #11
 8008082:	2220      	movs	r2, #32
 8008084:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800808a:	4611      	mov	r1, r2
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff f997 	bl	80073c0 <ld_clust>
 8008092:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008098:	2200      	movs	r2, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff f9af 	bl	80073fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80080a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a2:	331c      	adds	r3, #28
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe f9a8 	bl	80063fc <st_dword>
					fs->wflag = 1;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2201      	movs	r2, #1
 80080b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80080b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d037      	beq.n	8008128 <f_open+0x1d4>
						dw = fs->winsect;
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80080be:	f107 0314 	add.w	r3, r7, #20
 80080c2:	2200      	movs	r2, #0
 80080c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fe fe9f 	bl	8006e0a <remove_chain>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80080d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d126      	bne.n	8008128 <f_open+0x1d4>
							res = move_window(fs, dw);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80080de:	4618      	mov	r0, r3
 80080e0:	f7fe fbe6 	bl	80068b0 <move_window>
 80080e4:	4603      	mov	r3, r0
 80080e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80080ee:	3a01      	subs	r2, #1
 80080f0:	611a      	str	r2, [r3, #16]
 80080f2:	e019      	b.n	8008128 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80080f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d115      	bne.n	8008128 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80080fc:	7ebb      	ldrb	r3, [r7, #26]
 80080fe:	f003 0310 	and.w	r3, r3, #16
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008106:	2304      	movs	r3, #4
 8008108:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800810c:	e00c      	b.n	8008128 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <f_open+0x1d4>
 8008118:	7ebb      	ldrb	r3, [r7, #26]
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <f_open+0x1d4>
						res = FR_DENIED;
 8008122:	2307      	movs	r3, #7
 8008124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008128:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800812c:	2b00      	cmp	r3, #0
 800812e:	d128      	bne.n	8008182 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008130:	79fb      	ldrb	r3, [r7, #7]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008140:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800814a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008150:	79fb      	ldrb	r3, [r7, #7]
 8008152:	f023 0301 	bic.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf14      	ite	ne
 800815a:	2301      	movne	r3, #1
 800815c:	2300      	moveq	r3, #0
 800815e:	b2db      	uxtb	r3, r3
 8008160:	461a      	mov	r2, r3
 8008162:	f107 0314 	add.w	r3, r7, #20
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f7fe fa6f 	bl	800664c <inc_lock>
 800816e:	4602      	mov	r2, r0
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <f_open+0x22e>
 800817c:	2302      	movs	r3, #2
 800817e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 80a3 	bne.w	80082d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008190:	4611      	mov	r1, r2
 8008192:	4618      	mov	r0, r3
 8008194:	f7ff f914 	bl	80073c0 <ld_clust>
 8008198:	4602      	mov	r2, r0
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800819e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a0:	331c      	adds	r3, #28
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe f8ec 	bl	8006380 <ld_dword>
 80081a8:	4602      	mov	r2, r0
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	88da      	ldrh	r2, [r3, #6]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	79fa      	ldrb	r2, [r7, #7]
 80081c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	3330      	adds	r3, #48	; 0x30
 80081de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7fe f956 	bl	8006496 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80081ea:	79fb      	ldrb	r3, [r7, #7]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d06e      	beq.n	80082d2 <f_open+0x37e>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d06a      	beq.n	80082d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	895b      	ldrh	r3, [r3, #10]
 8008208:	461a      	mov	r2, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	899b      	ldrh	r3, [r3, #12]
 800820e:	fb03 f302 	mul.w	r3, r3, r2
 8008212:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	657b      	str	r3, [r7, #84]	; 0x54
 8008220:	e016      	b.n	8008250 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe fbff 	bl	8006a2a <get_fat>
 800822c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800822e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008230:	2b01      	cmp	r3, #1
 8008232:	d802      	bhi.n	800823a <f_open+0x2e6>
 8008234:	2302      	movs	r3, #2
 8008236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800823a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008240:	d102      	bne.n	8008248 <f_open+0x2f4>
 8008242:	2301      	movs	r3, #1
 8008244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800824a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	657b      	str	r3, [r7, #84]	; 0x54
 8008250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008254:	2b00      	cmp	r3, #0
 8008256:	d103      	bne.n	8008260 <f_open+0x30c>
 8008258:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800825a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800825c:	429a      	cmp	r2, r3
 800825e:	d8e0      	bhi.n	8008222 <f_open+0x2ce>
				}
				fp->clust = clst;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008264:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800826a:	2b00      	cmp	r3, #0
 800826c:	d131      	bne.n	80082d2 <f_open+0x37e>
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	899b      	ldrh	r3, [r3, #12]
 8008272:	461a      	mov	r2, r3
 8008274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008276:	fbb3 f1f2 	udiv	r1, r3, r2
 800827a:	fb02 f201 	mul.w	r2, r2, r1
 800827e:	1a9b      	subs	r3, r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d026      	beq.n	80082d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fbaf 	bl	80069ec <clust2sect>
 800828e:	6478      	str	r0, [r7, #68]	; 0x44
 8008290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <f_open+0x34a>
						res = FR_INT_ERR;
 8008296:	2302      	movs	r3, #2
 8008298:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800829c:	e019      	b.n	80082d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	899b      	ldrh	r3, [r3, #12]
 80082a2:	461a      	mov	r2, r3
 80082a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80082aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ac:	441a      	add	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	7858      	ldrb	r0, [r3, #1]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a1a      	ldr	r2, [r3, #32]
 80082c0:	2301      	movs	r3, #1
 80082c2:	f7fd ffe7 	bl	8006294 <disk_read>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d002      	beq.n	80082d2 <f_open+0x37e>
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80082d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <f_open+0x38c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80082e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3760      	adds	r7, #96	; 0x60
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08e      	sub	sp, #56	; 0x38
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2200      	movs	r2, #0
 8008302:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f107 0214 	add.w	r2, r7, #20
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff fda5 	bl	8007e5c <validate>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800831c:	2b00      	cmp	r3, #0
 800831e:	d107      	bne.n	8008330 <f_read+0x44>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	7d5b      	ldrb	r3, [r3, #21]
 8008324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <f_read+0x4a>
 8008330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008334:	e135      	b.n	80085a2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	7d1b      	ldrb	r3, [r3, #20]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <f_read+0x5a>
 8008342:	2307      	movs	r3, #7
 8008344:	e12d      	b.n	80085a2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68da      	ldr	r2, [r3, #12]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	429a      	cmp	r2, r3
 8008358:	f240 811e 	bls.w	8008598 <f_read+0x2ac>
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008360:	e11a      	b.n	8008598 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	8992      	ldrh	r2, [r2, #12]
 800836a:	fbb3 f1f2 	udiv	r1, r3, r2
 800836e:	fb02 f201 	mul.w	r2, r2, r1
 8008372:	1a9b      	subs	r3, r3, r2
 8008374:	2b00      	cmp	r3, #0
 8008376:	f040 80d5 	bne.w	8008524 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	699b      	ldr	r3, [r3, #24]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	8992      	ldrh	r2, [r2, #12]
 8008382:	fbb3 f3f2 	udiv	r3, r3, r2
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	8952      	ldrh	r2, [r2, #10]
 800838a:	3a01      	subs	r2, #1
 800838c:	4013      	ands	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d12f      	bne.n	80083f6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30
 80083a4:	e013      	b.n	80083ce <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d007      	beq.n	80083be <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	4619      	mov	r1, r3
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f7fe fe25 	bl	8007004 <clmt_clust>
 80083ba:	6338      	str	r0, [r7, #48]	; 0x30
 80083bc:	e007      	b.n	80083ce <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f7fe fb2f 	bl	8006a2a <get_fat>
 80083cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d804      	bhi.n	80083de <f_read+0xf2>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2202      	movs	r2, #2
 80083d8:	755a      	strb	r2, [r3, #21]
 80083da:	2302      	movs	r3, #2
 80083dc:	e0e1      	b.n	80085a2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e4:	d104      	bne.n	80083f0 <f_read+0x104>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	755a      	strb	r2, [r3, #21]
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0d8      	b.n	80085a2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	69db      	ldr	r3, [r3, #28]
 80083fc:	4619      	mov	r1, r3
 80083fe:	4610      	mov	r0, r2
 8008400:	f7fe faf4 	bl	80069ec <clust2sect>
 8008404:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d104      	bne.n	8008416 <f_read+0x12a>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2202      	movs	r2, #2
 8008410:	755a      	strb	r2, [r3, #21]
 8008412:	2302      	movs	r3, #2
 8008414:	e0c5      	b.n	80085a2 <f_read+0x2b6>
			sect += csect;
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	899b      	ldrh	r3, [r3, #12]
 8008422:	461a      	mov	r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	fbb3 f3f2 	udiv	r3, r3, r2
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	2b00      	cmp	r3, #0
 8008430:	d041      	beq.n	80084b6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	4413      	add	r3, r2
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	8952      	ldrh	r2, [r2, #10]
 800843c:	4293      	cmp	r3, r2
 800843e:	d905      	bls.n	800844c <f_read+0x160>
					cc = fs->csize - csect;
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	895b      	ldrh	r3, [r3, #10]
 8008444:	461a      	mov	r2, r3
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	7858      	ldrb	r0, [r3, #1]
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	69ba      	ldr	r2, [r7, #24]
 8008454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008456:	f7fd ff1d 	bl	8006294 <disk_read>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <f_read+0x17e>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2201      	movs	r2, #1
 8008464:	755a      	strb	r2, [r3, #21]
 8008466:	2301      	movs	r3, #1
 8008468:	e09b      	b.n	80085a2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	7d1b      	ldrb	r3, [r3, #20]
 800846e:	b25b      	sxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	da18      	bge.n	80084a6 <f_read+0x1ba>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6a1a      	ldr	r2, [r3, #32]
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	1ad3      	subs	r3, r2, r3
 800847c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800847e:	429a      	cmp	r2, r3
 8008480:	d911      	bls.n	80084a6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6a1a      	ldr	r2, [r3, #32]
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	8992      	ldrh	r2, [r2, #12]
 800848e:	fb02 f303 	mul.w	r3, r2, r3
 8008492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008494:	18d0      	adds	r0, r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	899b      	ldrh	r3, [r3, #12]
 80084a0:	461a      	mov	r2, r3
 80084a2:	f7fd ffd7 	bl	8006454 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	899b      	ldrh	r3, [r3, #12]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ae:	fb02 f303 	mul.w	r3, r2, r3
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80084b4:	e05c      	b.n	8008570 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	69ba      	ldr	r2, [r7, #24]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d02e      	beq.n	800851e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	7d1b      	ldrb	r3, [r3, #20]
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	da18      	bge.n	80084fc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	7858      	ldrb	r0, [r3, #1]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6a1a      	ldr	r2, [r3, #32]
 80084d8:	2301      	movs	r3, #1
 80084da:	f7fd fefb 	bl	80062d4 <disk_write>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d004      	beq.n	80084ee <f_read+0x202>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	755a      	strb	r2, [r3, #21]
 80084ea:	2301      	movs	r3, #1
 80084ec:	e059      	b.n	80085a2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	7d1b      	ldrb	r3, [r3, #20]
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	7858      	ldrb	r0, [r3, #1]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008506:	2301      	movs	r3, #1
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	f7fd fec3 	bl	8006294 <disk_read>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d004      	beq.n	800851e <f_read+0x232>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2201      	movs	r2, #1
 8008518:	755a      	strb	r2, [r3, #21]
 800851a:	2301      	movs	r3, #1
 800851c:	e041      	b.n	80085a2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	69ba      	ldr	r2, [r7, #24]
 8008522:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	899b      	ldrh	r3, [r3, #12]
 8008528:	4618      	mov	r0, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	8992      	ldrh	r2, [r2, #12]
 8008532:	fbb3 f1f2 	udiv	r1, r3, r2
 8008536:	fb02 f201 	mul.w	r2, r2, r1
 800853a:	1a9b      	subs	r3, r3, r2
 800853c:	1ac3      	subs	r3, r0, r3
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	429a      	cmp	r2, r3
 8008546:	d901      	bls.n	800854c <f_read+0x260>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	697a      	ldr	r2, [r7, #20]
 8008558:	8992      	ldrh	r2, [r2, #12]
 800855a:	fbb3 f0f2 	udiv	r0, r3, r2
 800855e:	fb02 f200 	mul.w	r2, r2, r0
 8008562:	1a9b      	subs	r3, r3, r2
 8008564:	440b      	add	r3, r1
 8008566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008568:	4619      	mov	r1, r3
 800856a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800856c:	f7fd ff72 	bl	8006454 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	4413      	add	r3, r2
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	441a      	add	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	619a      	str	r2, [r3, #24]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800858a:	441a      	add	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f47f aee1 	bne.w	8008362 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3738      	adds	r7, #56	; 0x38
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b08c      	sub	sp, #48	; 0x30
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	60f8      	str	r0, [r7, #12]
 80085b2:	60b9      	str	r1, [r7, #8]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f107 0210 	add.w	r2, r7, #16
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7ff fc46 	bl	8007e5c <validate>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d107      	bne.n	80085ee <f_write+0x44>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7d5b      	ldrb	r3, [r3, #21]
 80085e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <f_write+0x4a>
 80085ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80085f2:	e16a      	b.n	80088ca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7d1b      	ldrb	r3, [r3, #20]
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d101      	bne.n	8008604 <f_write+0x5a>
 8008600:	2307      	movs	r3, #7
 8008602:	e162      	b.n	80088ca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	441a      	add	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	429a      	cmp	r2, r3
 8008612:	f080 814c 	bcs.w	80088ae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	43db      	mvns	r3, r3
 800861c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800861e:	e146      	b.n	80088ae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	8992      	ldrh	r2, [r2, #12]
 8008628:	fbb3 f1f2 	udiv	r1, r3, r2
 800862c:	fb02 f201 	mul.w	r2, r2, r1
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	2b00      	cmp	r3, #0
 8008634:	f040 80f1 	bne.w	800881a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	8992      	ldrh	r2, [r2, #12]
 8008640:	fbb3 f3f2 	udiv	r3, r3, r2
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	8952      	ldrh	r2, [r2, #10]
 8008648:	3a01      	subs	r2, #1
 800864a:	4013      	ands	r3, r2
 800864c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d143      	bne.n	80086dc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10c      	bne.n	8008676 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	2b00      	cmp	r3, #0
 8008666:	d11a      	bne.n	800869e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2100      	movs	r1, #0
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fc31 	bl	8006ed4 <create_chain>
 8008672:	62b8      	str	r0, [r7, #40]	; 0x28
 8008674:	e013      	b.n	800869e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	699b      	ldr	r3, [r3, #24]
 8008682:	4619      	mov	r1, r3
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f7fe fcbd 	bl	8007004 <clmt_clust>
 800868a:	62b8      	str	r0, [r7, #40]	; 0x28
 800868c:	e007      	b.n	800869e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	69db      	ldr	r3, [r3, #28]
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f7fe fc1c 	bl	8006ed4 <create_chain>
 800869c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8109 	beq.w	80088b8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d104      	bne.n	80086b6 <f_write+0x10c>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2202      	movs	r2, #2
 80086b0:	755a      	strb	r2, [r3, #21]
 80086b2:	2302      	movs	r3, #2
 80086b4:	e109      	b.n	80088ca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d104      	bne.n	80086c8 <f_write+0x11e>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	755a      	strb	r2, [r3, #21]
 80086c4:	2301      	movs	r3, #1
 80086c6:	e100      	b.n	80088ca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <f_write+0x132>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	7d1b      	ldrb	r3, [r3, #20]
 80086e0:	b25b      	sxtb	r3, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	da18      	bge.n	8008718 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	7858      	ldrb	r0, [r3, #1]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6a1a      	ldr	r2, [r3, #32]
 80086f4:	2301      	movs	r3, #1
 80086f6:	f7fd fded 	bl	80062d4 <disk_write>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d004      	beq.n	800870a <f_write+0x160>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2201      	movs	r2, #1
 8008704:	755a      	strb	r2, [r3, #21]
 8008706:	2301      	movs	r3, #1
 8008708:	e0df      	b.n	80088ca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	7d1b      	ldrb	r3, [r3, #20]
 800870e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008712:	b2da      	uxtb	r2, r3
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	4619      	mov	r1, r3
 8008720:	4610      	mov	r0, r2
 8008722:	f7fe f963 	bl	80069ec <clust2sect>
 8008726:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d104      	bne.n	8008738 <f_write+0x18e>
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2202      	movs	r2, #2
 8008732:	755a      	strb	r2, [r3, #21]
 8008734:	2302      	movs	r3, #2
 8008736:	e0c8      	b.n	80088ca <f_write+0x320>
			sect += csect;
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	4413      	add	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	899b      	ldrh	r3, [r3, #12]
 8008744:	461a      	mov	r2, r3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	fbb3 f3f2 	udiv	r3, r3, r2
 800874c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d043      	beq.n	80087dc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	4413      	add	r3, r2
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	8952      	ldrh	r2, [r2, #10]
 800875e:	4293      	cmp	r3, r2
 8008760:	d905      	bls.n	800876e <f_write+0x1c4>
					cc = fs->csize - csect;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	895b      	ldrh	r3, [r3, #10]
 8008766:	461a      	mov	r2, r3
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	1ad3      	subs	r3, r2, r3
 800876c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	7858      	ldrb	r0, [r3, #1]
 8008772:	6a3b      	ldr	r3, [r7, #32]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	69f9      	ldr	r1, [r7, #28]
 8008778:	f7fd fdac 	bl	80062d4 <disk_write>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d004      	beq.n	800878c <f_write+0x1e2>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2201      	movs	r2, #1
 8008786:	755a      	strb	r2, [r3, #21]
 8008788:	2301      	movs	r3, #1
 800878a:	e09e      	b.n	80088ca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1a      	ldr	r2, [r3, #32]
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	429a      	cmp	r2, r3
 8008798:	d918      	bls.n	80087cc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6a1a      	ldr	r2, [r3, #32]
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	8992      	ldrh	r2, [r2, #12]
 80087ac:	fb02 f303 	mul.w	r3, r2, r3
 80087b0:	69fa      	ldr	r2, [r7, #28]
 80087b2:	18d1      	adds	r1, r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	899b      	ldrh	r3, [r3, #12]
 80087b8:	461a      	mov	r2, r3
 80087ba:	f7fd fe4b 	bl	8006454 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	7d1b      	ldrb	r3, [r3, #20]
 80087c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	899b      	ldrh	r3, [r3, #12]
 80087d0:	461a      	mov	r2, r3
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	fb02 f303 	mul.w	r3, r2, r3
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80087da:	e04b      	b.n	8008874 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d016      	beq.n	8008814 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	699a      	ldr	r2, [r3, #24]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d210      	bcs.n	8008814 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	7858      	ldrb	r0, [r3, #1]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087fc:	2301      	movs	r3, #1
 80087fe:	697a      	ldr	r2, [r7, #20]
 8008800:	f7fd fd48 	bl	8006294 <disk_read>
 8008804:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008806:	2b00      	cmp	r3, #0
 8008808:	d004      	beq.n	8008814 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	755a      	strb	r2, [r3, #21]
 8008810:	2301      	movs	r3, #1
 8008812:	e05a      	b.n	80088ca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	899b      	ldrh	r3, [r3, #12]
 800881e:	4618      	mov	r0, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	8992      	ldrh	r2, [r2, #12]
 8008828:	fbb3 f1f2 	udiv	r1, r3, r2
 800882c:	fb02 f201 	mul.w	r2, r2, r1
 8008830:	1a9b      	subs	r3, r3, r2
 8008832:	1ac3      	subs	r3, r0, r3
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	429a      	cmp	r2, r3
 800883c:	d901      	bls.n	8008842 <f_write+0x298>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	8992      	ldrh	r2, [r2, #12]
 8008850:	fbb3 f0f2 	udiv	r0, r3, r2
 8008854:	fb02 f200 	mul.w	r2, r2, r0
 8008858:	1a9b      	subs	r3, r3, r2
 800885a:	440b      	add	r3, r1
 800885c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800885e:	69f9      	ldr	r1, [r7, #28]
 8008860:	4618      	mov	r0, r3
 8008862:	f7fd fdf7 	bl	8006454 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	7d1b      	ldrb	r3, [r3, #20]
 800886a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800886e:	b2da      	uxtb	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	4413      	add	r3, r2
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	441a      	add	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	619a      	str	r2, [r3, #24]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	429a      	cmp	r2, r3
 8008892:	bf38      	it	cc
 8008894:	461a      	movcc	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	441a      	add	r2, r3
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f47f aeb5 	bne.w	8008620 <f_write+0x76>
 80088b6:	e000      	b.n	80088ba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80088b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	7d1b      	ldrb	r3, [r3, #20]
 80088be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3730      	adds	r7, #48	; 0x30
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b086      	sub	sp, #24
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f107 0208 	add.w	r2, r7, #8
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff faba 	bl	8007e5c <validate>
 80088e8:	4603      	mov	r3, r0
 80088ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80088ec:	7dfb      	ldrb	r3, [r7, #23]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d168      	bne.n	80089c4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d062      	beq.n	80089c4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	7d1b      	ldrb	r3, [r3, #20]
 8008902:	b25b      	sxtb	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	da15      	bge.n	8008934 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	7858      	ldrb	r0, [r3, #1]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a1a      	ldr	r2, [r3, #32]
 8008916:	2301      	movs	r3, #1
 8008918:	f7fd fcdc 	bl	80062d4 <disk_write>
 800891c:	4603      	mov	r3, r0
 800891e:	2b00      	cmp	r3, #0
 8008920:	d001      	beq.n	8008926 <f_sync+0x54>
 8008922:	2301      	movs	r3, #1
 8008924:	e04f      	b.n	80089c6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	7d1b      	ldrb	r3, [r3, #20]
 800892a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800892e:	b2da      	uxtb	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008934:	f7fd fc0c 	bl	8006150 <get_fattime>
 8008938:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f7fd ffb4 	bl	80068b0 <move_window>
 8008948:	4603      	mov	r3, r0
 800894a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d138      	bne.n	80089c4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	330b      	adds	r3, #11
 800895c:	781a      	ldrb	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	330b      	adds	r3, #11
 8008962:	f042 0220 	orr.w	r2, r2, #32
 8008966:	b2d2      	uxtb	r2, r2
 8008968:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6818      	ldr	r0, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	461a      	mov	r2, r3
 8008974:	68f9      	ldr	r1, [r7, #12]
 8008976:	f7fe fd42 	bl	80073fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f103 021c 	add.w	r2, r3, #28
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f7fd fd38 	bl	80063fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3316      	adds	r3, #22
 8008990:	6939      	ldr	r1, [r7, #16]
 8008992:	4618      	mov	r0, r3
 8008994:	f7fd fd32 	bl	80063fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3312      	adds	r3, #18
 800899c:	2100      	movs	r1, #0
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fd fd11 	bl	80063c6 <st_word>
					fs->wflag = 1;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2201      	movs	r2, #1
 80089a8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fd ffad 	bl	800690c <sync_fs>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	7d1b      	ldrb	r3, [r3, #20]
 80089ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b084      	sub	sp, #16
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7ff ff7b 	bl	80088d2 <f_sync>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d118      	bne.n	8008a18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f107 0208 	add.w	r2, r7, #8
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7ff fa34 	bl	8007e5c <validate>
 80089f4:	4603      	mov	r3, r0
 80089f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d10c      	bne.n	8008a18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7fd feb0 	bl	8006768 <dec_lock>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d102      	bne.n	8008a18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b090      	sub	sp, #64	; 0x40
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f107 0208 	add.w	r2, r7, #8
 8008a32:	4611      	mov	r1, r2
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7ff fa11 	bl	8007e5c <validate>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008a40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d103      	bne.n	8008a50 <f_lseek+0x2e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	7d5b      	ldrb	r3, [r3, #21]
 8008a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008a50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <f_lseek+0x3c>
 8008a58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008a5c:	e201      	b.n	8008e62 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80d9 	beq.w	8008c1a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d15a      	bne.n	8008b26 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a74:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a78:	1d1a      	adds	r2, r3, #4
 8008a7a:	627a      	str	r2, [r7, #36]	; 0x24
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	617b      	str	r3, [r7, #20]
 8008a80:	2302      	movs	r3, #2
 8008a82:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d03a      	beq.n	8008b06 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	2300      	movs	r3, #0
 8008a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	3302      	adds	r3, #2
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fd ffbc 	bl	8006a2a <get_fat>
 8008ab2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d804      	bhi.n	8008ac4 <f_lseek+0xa2>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	755a      	strb	r2, [r3, #21]
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e1ce      	b.n	8008e62 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d104      	bne.n	8008ad6 <f_lseek+0xb4>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	755a      	strb	r2, [r3, #21]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e1c5      	b.n	8008e62 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d0de      	beq.n	8008a9e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d809      	bhi.n	8008afc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	627a      	str	r2, [r7, #36]	; 0x24
 8008aee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008af0:	601a      	str	r2, [r3, #0]
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	1d1a      	adds	r2, r3, #4
 8008af6:	627a      	str	r2, [r7, #36]	; 0x24
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d3c4      	bcc.n	8008a90 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d803      	bhi.n	8008b1e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
 8008b1c:	e19f      	b.n	8008e5e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008b1e:	2311      	movs	r3, #17
 8008b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008b24:	e19b      	b.n	8008e5e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d902      	bls.n	8008b36 <f_lseek+0x114>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f000 818d 	beq.w	8008e5e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7fe fa5a 	bl	8007004 <clmt_clust>
 8008b50:	4602      	mov	r2, r0
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f7fd ff44 	bl	80069ec <clust2sect>
 8008b64:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <f_lseek+0x154>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	755a      	strb	r2, [r3, #21]
 8008b72:	2302      	movs	r3, #2
 8008b74:	e175      	b.n	8008e62 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	8992      	ldrh	r2, [r2, #12]
 8008b7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b82:	68ba      	ldr	r2, [r7, #8]
 8008b84:	8952      	ldrh	r2, [r2, #10]
 8008b86:	3a01      	subs	r2, #1
 8008b88:	4013      	ands	r3, r2
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	8992      	ldrh	r2, [r2, #12]
 8008b98:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b9c:	fb02 f201 	mul.w	r2, r2, r1
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 815b 	beq.w	8008e5e <f_lseek+0x43c>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	f000 8155 	beq.w	8008e5e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	7d1b      	ldrb	r3, [r3, #20]
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da18      	bge.n	8008bf0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	7858      	ldrb	r0, [r3, #1]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f7fd fb81 	bl	80062d4 <disk_write>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d004      	beq.n	8008be2 <f_lseek+0x1c0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	755a      	strb	r2, [r3, #21]
 8008bde:	2301      	movs	r3, #1
 8008be0:	e13f      	b.n	8008e62 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7d1b      	ldrb	r3, [r3, #20]
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	7858      	ldrb	r0, [r3, #1]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	69ba      	ldr	r2, [r7, #24]
 8008bfe:	f7fd fb49 	bl	8006294 <disk_read>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <f_lseek+0x1f0>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	755a      	strb	r2, [r3, #21]
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e127      	b.n	8008e62 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69ba      	ldr	r2, [r7, #24]
 8008c16:	621a      	str	r2, [r3, #32]
 8008c18:	e121      	b.n	8008e5e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d908      	bls.n	8008c36 <f_lseek+0x214>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	7d1b      	ldrb	r3, [r3, #20]
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d102      	bne.n	8008c36 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c44:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80b5 	beq.w	8008db8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	895b      	ldrh	r3, [r3, #10]
 8008c52:	461a      	mov	r2, r3
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	899b      	ldrh	r3, [r3, #12]
 8008c58:	fb03 f302 	mul.w	r3, r3, r2
 8008c5c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01b      	beq.n	8008c9c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	1e5a      	subs	r2, r3, #1
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c6e:	6a3b      	ldr	r3, [r7, #32]
 8008c70:	1e59      	subs	r1, r3, #1
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d30f      	bcc.n	8008c9c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	425b      	negs	r3, r3
 8008c84:	401a      	ands	r2, r3
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69db      	ldr	r3, [r3, #28]
 8008c98:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c9a:	e022      	b.n	8008ce2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d119      	bne.n	8008cdc <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2100      	movs	r1, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7fe f911 	bl	8006ed4 <create_chain>
 8008cb2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d104      	bne.n	8008cc4 <f_lseek+0x2a2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	755a      	strb	r2, [r3, #21]
 8008cc0:	2302      	movs	r3, #2
 8008cc2:	e0ce      	b.n	8008e62 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cca:	d104      	bne.n	8008cd6 <f_lseek+0x2b4>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	755a      	strb	r2, [r3, #21]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e0c5      	b.n	8008e62 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cda:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ce0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d067      	beq.n	8008db8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8008ce8:	e03a      	b.n	8008d60 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	603b      	str	r3, [r7, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	699a      	ldr	r2, [r3, #24]
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	441a      	add	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7d1b      	ldrb	r3, [r3, #20]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d00b      	beq.n	8008d22 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe f8e0 	bl	8006ed4 <create_chain>
 8008d14:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d108      	bne.n	8008d2e <f_lseek+0x30c>
							ofs = 0; break;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	e022      	b.n	8008d68 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fd fe7f 	bl	8006a2a <get_fat>
 8008d2c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d34:	d104      	bne.n	8008d40 <f_lseek+0x31e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	755a      	strb	r2, [r3, #21]
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e090      	b.n	8008e62 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d904      	bls.n	8008d50 <f_lseek+0x32e>
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	699b      	ldr	r3, [r3, #24]
 8008d4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d304      	bcc.n	8008d5a <f_lseek+0x338>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	755a      	strb	r2, [r3, #21]
 8008d56:	2302      	movs	r3, #2
 8008d58:	e083      	b.n	8008e62 <f_lseek+0x440>
					fp->clust = clst;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d5e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d8c0      	bhi.n	8008cea <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699a      	ldr	r2, [r3, #24]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	441a      	add	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	899b      	ldrh	r3, [r3, #12]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d80:	fb02 f201 	mul.w	r2, r2, r1
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d016      	beq.n	8008db8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fd fe2c 	bl	80069ec <clust2sect>
 8008d94:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d104      	bne.n	8008da6 <f_lseek+0x384>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	755a      	strb	r2, [r3, #21]
 8008da2:	2302      	movs	r3, #2
 8008da4:	e05d      	b.n	8008e62 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	899b      	ldrh	r3, [r3, #12]
 8008daa:	461a      	mov	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008db4:	4413      	add	r3, r2
 8008db6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	699a      	ldr	r2, [r3, #24]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d90a      	bls.n	8008dda <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7d1b      	ldrb	r3, [r3, #20]
 8008dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	8992      	ldrh	r2, [r2, #12]
 8008de2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008de6:	fb02 f201 	mul.w	r2, r2, r1
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d036      	beq.n	8008e5e <f_lseek+0x43c>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a1b      	ldr	r3, [r3, #32]
 8008df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d031      	beq.n	8008e5e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	7d1b      	ldrb	r3, [r3, #20]
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	da18      	bge.n	8008e36 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	7858      	ldrb	r0, [r3, #1]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1a      	ldr	r2, [r3, #32]
 8008e12:	2301      	movs	r3, #1
 8008e14:	f7fd fa5e 	bl	80062d4 <disk_write>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <f_lseek+0x406>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	755a      	strb	r2, [r3, #21]
 8008e24:	2301      	movs	r3, #1
 8008e26:	e01c      	b.n	8008e62 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7d1b      	ldrb	r3, [r3, #20]
 8008e2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	7858      	ldrb	r0, [r3, #1]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e40:	2301      	movs	r3, #1
 8008e42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e44:	f7fd fa26 	bl	8006294 <disk_read>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <f_lseek+0x436>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	755a      	strb	r2, [r3, #21]
 8008e54:	2301      	movs	r3, #1
 8008e56:	e004      	b.n	8008e62 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e5c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008e5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3740      	adds	r7, #64	; 0x40
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	b090      	sub	sp, #64	; 0x40
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008e74:	f107 010c 	add.w	r1, r7, #12
 8008e78:	1d3b      	adds	r3, r7, #4
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fe fd69 	bl	8007954 <find_volume>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008e88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11f      	bne.n	8008ed0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	f107 030c 	add.w	r3, r7, #12
 8008e96:	4611      	mov	r1, r2
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7fe fc4b 	bl	8007734 <follow_path>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008ea4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d111      	bne.n	8008ed0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008eac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008eb0:	b25b      	sxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	da03      	bge.n	8008ebe <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008eb6:	2306      	movs	r3, #6
 8008eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ebc:	e008      	b.n	8008ed0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <f_stat+0x66>
 8008ec4:	f107 030c 	add.w	r3, r7, #12
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fb3e 	bl	800754c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008ed0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3740      	adds	r7, #64	; 0x40
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
 8008ee4:	460b      	mov	r3, r1
 8008ee6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	2b0a      	cmp	r3, #10
 8008eec:	d103      	bne.n	8008ef6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008eee:	210d      	movs	r1, #13
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff fff3 	bl	8008edc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	db25      	blt.n	8008f4e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	1c5a      	adds	r2, r3, #1
 8008f06:	60fa      	str	r2, [r7, #12]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2b3c      	cmp	r3, #60	; 0x3c
 8008f14:	dd12      	ble.n	8008f3c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6818      	ldr	r0, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f103 010c 	add.w	r1, r3, #12
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	f7ff fb40 	bl	80085aa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d101      	bne.n	8008f36 <putc_bfd+0x5a>
 8008f32:	2300      	movs	r3, #0
 8008f34:	e001      	b.n	8008f3a <putc_bfd+0x5e>
 8008f36:	f04f 33ff 	mov.w	r3, #4294967295
 8008f3a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	609a      	str	r2, [r3, #8]
 8008f4c:	e000      	b.n	8008f50 <putc_bfd+0x74>
	if (i < 0) return;
 8008f4e:	bf00      	nop
}
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	db16      	blt.n	8008f94 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6818      	ldr	r0, [r3, #0]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f103 010c 	add.w	r1, r3, #12
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	461a      	mov	r2, r3
 8008f76:	f107 030c 	add.w	r3, r7, #12
 8008f7a:	f7ff fb16 	bl	80085aa <f_write>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d107      	bne.n	8008f94 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d102      	bne.n	8008f94 <putc_flush+0x3e>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	e001      	b.n	8008f98 <putc_flush+0x42>
	return EOF;
 8008f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3710      	adds	r7, #16
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}

08008fa0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	683a      	ldr	r2, [r7, #0]
 8008fae:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	605a      	str	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	609a      	str	r2, [r3, #8]
}
 8008fbe:	bf00      	nop
 8008fc0:	370c      	adds	r7, #12
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b096      	sub	sp, #88	; 0x58
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
 8008fd2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008fd4:	f107 030c 	add.w	r3, r7, #12
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff ffe0 	bl	8008fa0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008fe0:	e009      	b.n	8008ff6 <f_puts+0x2c>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	781a      	ldrb	r2, [r3, #0]
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7ff ff73 	bl	8008edc <putc_bfd>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f1      	bne.n	8008fe2 <f_puts+0x18>
	return putc_flush(&pb);
 8008ffe:	f107 030c 	add.w	r3, r7, #12
 8009002:	4618      	mov	r0, r3
 8009004:	f7ff ffa7 	bl	8008f56 <putc_flush>
 8009008:	4603      	mov	r3, r0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3758      	adds	r7, #88	; 0x58
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800902a:	4b1f      	ldr	r3, [pc, #124]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800902c:	7a5b      	ldrb	r3, [r3, #9]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d131      	bne.n	8009098 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009036:	7a5b      	ldrb	r3, [r3, #9]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800903e:	2100      	movs	r1, #0
 8009040:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009044:	7a5b      	ldrb	r3, [r3, #9]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009052:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009054:	7a5b      	ldrb	r3, [r3, #9]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800905c:	4413      	add	r3, r2
 800905e:	79fa      	ldrb	r2, [r7, #7]
 8009060:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009064:	7a5b      	ldrb	r3, [r3, #9]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	b2d1      	uxtb	r1, r2
 800906c:	4a0e      	ldr	r2, [pc, #56]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800906e:	7251      	strb	r1, [r2, #9]
 8009070:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009072:	7dbb      	ldrb	r3, [r7, #22]
 8009074:	3330      	adds	r3, #48	; 0x30
 8009076:	b2da      	uxtb	r2, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3301      	adds	r3, #1
 8009080:	223a      	movs	r2, #58	; 0x3a
 8009082:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	3302      	adds	r3, #2
 8009088:	222f      	movs	r2, #47	; 0x2f
 800908a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3303      	adds	r3, #3
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009098:	7dfb      	ldrb	r3, [r7, #23]
}
 800909a:	4618      	mov	r0, r3
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	200002d0 	.word	0x200002d0

080090ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090b6:	2200      	movs	r2, #0
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff ffaa 	bl	8009014 <FATFS_LinkDriverEx>
 80090c0:	4603      	mov	r3, r0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000024 	.word	0x20000024

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f002 fec2 	bl	800be74 <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	0800c3d4 	.word	0x0800c3d4
 8009114:	0800c3d4 	.word	0x0800c3d4
 8009118:	0800c3d4 	.word	0x0800c3d4
 800911c:	0800c3d8 	.word	0x0800c3d8

08009120 <memset>:
 8009120:	4402      	add	r2, r0
 8009122:	4603      	mov	r3, r0
 8009124:	4293      	cmp	r3, r2
 8009126:	d100      	bne.n	800912a <memset+0xa>
 8009128:	4770      	bx	lr
 800912a:	f803 1b01 	strb.w	r1, [r3], #1
 800912e:	e7f9      	b.n	8009124 <memset+0x4>

08009130 <__cvt>:
 8009130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	ec55 4b10 	vmov	r4, r5, d0
 8009138:	2d00      	cmp	r5, #0
 800913a:	460e      	mov	r6, r1
 800913c:	4619      	mov	r1, r3
 800913e:	462b      	mov	r3, r5
 8009140:	bfbb      	ittet	lt
 8009142:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009146:	461d      	movlt	r5, r3
 8009148:	2300      	movge	r3, #0
 800914a:	232d      	movlt	r3, #45	; 0x2d
 800914c:	700b      	strb	r3, [r1, #0]
 800914e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009150:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009154:	4691      	mov	r9, r2
 8009156:	f023 0820 	bic.w	r8, r3, #32
 800915a:	bfbc      	itt	lt
 800915c:	4622      	movlt	r2, r4
 800915e:	4614      	movlt	r4, r2
 8009160:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009164:	d005      	beq.n	8009172 <__cvt+0x42>
 8009166:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800916a:	d100      	bne.n	800916e <__cvt+0x3e>
 800916c:	3601      	adds	r6, #1
 800916e:	2102      	movs	r1, #2
 8009170:	e000      	b.n	8009174 <__cvt+0x44>
 8009172:	2103      	movs	r1, #3
 8009174:	ab03      	add	r3, sp, #12
 8009176:	9301      	str	r3, [sp, #4]
 8009178:	ab02      	add	r3, sp, #8
 800917a:	9300      	str	r3, [sp, #0]
 800917c:	ec45 4b10 	vmov	d0, r4, r5
 8009180:	4653      	mov	r3, sl
 8009182:	4632      	mov	r2, r6
 8009184:	f000 fcf8 	bl	8009b78 <_dtoa_r>
 8009188:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800918c:	4607      	mov	r7, r0
 800918e:	d102      	bne.n	8009196 <__cvt+0x66>
 8009190:	f019 0f01 	tst.w	r9, #1
 8009194:	d022      	beq.n	80091dc <__cvt+0xac>
 8009196:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800919a:	eb07 0906 	add.w	r9, r7, r6
 800919e:	d110      	bne.n	80091c2 <__cvt+0x92>
 80091a0:	783b      	ldrb	r3, [r7, #0]
 80091a2:	2b30      	cmp	r3, #48	; 0x30
 80091a4:	d10a      	bne.n	80091bc <__cvt+0x8c>
 80091a6:	2200      	movs	r2, #0
 80091a8:	2300      	movs	r3, #0
 80091aa:	4620      	mov	r0, r4
 80091ac:	4629      	mov	r1, r5
 80091ae:	f7f7 fcab 	bl	8000b08 <__aeabi_dcmpeq>
 80091b2:	b918      	cbnz	r0, 80091bc <__cvt+0x8c>
 80091b4:	f1c6 0601 	rsb	r6, r6, #1
 80091b8:	f8ca 6000 	str.w	r6, [sl]
 80091bc:	f8da 3000 	ldr.w	r3, [sl]
 80091c0:	4499      	add	r9, r3
 80091c2:	2200      	movs	r2, #0
 80091c4:	2300      	movs	r3, #0
 80091c6:	4620      	mov	r0, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7f7 fc9d 	bl	8000b08 <__aeabi_dcmpeq>
 80091ce:	b108      	cbz	r0, 80091d4 <__cvt+0xa4>
 80091d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80091d4:	2230      	movs	r2, #48	; 0x30
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	454b      	cmp	r3, r9
 80091da:	d307      	bcc.n	80091ec <__cvt+0xbc>
 80091dc:	9b03      	ldr	r3, [sp, #12]
 80091de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091e0:	1bdb      	subs	r3, r3, r7
 80091e2:	4638      	mov	r0, r7
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	b004      	add	sp, #16
 80091e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ec:	1c59      	adds	r1, r3, #1
 80091ee:	9103      	str	r1, [sp, #12]
 80091f0:	701a      	strb	r2, [r3, #0]
 80091f2:	e7f0      	b.n	80091d6 <__cvt+0xa6>

080091f4 <__exponent>:
 80091f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091f6:	4603      	mov	r3, r0
 80091f8:	2900      	cmp	r1, #0
 80091fa:	bfb8      	it	lt
 80091fc:	4249      	neglt	r1, r1
 80091fe:	f803 2b02 	strb.w	r2, [r3], #2
 8009202:	bfb4      	ite	lt
 8009204:	222d      	movlt	r2, #45	; 0x2d
 8009206:	222b      	movge	r2, #43	; 0x2b
 8009208:	2909      	cmp	r1, #9
 800920a:	7042      	strb	r2, [r0, #1]
 800920c:	dd2a      	ble.n	8009264 <__exponent+0x70>
 800920e:	f10d 0407 	add.w	r4, sp, #7
 8009212:	46a4      	mov	ip, r4
 8009214:	270a      	movs	r7, #10
 8009216:	46a6      	mov	lr, r4
 8009218:	460a      	mov	r2, r1
 800921a:	fb91 f6f7 	sdiv	r6, r1, r7
 800921e:	fb07 1516 	mls	r5, r7, r6, r1
 8009222:	3530      	adds	r5, #48	; 0x30
 8009224:	2a63      	cmp	r2, #99	; 0x63
 8009226:	f104 34ff 	add.w	r4, r4, #4294967295
 800922a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800922e:	4631      	mov	r1, r6
 8009230:	dcf1      	bgt.n	8009216 <__exponent+0x22>
 8009232:	3130      	adds	r1, #48	; 0x30
 8009234:	f1ae 0502 	sub.w	r5, lr, #2
 8009238:	f804 1c01 	strb.w	r1, [r4, #-1]
 800923c:	1c44      	adds	r4, r0, #1
 800923e:	4629      	mov	r1, r5
 8009240:	4561      	cmp	r1, ip
 8009242:	d30a      	bcc.n	800925a <__exponent+0x66>
 8009244:	f10d 0209 	add.w	r2, sp, #9
 8009248:	eba2 020e 	sub.w	r2, r2, lr
 800924c:	4565      	cmp	r5, ip
 800924e:	bf88      	it	hi
 8009250:	2200      	movhi	r2, #0
 8009252:	4413      	add	r3, r2
 8009254:	1a18      	subs	r0, r3, r0
 8009256:	b003      	add	sp, #12
 8009258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800925a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800925e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009262:	e7ed      	b.n	8009240 <__exponent+0x4c>
 8009264:	2330      	movs	r3, #48	; 0x30
 8009266:	3130      	adds	r1, #48	; 0x30
 8009268:	7083      	strb	r3, [r0, #2]
 800926a:	70c1      	strb	r1, [r0, #3]
 800926c:	1d03      	adds	r3, r0, #4
 800926e:	e7f1      	b.n	8009254 <__exponent+0x60>

08009270 <_printf_float>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	ed2d 8b02 	vpush	{d8}
 8009278:	b08d      	sub	sp, #52	; 0x34
 800927a:	460c      	mov	r4, r1
 800927c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009280:	4616      	mov	r6, r2
 8009282:	461f      	mov	r7, r3
 8009284:	4605      	mov	r5, r0
 8009286:	f001 fa63 	bl	800a750 <_localeconv_r>
 800928a:	f8d0 a000 	ldr.w	sl, [r0]
 800928e:	4650      	mov	r0, sl
 8009290:	f7f6 ffbe 	bl	8000210 <strlen>
 8009294:	2300      	movs	r3, #0
 8009296:	930a      	str	r3, [sp, #40]	; 0x28
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	9305      	str	r3, [sp, #20]
 800929c:	f8d8 3000 	ldr.w	r3, [r8]
 80092a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80092a4:	3307      	adds	r3, #7
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	f103 0208 	add.w	r2, r3, #8
 80092ae:	f8c8 2000 	str.w	r2, [r8]
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80092ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80092be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80092c2:	9307      	str	r3, [sp, #28]
 80092c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80092c8:	ee08 0a10 	vmov	s16, r0
 80092cc:	4b9f      	ldr	r3, [pc, #636]	; (800954c <_printf_float+0x2dc>)
 80092ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	f7f7 fc49 	bl	8000b6c <__aeabi_dcmpun>
 80092da:	bb88      	cbnz	r0, 8009340 <_printf_float+0xd0>
 80092dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80092e0:	4b9a      	ldr	r3, [pc, #616]	; (800954c <_printf_float+0x2dc>)
 80092e2:	f04f 32ff 	mov.w	r2, #4294967295
 80092e6:	f7f7 fc23 	bl	8000b30 <__aeabi_dcmple>
 80092ea:	bb48      	cbnz	r0, 8009340 <_printf_float+0xd0>
 80092ec:	2200      	movs	r2, #0
 80092ee:	2300      	movs	r3, #0
 80092f0:	4640      	mov	r0, r8
 80092f2:	4649      	mov	r1, r9
 80092f4:	f7f7 fc12 	bl	8000b1c <__aeabi_dcmplt>
 80092f8:	b110      	cbz	r0, 8009300 <_printf_float+0x90>
 80092fa:	232d      	movs	r3, #45	; 0x2d
 80092fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009300:	4b93      	ldr	r3, [pc, #588]	; (8009550 <_printf_float+0x2e0>)
 8009302:	4894      	ldr	r0, [pc, #592]	; (8009554 <_printf_float+0x2e4>)
 8009304:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009308:	bf94      	ite	ls
 800930a:	4698      	movls	r8, r3
 800930c:	4680      	movhi	r8, r0
 800930e:	2303      	movs	r3, #3
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	9b05      	ldr	r3, [sp, #20]
 8009314:	f023 0204 	bic.w	r2, r3, #4
 8009318:	6022      	str	r2, [r4, #0]
 800931a:	f04f 0900 	mov.w	r9, #0
 800931e:	9700      	str	r7, [sp, #0]
 8009320:	4633      	mov	r3, r6
 8009322:	aa0b      	add	r2, sp, #44	; 0x2c
 8009324:	4621      	mov	r1, r4
 8009326:	4628      	mov	r0, r5
 8009328:	f000 f9d8 	bl	80096dc <_printf_common>
 800932c:	3001      	adds	r0, #1
 800932e:	f040 8090 	bne.w	8009452 <_printf_float+0x1e2>
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	b00d      	add	sp, #52	; 0x34
 8009338:	ecbd 8b02 	vpop	{d8}
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	4642      	mov	r2, r8
 8009342:	464b      	mov	r3, r9
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f7 fc10 	bl	8000b6c <__aeabi_dcmpun>
 800934c:	b140      	cbz	r0, 8009360 <_printf_float+0xf0>
 800934e:	464b      	mov	r3, r9
 8009350:	2b00      	cmp	r3, #0
 8009352:	bfbc      	itt	lt
 8009354:	232d      	movlt	r3, #45	; 0x2d
 8009356:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800935a:	487f      	ldr	r0, [pc, #508]	; (8009558 <_printf_float+0x2e8>)
 800935c:	4b7f      	ldr	r3, [pc, #508]	; (800955c <_printf_float+0x2ec>)
 800935e:	e7d1      	b.n	8009304 <_printf_float+0x94>
 8009360:	6863      	ldr	r3, [r4, #4]
 8009362:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009366:	9206      	str	r2, [sp, #24]
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	d13f      	bne.n	80093ec <_printf_float+0x17c>
 800936c:	2306      	movs	r3, #6
 800936e:	6063      	str	r3, [r4, #4]
 8009370:	9b05      	ldr	r3, [sp, #20]
 8009372:	6861      	ldr	r1, [r4, #4]
 8009374:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009378:	2300      	movs	r3, #0
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	ab0a      	add	r3, sp, #40	; 0x28
 800937e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009382:	ab09      	add	r3, sp, #36	; 0x24
 8009384:	ec49 8b10 	vmov	d0, r8, r9
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	6022      	str	r2, [r4, #0]
 800938c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009390:	4628      	mov	r0, r5
 8009392:	f7ff fecd 	bl	8009130 <__cvt>
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	9909      	ldr	r1, [sp, #36]	; 0x24
 800939a:	2b47      	cmp	r3, #71	; 0x47
 800939c:	4680      	mov	r8, r0
 800939e:	d108      	bne.n	80093b2 <_printf_float+0x142>
 80093a0:	1cc8      	adds	r0, r1, #3
 80093a2:	db02      	blt.n	80093aa <_printf_float+0x13a>
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	4299      	cmp	r1, r3
 80093a8:	dd41      	ble.n	800942e <_printf_float+0x1be>
 80093aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80093ae:	fa5f fb8b 	uxtb.w	fp, fp
 80093b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80093b6:	d820      	bhi.n	80093fa <_printf_float+0x18a>
 80093b8:	3901      	subs	r1, #1
 80093ba:	465a      	mov	r2, fp
 80093bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80093c0:	9109      	str	r1, [sp, #36]	; 0x24
 80093c2:	f7ff ff17 	bl	80091f4 <__exponent>
 80093c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093c8:	1813      	adds	r3, r2, r0
 80093ca:	2a01      	cmp	r2, #1
 80093cc:	4681      	mov	r9, r0
 80093ce:	6123      	str	r3, [r4, #16]
 80093d0:	dc02      	bgt.n	80093d8 <_printf_float+0x168>
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	07d2      	lsls	r2, r2, #31
 80093d6:	d501      	bpl.n	80093dc <_printf_float+0x16c>
 80093d8:	3301      	adds	r3, #1
 80093da:	6123      	str	r3, [r4, #16]
 80093dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d09c      	beq.n	800931e <_printf_float+0xae>
 80093e4:	232d      	movs	r3, #45	; 0x2d
 80093e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ea:	e798      	b.n	800931e <_printf_float+0xae>
 80093ec:	9a06      	ldr	r2, [sp, #24]
 80093ee:	2a47      	cmp	r2, #71	; 0x47
 80093f0:	d1be      	bne.n	8009370 <_printf_float+0x100>
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1bc      	bne.n	8009370 <_printf_float+0x100>
 80093f6:	2301      	movs	r3, #1
 80093f8:	e7b9      	b.n	800936e <_printf_float+0xfe>
 80093fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80093fe:	d118      	bne.n	8009432 <_printf_float+0x1c2>
 8009400:	2900      	cmp	r1, #0
 8009402:	6863      	ldr	r3, [r4, #4]
 8009404:	dd0b      	ble.n	800941e <_printf_float+0x1ae>
 8009406:	6121      	str	r1, [r4, #16]
 8009408:	b913      	cbnz	r3, 8009410 <_printf_float+0x1a0>
 800940a:	6822      	ldr	r2, [r4, #0]
 800940c:	07d0      	lsls	r0, r2, #31
 800940e:	d502      	bpl.n	8009416 <_printf_float+0x1a6>
 8009410:	3301      	adds	r3, #1
 8009412:	440b      	add	r3, r1
 8009414:	6123      	str	r3, [r4, #16]
 8009416:	65a1      	str	r1, [r4, #88]	; 0x58
 8009418:	f04f 0900 	mov.w	r9, #0
 800941c:	e7de      	b.n	80093dc <_printf_float+0x16c>
 800941e:	b913      	cbnz	r3, 8009426 <_printf_float+0x1b6>
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	07d2      	lsls	r2, r2, #31
 8009424:	d501      	bpl.n	800942a <_printf_float+0x1ba>
 8009426:	3302      	adds	r3, #2
 8009428:	e7f4      	b.n	8009414 <_printf_float+0x1a4>
 800942a:	2301      	movs	r3, #1
 800942c:	e7f2      	b.n	8009414 <_printf_float+0x1a4>
 800942e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009434:	4299      	cmp	r1, r3
 8009436:	db05      	blt.n	8009444 <_printf_float+0x1d4>
 8009438:	6823      	ldr	r3, [r4, #0]
 800943a:	6121      	str	r1, [r4, #16]
 800943c:	07d8      	lsls	r0, r3, #31
 800943e:	d5ea      	bpl.n	8009416 <_printf_float+0x1a6>
 8009440:	1c4b      	adds	r3, r1, #1
 8009442:	e7e7      	b.n	8009414 <_printf_float+0x1a4>
 8009444:	2900      	cmp	r1, #0
 8009446:	bfd4      	ite	le
 8009448:	f1c1 0202 	rsble	r2, r1, #2
 800944c:	2201      	movgt	r2, #1
 800944e:	4413      	add	r3, r2
 8009450:	e7e0      	b.n	8009414 <_printf_float+0x1a4>
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	055a      	lsls	r2, r3, #21
 8009456:	d407      	bmi.n	8009468 <_printf_float+0x1f8>
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	4642      	mov	r2, r8
 800945c:	4631      	mov	r1, r6
 800945e:	4628      	mov	r0, r5
 8009460:	47b8      	blx	r7
 8009462:	3001      	adds	r0, #1
 8009464:	d12c      	bne.n	80094c0 <_printf_float+0x250>
 8009466:	e764      	b.n	8009332 <_printf_float+0xc2>
 8009468:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800946c:	f240 80e0 	bls.w	8009630 <_printf_float+0x3c0>
 8009470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009474:	2200      	movs	r2, #0
 8009476:	2300      	movs	r3, #0
 8009478:	f7f7 fb46 	bl	8000b08 <__aeabi_dcmpeq>
 800947c:	2800      	cmp	r0, #0
 800947e:	d034      	beq.n	80094ea <_printf_float+0x27a>
 8009480:	4a37      	ldr	r2, [pc, #220]	; (8009560 <_printf_float+0x2f0>)
 8009482:	2301      	movs	r3, #1
 8009484:	4631      	mov	r1, r6
 8009486:	4628      	mov	r0, r5
 8009488:	47b8      	blx	r7
 800948a:	3001      	adds	r0, #1
 800948c:	f43f af51 	beq.w	8009332 <_printf_float+0xc2>
 8009490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009494:	429a      	cmp	r2, r3
 8009496:	db02      	blt.n	800949e <_printf_float+0x22e>
 8009498:	6823      	ldr	r3, [r4, #0]
 800949a:	07d8      	lsls	r0, r3, #31
 800949c:	d510      	bpl.n	80094c0 <_printf_float+0x250>
 800949e:	ee18 3a10 	vmov	r3, s16
 80094a2:	4652      	mov	r2, sl
 80094a4:	4631      	mov	r1, r6
 80094a6:	4628      	mov	r0, r5
 80094a8:	47b8      	blx	r7
 80094aa:	3001      	adds	r0, #1
 80094ac:	f43f af41 	beq.w	8009332 <_printf_float+0xc2>
 80094b0:	f04f 0800 	mov.w	r8, #0
 80094b4:	f104 091a 	add.w	r9, r4, #26
 80094b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ba:	3b01      	subs	r3, #1
 80094bc:	4543      	cmp	r3, r8
 80094be:	dc09      	bgt.n	80094d4 <_printf_float+0x264>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	079b      	lsls	r3, r3, #30
 80094c4:	f100 8105 	bmi.w	80096d2 <_printf_float+0x462>
 80094c8:	68e0      	ldr	r0, [r4, #12]
 80094ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094cc:	4298      	cmp	r0, r3
 80094ce:	bfb8      	it	lt
 80094d0:	4618      	movlt	r0, r3
 80094d2:	e730      	b.n	8009336 <_printf_float+0xc6>
 80094d4:	2301      	movs	r3, #1
 80094d6:	464a      	mov	r2, r9
 80094d8:	4631      	mov	r1, r6
 80094da:	4628      	mov	r0, r5
 80094dc:	47b8      	blx	r7
 80094de:	3001      	adds	r0, #1
 80094e0:	f43f af27 	beq.w	8009332 <_printf_float+0xc2>
 80094e4:	f108 0801 	add.w	r8, r8, #1
 80094e8:	e7e6      	b.n	80094b8 <_printf_float+0x248>
 80094ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dc39      	bgt.n	8009564 <_printf_float+0x2f4>
 80094f0:	4a1b      	ldr	r2, [pc, #108]	; (8009560 <_printf_float+0x2f0>)
 80094f2:	2301      	movs	r3, #1
 80094f4:	4631      	mov	r1, r6
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b8      	blx	r7
 80094fa:	3001      	adds	r0, #1
 80094fc:	f43f af19 	beq.w	8009332 <_printf_float+0xc2>
 8009500:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009504:	4313      	orrs	r3, r2
 8009506:	d102      	bne.n	800950e <_printf_float+0x29e>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	07d9      	lsls	r1, r3, #31
 800950c:	d5d8      	bpl.n	80094c0 <_printf_float+0x250>
 800950e:	ee18 3a10 	vmov	r3, s16
 8009512:	4652      	mov	r2, sl
 8009514:	4631      	mov	r1, r6
 8009516:	4628      	mov	r0, r5
 8009518:	47b8      	blx	r7
 800951a:	3001      	adds	r0, #1
 800951c:	f43f af09 	beq.w	8009332 <_printf_float+0xc2>
 8009520:	f04f 0900 	mov.w	r9, #0
 8009524:	f104 0a1a 	add.w	sl, r4, #26
 8009528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952a:	425b      	negs	r3, r3
 800952c:	454b      	cmp	r3, r9
 800952e:	dc01      	bgt.n	8009534 <_printf_float+0x2c4>
 8009530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009532:	e792      	b.n	800945a <_printf_float+0x1ea>
 8009534:	2301      	movs	r3, #1
 8009536:	4652      	mov	r2, sl
 8009538:	4631      	mov	r1, r6
 800953a:	4628      	mov	r0, r5
 800953c:	47b8      	blx	r7
 800953e:	3001      	adds	r0, #1
 8009540:	f43f aef7 	beq.w	8009332 <_printf_float+0xc2>
 8009544:	f109 0901 	add.w	r9, r9, #1
 8009548:	e7ee      	b.n	8009528 <_printf_float+0x2b8>
 800954a:	bf00      	nop
 800954c:	7fefffff 	.word	0x7fefffff
 8009550:	0800bfec 	.word	0x0800bfec
 8009554:	0800bff0 	.word	0x0800bff0
 8009558:	0800bff8 	.word	0x0800bff8
 800955c:	0800bff4 	.word	0x0800bff4
 8009560:	0800bffc 	.word	0x0800bffc
 8009564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009566:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009568:	429a      	cmp	r2, r3
 800956a:	bfa8      	it	ge
 800956c:	461a      	movge	r2, r3
 800956e:	2a00      	cmp	r2, #0
 8009570:	4691      	mov	r9, r2
 8009572:	dc37      	bgt.n	80095e4 <_printf_float+0x374>
 8009574:	f04f 0b00 	mov.w	fp, #0
 8009578:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800957c:	f104 021a 	add.w	r2, r4, #26
 8009580:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009582:	9305      	str	r3, [sp, #20]
 8009584:	eba3 0309 	sub.w	r3, r3, r9
 8009588:	455b      	cmp	r3, fp
 800958a:	dc33      	bgt.n	80095f4 <_printf_float+0x384>
 800958c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009590:	429a      	cmp	r2, r3
 8009592:	db3b      	blt.n	800960c <_printf_float+0x39c>
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	07da      	lsls	r2, r3, #31
 8009598:	d438      	bmi.n	800960c <_printf_float+0x39c>
 800959a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800959c:	9b05      	ldr	r3, [sp, #20]
 800959e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	eba2 0901 	sub.w	r9, r2, r1
 80095a6:	4599      	cmp	r9, r3
 80095a8:	bfa8      	it	ge
 80095aa:	4699      	movge	r9, r3
 80095ac:	f1b9 0f00 	cmp.w	r9, #0
 80095b0:	dc35      	bgt.n	800961e <_printf_float+0x3ae>
 80095b2:	f04f 0800 	mov.w	r8, #0
 80095b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095ba:	f104 0a1a 	add.w	sl, r4, #26
 80095be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	eba3 0309 	sub.w	r3, r3, r9
 80095c8:	4543      	cmp	r3, r8
 80095ca:	f77f af79 	ble.w	80094c0 <_printf_float+0x250>
 80095ce:	2301      	movs	r3, #1
 80095d0:	4652      	mov	r2, sl
 80095d2:	4631      	mov	r1, r6
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b8      	blx	r7
 80095d8:	3001      	adds	r0, #1
 80095da:	f43f aeaa 	beq.w	8009332 <_printf_float+0xc2>
 80095de:	f108 0801 	add.w	r8, r8, #1
 80095e2:	e7ec      	b.n	80095be <_printf_float+0x34e>
 80095e4:	4613      	mov	r3, r2
 80095e6:	4631      	mov	r1, r6
 80095e8:	4642      	mov	r2, r8
 80095ea:	4628      	mov	r0, r5
 80095ec:	47b8      	blx	r7
 80095ee:	3001      	adds	r0, #1
 80095f0:	d1c0      	bne.n	8009574 <_printf_float+0x304>
 80095f2:	e69e      	b.n	8009332 <_printf_float+0xc2>
 80095f4:	2301      	movs	r3, #1
 80095f6:	4631      	mov	r1, r6
 80095f8:	4628      	mov	r0, r5
 80095fa:	9205      	str	r2, [sp, #20]
 80095fc:	47b8      	blx	r7
 80095fe:	3001      	adds	r0, #1
 8009600:	f43f ae97 	beq.w	8009332 <_printf_float+0xc2>
 8009604:	9a05      	ldr	r2, [sp, #20]
 8009606:	f10b 0b01 	add.w	fp, fp, #1
 800960a:	e7b9      	b.n	8009580 <_printf_float+0x310>
 800960c:	ee18 3a10 	vmov	r3, s16
 8009610:	4652      	mov	r2, sl
 8009612:	4631      	mov	r1, r6
 8009614:	4628      	mov	r0, r5
 8009616:	47b8      	blx	r7
 8009618:	3001      	adds	r0, #1
 800961a:	d1be      	bne.n	800959a <_printf_float+0x32a>
 800961c:	e689      	b.n	8009332 <_printf_float+0xc2>
 800961e:	9a05      	ldr	r2, [sp, #20]
 8009620:	464b      	mov	r3, r9
 8009622:	4442      	add	r2, r8
 8009624:	4631      	mov	r1, r6
 8009626:	4628      	mov	r0, r5
 8009628:	47b8      	blx	r7
 800962a:	3001      	adds	r0, #1
 800962c:	d1c1      	bne.n	80095b2 <_printf_float+0x342>
 800962e:	e680      	b.n	8009332 <_printf_float+0xc2>
 8009630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009632:	2a01      	cmp	r2, #1
 8009634:	dc01      	bgt.n	800963a <_printf_float+0x3ca>
 8009636:	07db      	lsls	r3, r3, #31
 8009638:	d538      	bpl.n	80096ac <_printf_float+0x43c>
 800963a:	2301      	movs	r3, #1
 800963c:	4642      	mov	r2, r8
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae74 	beq.w	8009332 <_printf_float+0xc2>
 800964a:	ee18 3a10 	vmov	r3, s16
 800964e:	4652      	mov	r2, sl
 8009650:	4631      	mov	r1, r6
 8009652:	4628      	mov	r0, r5
 8009654:	47b8      	blx	r7
 8009656:	3001      	adds	r0, #1
 8009658:	f43f ae6b 	beq.w	8009332 <_printf_float+0xc2>
 800965c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009660:	2200      	movs	r2, #0
 8009662:	2300      	movs	r3, #0
 8009664:	f7f7 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 8009668:	b9d8      	cbnz	r0, 80096a2 <_printf_float+0x432>
 800966a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800966c:	f108 0201 	add.w	r2, r8, #1
 8009670:	3b01      	subs	r3, #1
 8009672:	4631      	mov	r1, r6
 8009674:	4628      	mov	r0, r5
 8009676:	47b8      	blx	r7
 8009678:	3001      	adds	r0, #1
 800967a:	d10e      	bne.n	800969a <_printf_float+0x42a>
 800967c:	e659      	b.n	8009332 <_printf_float+0xc2>
 800967e:	2301      	movs	r3, #1
 8009680:	4652      	mov	r2, sl
 8009682:	4631      	mov	r1, r6
 8009684:	4628      	mov	r0, r5
 8009686:	47b8      	blx	r7
 8009688:	3001      	adds	r0, #1
 800968a:	f43f ae52 	beq.w	8009332 <_printf_float+0xc2>
 800968e:	f108 0801 	add.w	r8, r8, #1
 8009692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009694:	3b01      	subs	r3, #1
 8009696:	4543      	cmp	r3, r8
 8009698:	dcf1      	bgt.n	800967e <_printf_float+0x40e>
 800969a:	464b      	mov	r3, r9
 800969c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80096a0:	e6dc      	b.n	800945c <_printf_float+0x1ec>
 80096a2:	f04f 0800 	mov.w	r8, #0
 80096a6:	f104 0a1a 	add.w	sl, r4, #26
 80096aa:	e7f2      	b.n	8009692 <_printf_float+0x422>
 80096ac:	2301      	movs	r3, #1
 80096ae:	4642      	mov	r2, r8
 80096b0:	e7df      	b.n	8009672 <_printf_float+0x402>
 80096b2:	2301      	movs	r3, #1
 80096b4:	464a      	mov	r2, r9
 80096b6:	4631      	mov	r1, r6
 80096b8:	4628      	mov	r0, r5
 80096ba:	47b8      	blx	r7
 80096bc:	3001      	adds	r0, #1
 80096be:	f43f ae38 	beq.w	8009332 <_printf_float+0xc2>
 80096c2:	f108 0801 	add.w	r8, r8, #1
 80096c6:	68e3      	ldr	r3, [r4, #12]
 80096c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80096ca:	1a5b      	subs	r3, r3, r1
 80096cc:	4543      	cmp	r3, r8
 80096ce:	dcf0      	bgt.n	80096b2 <_printf_float+0x442>
 80096d0:	e6fa      	b.n	80094c8 <_printf_float+0x258>
 80096d2:	f04f 0800 	mov.w	r8, #0
 80096d6:	f104 0919 	add.w	r9, r4, #25
 80096da:	e7f4      	b.n	80096c6 <_printf_float+0x456>

080096dc <_printf_common>:
 80096dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e0:	4616      	mov	r6, r2
 80096e2:	4699      	mov	r9, r3
 80096e4:	688a      	ldr	r2, [r1, #8]
 80096e6:	690b      	ldr	r3, [r1, #16]
 80096e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096ec:	4293      	cmp	r3, r2
 80096ee:	bfb8      	it	lt
 80096f0:	4613      	movlt	r3, r2
 80096f2:	6033      	str	r3, [r6, #0]
 80096f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80096f8:	4607      	mov	r7, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	b10a      	cbz	r2, 8009702 <_printf_common+0x26>
 80096fe:	3301      	adds	r3, #1
 8009700:	6033      	str	r3, [r6, #0]
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	0699      	lsls	r1, r3, #26
 8009706:	bf42      	ittt	mi
 8009708:	6833      	ldrmi	r3, [r6, #0]
 800970a:	3302      	addmi	r3, #2
 800970c:	6033      	strmi	r3, [r6, #0]
 800970e:	6825      	ldr	r5, [r4, #0]
 8009710:	f015 0506 	ands.w	r5, r5, #6
 8009714:	d106      	bne.n	8009724 <_printf_common+0x48>
 8009716:	f104 0a19 	add.w	sl, r4, #25
 800971a:	68e3      	ldr	r3, [r4, #12]
 800971c:	6832      	ldr	r2, [r6, #0]
 800971e:	1a9b      	subs	r3, r3, r2
 8009720:	42ab      	cmp	r3, r5
 8009722:	dc26      	bgt.n	8009772 <_printf_common+0x96>
 8009724:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009728:	1e13      	subs	r3, r2, #0
 800972a:	6822      	ldr	r2, [r4, #0]
 800972c:	bf18      	it	ne
 800972e:	2301      	movne	r3, #1
 8009730:	0692      	lsls	r2, r2, #26
 8009732:	d42b      	bmi.n	800978c <_printf_common+0xb0>
 8009734:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009738:	4649      	mov	r1, r9
 800973a:	4638      	mov	r0, r7
 800973c:	47c0      	blx	r8
 800973e:	3001      	adds	r0, #1
 8009740:	d01e      	beq.n	8009780 <_printf_common+0xa4>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	68e5      	ldr	r5, [r4, #12]
 8009746:	6832      	ldr	r2, [r6, #0]
 8009748:	f003 0306 	and.w	r3, r3, #6
 800974c:	2b04      	cmp	r3, #4
 800974e:	bf08      	it	eq
 8009750:	1aad      	subeq	r5, r5, r2
 8009752:	68a3      	ldr	r3, [r4, #8]
 8009754:	6922      	ldr	r2, [r4, #16]
 8009756:	bf0c      	ite	eq
 8009758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800975c:	2500      	movne	r5, #0
 800975e:	4293      	cmp	r3, r2
 8009760:	bfc4      	itt	gt
 8009762:	1a9b      	subgt	r3, r3, r2
 8009764:	18ed      	addgt	r5, r5, r3
 8009766:	2600      	movs	r6, #0
 8009768:	341a      	adds	r4, #26
 800976a:	42b5      	cmp	r5, r6
 800976c:	d11a      	bne.n	80097a4 <_printf_common+0xc8>
 800976e:	2000      	movs	r0, #0
 8009770:	e008      	b.n	8009784 <_printf_common+0xa8>
 8009772:	2301      	movs	r3, #1
 8009774:	4652      	mov	r2, sl
 8009776:	4649      	mov	r1, r9
 8009778:	4638      	mov	r0, r7
 800977a:	47c0      	blx	r8
 800977c:	3001      	adds	r0, #1
 800977e:	d103      	bne.n	8009788 <_printf_common+0xac>
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009788:	3501      	adds	r5, #1
 800978a:	e7c6      	b.n	800971a <_printf_common+0x3e>
 800978c:	18e1      	adds	r1, r4, r3
 800978e:	1c5a      	adds	r2, r3, #1
 8009790:	2030      	movs	r0, #48	; 0x30
 8009792:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009796:	4422      	add	r2, r4
 8009798:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800979c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80097a0:	3302      	adds	r3, #2
 80097a2:	e7c7      	b.n	8009734 <_printf_common+0x58>
 80097a4:	2301      	movs	r3, #1
 80097a6:	4622      	mov	r2, r4
 80097a8:	4649      	mov	r1, r9
 80097aa:	4638      	mov	r0, r7
 80097ac:	47c0      	blx	r8
 80097ae:	3001      	adds	r0, #1
 80097b0:	d0e6      	beq.n	8009780 <_printf_common+0xa4>
 80097b2:	3601      	adds	r6, #1
 80097b4:	e7d9      	b.n	800976a <_printf_common+0x8e>
	...

080097b8 <_printf_i>:
 80097b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097bc:	460c      	mov	r4, r1
 80097be:	4691      	mov	r9, r2
 80097c0:	7e27      	ldrb	r7, [r4, #24]
 80097c2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80097c4:	2f78      	cmp	r7, #120	; 0x78
 80097c6:	4680      	mov	r8, r0
 80097c8:	469a      	mov	sl, r3
 80097ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80097ce:	d807      	bhi.n	80097e0 <_printf_i+0x28>
 80097d0:	2f62      	cmp	r7, #98	; 0x62
 80097d2:	d80a      	bhi.n	80097ea <_printf_i+0x32>
 80097d4:	2f00      	cmp	r7, #0
 80097d6:	f000 80d8 	beq.w	800998a <_printf_i+0x1d2>
 80097da:	2f58      	cmp	r7, #88	; 0x58
 80097dc:	f000 80a3 	beq.w	8009926 <_printf_i+0x16e>
 80097e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80097e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80097e8:	e03a      	b.n	8009860 <_printf_i+0xa8>
 80097ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80097ee:	2b15      	cmp	r3, #21
 80097f0:	d8f6      	bhi.n	80097e0 <_printf_i+0x28>
 80097f2:	a001      	add	r0, pc, #4	; (adr r0, 80097f8 <_printf_i+0x40>)
 80097f4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80097f8:	08009851 	.word	0x08009851
 80097fc:	08009865 	.word	0x08009865
 8009800:	080097e1 	.word	0x080097e1
 8009804:	080097e1 	.word	0x080097e1
 8009808:	080097e1 	.word	0x080097e1
 800980c:	080097e1 	.word	0x080097e1
 8009810:	08009865 	.word	0x08009865
 8009814:	080097e1 	.word	0x080097e1
 8009818:	080097e1 	.word	0x080097e1
 800981c:	080097e1 	.word	0x080097e1
 8009820:	080097e1 	.word	0x080097e1
 8009824:	08009971 	.word	0x08009971
 8009828:	08009895 	.word	0x08009895
 800982c:	08009953 	.word	0x08009953
 8009830:	080097e1 	.word	0x080097e1
 8009834:	080097e1 	.word	0x080097e1
 8009838:	08009993 	.word	0x08009993
 800983c:	080097e1 	.word	0x080097e1
 8009840:	08009895 	.word	0x08009895
 8009844:	080097e1 	.word	0x080097e1
 8009848:	080097e1 	.word	0x080097e1
 800984c:	0800995b 	.word	0x0800995b
 8009850:	680b      	ldr	r3, [r1, #0]
 8009852:	1d1a      	adds	r2, r3, #4
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	600a      	str	r2, [r1, #0]
 8009858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800985c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009860:	2301      	movs	r3, #1
 8009862:	e0a3      	b.n	80099ac <_printf_i+0x1f4>
 8009864:	6825      	ldr	r5, [r4, #0]
 8009866:	6808      	ldr	r0, [r1, #0]
 8009868:	062e      	lsls	r6, r5, #24
 800986a:	f100 0304 	add.w	r3, r0, #4
 800986e:	d50a      	bpl.n	8009886 <_printf_i+0xce>
 8009870:	6805      	ldr	r5, [r0, #0]
 8009872:	600b      	str	r3, [r1, #0]
 8009874:	2d00      	cmp	r5, #0
 8009876:	da03      	bge.n	8009880 <_printf_i+0xc8>
 8009878:	232d      	movs	r3, #45	; 0x2d
 800987a:	426d      	negs	r5, r5
 800987c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009880:	485e      	ldr	r0, [pc, #376]	; (80099fc <_printf_i+0x244>)
 8009882:	230a      	movs	r3, #10
 8009884:	e019      	b.n	80098ba <_printf_i+0x102>
 8009886:	f015 0f40 	tst.w	r5, #64	; 0x40
 800988a:	6805      	ldr	r5, [r0, #0]
 800988c:	600b      	str	r3, [r1, #0]
 800988e:	bf18      	it	ne
 8009890:	b22d      	sxthne	r5, r5
 8009892:	e7ef      	b.n	8009874 <_printf_i+0xbc>
 8009894:	680b      	ldr	r3, [r1, #0]
 8009896:	6825      	ldr	r5, [r4, #0]
 8009898:	1d18      	adds	r0, r3, #4
 800989a:	6008      	str	r0, [r1, #0]
 800989c:	0628      	lsls	r0, r5, #24
 800989e:	d501      	bpl.n	80098a4 <_printf_i+0xec>
 80098a0:	681d      	ldr	r5, [r3, #0]
 80098a2:	e002      	b.n	80098aa <_printf_i+0xf2>
 80098a4:	0669      	lsls	r1, r5, #25
 80098a6:	d5fb      	bpl.n	80098a0 <_printf_i+0xe8>
 80098a8:	881d      	ldrh	r5, [r3, #0]
 80098aa:	4854      	ldr	r0, [pc, #336]	; (80099fc <_printf_i+0x244>)
 80098ac:	2f6f      	cmp	r7, #111	; 0x6f
 80098ae:	bf0c      	ite	eq
 80098b0:	2308      	moveq	r3, #8
 80098b2:	230a      	movne	r3, #10
 80098b4:	2100      	movs	r1, #0
 80098b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80098ba:	6866      	ldr	r6, [r4, #4]
 80098bc:	60a6      	str	r6, [r4, #8]
 80098be:	2e00      	cmp	r6, #0
 80098c0:	bfa2      	ittt	ge
 80098c2:	6821      	ldrge	r1, [r4, #0]
 80098c4:	f021 0104 	bicge.w	r1, r1, #4
 80098c8:	6021      	strge	r1, [r4, #0]
 80098ca:	b90d      	cbnz	r5, 80098d0 <_printf_i+0x118>
 80098cc:	2e00      	cmp	r6, #0
 80098ce:	d04d      	beq.n	800996c <_printf_i+0x1b4>
 80098d0:	4616      	mov	r6, r2
 80098d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80098d6:	fb03 5711 	mls	r7, r3, r1, r5
 80098da:	5dc7      	ldrb	r7, [r0, r7]
 80098dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80098e0:	462f      	mov	r7, r5
 80098e2:	42bb      	cmp	r3, r7
 80098e4:	460d      	mov	r5, r1
 80098e6:	d9f4      	bls.n	80098d2 <_printf_i+0x11a>
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d10b      	bne.n	8009904 <_printf_i+0x14c>
 80098ec:	6823      	ldr	r3, [r4, #0]
 80098ee:	07df      	lsls	r7, r3, #31
 80098f0:	d508      	bpl.n	8009904 <_printf_i+0x14c>
 80098f2:	6923      	ldr	r3, [r4, #16]
 80098f4:	6861      	ldr	r1, [r4, #4]
 80098f6:	4299      	cmp	r1, r3
 80098f8:	bfde      	ittt	le
 80098fa:	2330      	movle	r3, #48	; 0x30
 80098fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009900:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009904:	1b92      	subs	r2, r2, r6
 8009906:	6122      	str	r2, [r4, #16]
 8009908:	f8cd a000 	str.w	sl, [sp]
 800990c:	464b      	mov	r3, r9
 800990e:	aa03      	add	r2, sp, #12
 8009910:	4621      	mov	r1, r4
 8009912:	4640      	mov	r0, r8
 8009914:	f7ff fee2 	bl	80096dc <_printf_common>
 8009918:	3001      	adds	r0, #1
 800991a:	d14c      	bne.n	80099b6 <_printf_i+0x1fe>
 800991c:	f04f 30ff 	mov.w	r0, #4294967295
 8009920:	b004      	add	sp, #16
 8009922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009926:	4835      	ldr	r0, [pc, #212]	; (80099fc <_printf_i+0x244>)
 8009928:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	680e      	ldr	r6, [r1, #0]
 8009930:	061f      	lsls	r7, r3, #24
 8009932:	f856 5b04 	ldr.w	r5, [r6], #4
 8009936:	600e      	str	r6, [r1, #0]
 8009938:	d514      	bpl.n	8009964 <_printf_i+0x1ac>
 800993a:	07d9      	lsls	r1, r3, #31
 800993c:	bf44      	itt	mi
 800993e:	f043 0320 	orrmi.w	r3, r3, #32
 8009942:	6023      	strmi	r3, [r4, #0]
 8009944:	b91d      	cbnz	r5, 800994e <_printf_i+0x196>
 8009946:	6823      	ldr	r3, [r4, #0]
 8009948:	f023 0320 	bic.w	r3, r3, #32
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	2310      	movs	r3, #16
 8009950:	e7b0      	b.n	80098b4 <_printf_i+0xfc>
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	f043 0320 	orr.w	r3, r3, #32
 8009958:	6023      	str	r3, [r4, #0]
 800995a:	2378      	movs	r3, #120	; 0x78
 800995c:	4828      	ldr	r0, [pc, #160]	; (8009a00 <_printf_i+0x248>)
 800995e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009962:	e7e3      	b.n	800992c <_printf_i+0x174>
 8009964:	065e      	lsls	r6, r3, #25
 8009966:	bf48      	it	mi
 8009968:	b2ad      	uxthmi	r5, r5
 800996a:	e7e6      	b.n	800993a <_printf_i+0x182>
 800996c:	4616      	mov	r6, r2
 800996e:	e7bb      	b.n	80098e8 <_printf_i+0x130>
 8009970:	680b      	ldr	r3, [r1, #0]
 8009972:	6826      	ldr	r6, [r4, #0]
 8009974:	6960      	ldr	r0, [r4, #20]
 8009976:	1d1d      	adds	r5, r3, #4
 8009978:	600d      	str	r5, [r1, #0]
 800997a:	0635      	lsls	r5, r6, #24
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	d501      	bpl.n	8009984 <_printf_i+0x1cc>
 8009980:	6018      	str	r0, [r3, #0]
 8009982:	e002      	b.n	800998a <_printf_i+0x1d2>
 8009984:	0671      	lsls	r1, r6, #25
 8009986:	d5fb      	bpl.n	8009980 <_printf_i+0x1c8>
 8009988:	8018      	strh	r0, [r3, #0]
 800998a:	2300      	movs	r3, #0
 800998c:	6123      	str	r3, [r4, #16]
 800998e:	4616      	mov	r6, r2
 8009990:	e7ba      	b.n	8009908 <_printf_i+0x150>
 8009992:	680b      	ldr	r3, [r1, #0]
 8009994:	1d1a      	adds	r2, r3, #4
 8009996:	600a      	str	r2, [r1, #0]
 8009998:	681e      	ldr	r6, [r3, #0]
 800999a:	6862      	ldr	r2, [r4, #4]
 800999c:	2100      	movs	r1, #0
 800999e:	4630      	mov	r0, r6
 80099a0:	f7f6 fc3e 	bl	8000220 <memchr>
 80099a4:	b108      	cbz	r0, 80099aa <_printf_i+0x1f2>
 80099a6:	1b80      	subs	r0, r0, r6
 80099a8:	6060      	str	r0, [r4, #4]
 80099aa:	6863      	ldr	r3, [r4, #4]
 80099ac:	6123      	str	r3, [r4, #16]
 80099ae:	2300      	movs	r3, #0
 80099b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099b4:	e7a8      	b.n	8009908 <_printf_i+0x150>
 80099b6:	6923      	ldr	r3, [r4, #16]
 80099b8:	4632      	mov	r2, r6
 80099ba:	4649      	mov	r1, r9
 80099bc:	4640      	mov	r0, r8
 80099be:	47d0      	blx	sl
 80099c0:	3001      	adds	r0, #1
 80099c2:	d0ab      	beq.n	800991c <_printf_i+0x164>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	079b      	lsls	r3, r3, #30
 80099c8:	d413      	bmi.n	80099f2 <_printf_i+0x23a>
 80099ca:	68e0      	ldr	r0, [r4, #12]
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	4298      	cmp	r0, r3
 80099d0:	bfb8      	it	lt
 80099d2:	4618      	movlt	r0, r3
 80099d4:	e7a4      	b.n	8009920 <_printf_i+0x168>
 80099d6:	2301      	movs	r3, #1
 80099d8:	4632      	mov	r2, r6
 80099da:	4649      	mov	r1, r9
 80099dc:	4640      	mov	r0, r8
 80099de:	47d0      	blx	sl
 80099e0:	3001      	adds	r0, #1
 80099e2:	d09b      	beq.n	800991c <_printf_i+0x164>
 80099e4:	3501      	adds	r5, #1
 80099e6:	68e3      	ldr	r3, [r4, #12]
 80099e8:	9903      	ldr	r1, [sp, #12]
 80099ea:	1a5b      	subs	r3, r3, r1
 80099ec:	42ab      	cmp	r3, r5
 80099ee:	dcf2      	bgt.n	80099d6 <_printf_i+0x21e>
 80099f0:	e7eb      	b.n	80099ca <_printf_i+0x212>
 80099f2:	2500      	movs	r5, #0
 80099f4:	f104 0619 	add.w	r6, r4, #25
 80099f8:	e7f5      	b.n	80099e6 <_printf_i+0x22e>
 80099fa:	bf00      	nop
 80099fc:	0800bffe 	.word	0x0800bffe
 8009a00:	0800c00f 	.word	0x0800c00f

08009a04 <siprintf>:
 8009a04:	b40e      	push	{r1, r2, r3}
 8009a06:	b500      	push	{lr}
 8009a08:	b09c      	sub	sp, #112	; 0x70
 8009a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a0c:	9002      	str	r0, [sp, #8]
 8009a0e:	9006      	str	r0, [sp, #24]
 8009a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a14:	4809      	ldr	r0, [pc, #36]	; (8009a3c <siprintf+0x38>)
 8009a16:	9107      	str	r1, [sp, #28]
 8009a18:	9104      	str	r1, [sp, #16]
 8009a1a:	4909      	ldr	r1, [pc, #36]	; (8009a40 <siprintf+0x3c>)
 8009a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a20:	9105      	str	r1, [sp, #20]
 8009a22:	6800      	ldr	r0, [r0, #0]
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	a902      	add	r1, sp, #8
 8009a28:	f001 fb40 	bl	800b0ac <_svfiprintf_r>
 8009a2c:	9b02      	ldr	r3, [sp, #8]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
 8009a32:	b01c      	add	sp, #112	; 0x70
 8009a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a38:	b003      	add	sp, #12
 8009a3a:	4770      	bx	lr
 8009a3c:	20000024 	.word	0x20000024
 8009a40:	ffff0208 	.word	0xffff0208

08009a44 <strcat>:
 8009a44:	b510      	push	{r4, lr}
 8009a46:	4602      	mov	r2, r0
 8009a48:	7814      	ldrb	r4, [r2, #0]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	3201      	adds	r2, #1
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	d1fa      	bne.n	8009a48 <strcat+0x4>
 8009a52:	3b01      	subs	r3, #1
 8009a54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	d1f9      	bne.n	8009a54 <strcat+0x10>
 8009a60:	bd10      	pop	{r4, pc}

08009a62 <quorem>:
 8009a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a66:	6903      	ldr	r3, [r0, #16]
 8009a68:	690c      	ldr	r4, [r1, #16]
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	4607      	mov	r7, r0
 8009a6e:	f2c0 8081 	blt.w	8009b74 <quorem+0x112>
 8009a72:	3c01      	subs	r4, #1
 8009a74:	f101 0814 	add.w	r8, r1, #20
 8009a78:	f100 0514 	add.w	r5, r0, #20
 8009a7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a96:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a9a:	d331      	bcc.n	8009b00 <quorem+0x9e>
 8009a9c:	f04f 0e00 	mov.w	lr, #0
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	46ac      	mov	ip, r5
 8009aa4:	46f2      	mov	sl, lr
 8009aa6:	f850 2b04 	ldr.w	r2, [r0], #4
 8009aaa:	b293      	uxth	r3, r2
 8009aac:	fb06 e303 	mla	r3, r6, r3, lr
 8009ab0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	ebaa 0303 	sub.w	r3, sl, r3
 8009aba:	0c12      	lsrs	r2, r2, #16
 8009abc:	f8dc a000 	ldr.w	sl, [ip]
 8009ac0:	fb06 e202 	mla	r2, r6, r2, lr
 8009ac4:	fa13 f38a 	uxtah	r3, r3, sl
 8009ac8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009acc:	fa1f fa82 	uxth.w	sl, r2
 8009ad0:	f8dc 2000 	ldr.w	r2, [ip]
 8009ad4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009ad8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ae2:	4581      	cmp	r9, r0
 8009ae4:	f84c 3b04 	str.w	r3, [ip], #4
 8009ae8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009aec:	d2db      	bcs.n	8009aa6 <quorem+0x44>
 8009aee:	f855 300b 	ldr.w	r3, [r5, fp]
 8009af2:	b92b      	cbnz	r3, 8009b00 <quorem+0x9e>
 8009af4:	9b01      	ldr	r3, [sp, #4]
 8009af6:	3b04      	subs	r3, #4
 8009af8:	429d      	cmp	r5, r3
 8009afa:	461a      	mov	r2, r3
 8009afc:	d32e      	bcc.n	8009b5c <quorem+0xfa>
 8009afe:	613c      	str	r4, [r7, #16]
 8009b00:	4638      	mov	r0, r7
 8009b02:	f001 f8bd 	bl	800ac80 <__mcmp>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	db24      	blt.n	8009b54 <quorem+0xf2>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f04f 0c00 	mov.w	ip, #0
 8009b12:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b16:	f8d0 e000 	ldr.w	lr, [r0]
 8009b1a:	b293      	uxth	r3, r2
 8009b1c:	ebac 0303 	sub.w	r3, ip, r3
 8009b20:	0c12      	lsrs	r2, r2, #16
 8009b22:	fa13 f38e 	uxtah	r3, r3, lr
 8009b26:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b34:	45c1      	cmp	r9, r8
 8009b36:	f840 3b04 	str.w	r3, [r0], #4
 8009b3a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b3e:	d2e8      	bcs.n	8009b12 <quorem+0xb0>
 8009b40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b48:	b922      	cbnz	r2, 8009b54 <quorem+0xf2>
 8009b4a:	3b04      	subs	r3, #4
 8009b4c:	429d      	cmp	r5, r3
 8009b4e:	461a      	mov	r2, r3
 8009b50:	d30a      	bcc.n	8009b68 <quorem+0x106>
 8009b52:	613c      	str	r4, [r7, #16]
 8009b54:	4630      	mov	r0, r6
 8009b56:	b003      	add	sp, #12
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	6812      	ldr	r2, [r2, #0]
 8009b5e:	3b04      	subs	r3, #4
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	d1cc      	bne.n	8009afe <quorem+0x9c>
 8009b64:	3c01      	subs	r4, #1
 8009b66:	e7c7      	b.n	8009af8 <quorem+0x96>
 8009b68:	6812      	ldr	r2, [r2, #0]
 8009b6a:	3b04      	subs	r3, #4
 8009b6c:	2a00      	cmp	r2, #0
 8009b6e:	d1f0      	bne.n	8009b52 <quorem+0xf0>
 8009b70:	3c01      	subs	r4, #1
 8009b72:	e7eb      	b.n	8009b4c <quorem+0xea>
 8009b74:	2000      	movs	r0, #0
 8009b76:	e7ee      	b.n	8009b56 <quorem+0xf4>

08009b78 <_dtoa_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	ed2d 8b02 	vpush	{d8}
 8009b80:	ec57 6b10 	vmov	r6, r7, d0
 8009b84:	b095      	sub	sp, #84	; 0x54
 8009b86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b8c:	9105      	str	r1, [sp, #20]
 8009b8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009b92:	4604      	mov	r4, r0
 8009b94:	9209      	str	r2, [sp, #36]	; 0x24
 8009b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b98:	b975      	cbnz	r5, 8009bb8 <_dtoa_r+0x40>
 8009b9a:	2010      	movs	r0, #16
 8009b9c:	f000 fddc 	bl	800a758 <malloc>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6260      	str	r0, [r4, #36]	; 0x24
 8009ba4:	b920      	cbnz	r0, 8009bb0 <_dtoa_r+0x38>
 8009ba6:	4bb2      	ldr	r3, [pc, #712]	; (8009e70 <_dtoa_r+0x2f8>)
 8009ba8:	21ea      	movs	r1, #234	; 0xea
 8009baa:	48b2      	ldr	r0, [pc, #712]	; (8009e74 <_dtoa_r+0x2fc>)
 8009bac:	f001 fb8e 	bl	800b2cc <__assert_func>
 8009bb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bb4:	6005      	str	r5, [r0, #0]
 8009bb6:	60c5      	str	r5, [r0, #12]
 8009bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bba:	6819      	ldr	r1, [r3, #0]
 8009bbc:	b151      	cbz	r1, 8009bd4 <_dtoa_r+0x5c>
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	604a      	str	r2, [r1, #4]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4093      	lsls	r3, r2
 8009bc6:	608b      	str	r3, [r1, #8]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fe1b 	bl	800a804 <_Bfree>
 8009bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	1e3b      	subs	r3, r7, #0
 8009bd6:	bfb9      	ittee	lt
 8009bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bdc:	9303      	strlt	r3, [sp, #12]
 8009bde:	2300      	movge	r3, #0
 8009be0:	f8c8 3000 	strge.w	r3, [r8]
 8009be4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009be8:	4ba3      	ldr	r3, [pc, #652]	; (8009e78 <_dtoa_r+0x300>)
 8009bea:	bfbc      	itt	lt
 8009bec:	2201      	movlt	r2, #1
 8009bee:	f8c8 2000 	strlt.w	r2, [r8]
 8009bf2:	ea33 0309 	bics.w	r3, r3, r9
 8009bf6:	d11b      	bne.n	8009c30 <_dtoa_r+0xb8>
 8009bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c04:	4333      	orrs	r3, r6
 8009c06:	f000 857a 	beq.w	800a6fe <_dtoa_r+0xb86>
 8009c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c0c:	b963      	cbnz	r3, 8009c28 <_dtoa_r+0xb0>
 8009c0e:	4b9b      	ldr	r3, [pc, #620]	; (8009e7c <_dtoa_r+0x304>)
 8009c10:	e024      	b.n	8009c5c <_dtoa_r+0xe4>
 8009c12:	4b9b      	ldr	r3, [pc, #620]	; (8009e80 <_dtoa_r+0x308>)
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	3308      	adds	r3, #8
 8009c18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	9800      	ldr	r0, [sp, #0]
 8009c1e:	b015      	add	sp, #84	; 0x54
 8009c20:	ecbd 8b02 	vpop	{d8}
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	4b94      	ldr	r3, [pc, #592]	; (8009e7c <_dtoa_r+0x304>)
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	3303      	adds	r3, #3
 8009c2e:	e7f3      	b.n	8009c18 <_dtoa_r+0xa0>
 8009c30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	ec51 0b17 	vmov	r0, r1, d7
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009c40:	f7f6 ff62 	bl	8000b08 <__aeabi_dcmpeq>
 8009c44:	4680      	mov	r8, r0
 8009c46:	b158      	cbz	r0, 8009c60 <_dtoa_r+0xe8>
 8009c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8551 	beq.w	800a6f8 <_dtoa_r+0xb80>
 8009c56:	488b      	ldr	r0, [pc, #556]	; (8009e84 <_dtoa_r+0x30c>)
 8009c58:	6018      	str	r0, [r3, #0]
 8009c5a:	1e43      	subs	r3, r0, #1
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	e7dd      	b.n	8009c1c <_dtoa_r+0xa4>
 8009c60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009c64:	aa12      	add	r2, sp, #72	; 0x48
 8009c66:	a913      	add	r1, sp, #76	; 0x4c
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f001 f8ad 	bl	800adc8 <__d2b>
 8009c6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c72:	4683      	mov	fp, r0
 8009c74:	2d00      	cmp	r5, #0
 8009c76:	d07c      	beq.n	8009d72 <_dtoa_r+0x1fa>
 8009c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009c86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c92:	4b7d      	ldr	r3, [pc, #500]	; (8009e88 <_dtoa_r+0x310>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 fb15 	bl	80002c8 <__aeabi_dsub>
 8009c9e:	a36e      	add	r3, pc, #440	; (adr r3, 8009e58 <_dtoa_r+0x2e0>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f7f6 fcc8 	bl	8000638 <__aeabi_dmul>
 8009ca8:	a36d      	add	r3, pc, #436	; (adr r3, 8009e60 <_dtoa_r+0x2e8>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 fb0d 	bl	80002cc <__adddf3>
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	460f      	mov	r7, r1
 8009cb8:	f7f6 fc54 	bl	8000564 <__aeabi_i2d>
 8009cbc:	a36a      	add	r3, pc, #424	; (adr r3, 8009e68 <_dtoa_r+0x2f0>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fcb9 	bl	8000638 <__aeabi_dmul>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4639      	mov	r1, r7
 8009cce:	f7f6 fafd 	bl	80002cc <__adddf3>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	f7f6 ff5f 	bl	8000b98 <__aeabi_d2iz>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	4682      	mov	sl, r0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 ff1a 	bl	8000b1c <__aeabi_dcmplt>
 8009ce8:	b148      	cbz	r0, 8009cfe <_dtoa_r+0x186>
 8009cea:	4650      	mov	r0, sl
 8009cec:	f7f6 fc3a 	bl	8000564 <__aeabi_i2d>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 ff08 	bl	8000b08 <__aeabi_dcmpeq>
 8009cf8:	b908      	cbnz	r0, 8009cfe <_dtoa_r+0x186>
 8009cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cfe:	f1ba 0f16 	cmp.w	sl, #22
 8009d02:	d854      	bhi.n	8009dae <_dtoa_r+0x236>
 8009d04:	4b61      	ldr	r3, [pc, #388]	; (8009e8c <_dtoa_r+0x314>)
 8009d06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d12:	f7f6 ff03 	bl	8000b1c <__aeabi_dcmplt>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d04b      	beq.n	8009db2 <_dtoa_r+0x23a>
 8009d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1e:	2300      	movs	r3, #0
 8009d20:	930e      	str	r3, [sp, #56]	; 0x38
 8009d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d24:	1b5d      	subs	r5, r3, r5
 8009d26:	1e6b      	subs	r3, r5, #1
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	bf43      	ittte	mi
 8009d2c:	2300      	movmi	r3, #0
 8009d2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009d32:	9304      	strmi	r3, [sp, #16]
 8009d34:	f04f 0800 	movpl.w	r8, #0
 8009d38:	f1ba 0f00 	cmp.w	sl, #0
 8009d3c:	db3b      	blt.n	8009db6 <_dtoa_r+0x23e>
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009d44:	4453      	add	r3, sl
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9306      	str	r3, [sp, #24]
 8009d4c:	9b05      	ldr	r3, [sp, #20]
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	d869      	bhi.n	8009e26 <_dtoa_r+0x2ae>
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	bfc4      	itt	gt
 8009d56:	3b04      	subgt	r3, #4
 8009d58:	9305      	strgt	r3, [sp, #20]
 8009d5a:	9b05      	ldr	r3, [sp, #20]
 8009d5c:	f1a3 0302 	sub.w	r3, r3, #2
 8009d60:	bfcc      	ite	gt
 8009d62:	2500      	movgt	r5, #0
 8009d64:	2501      	movle	r5, #1
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d869      	bhi.n	8009e3e <_dtoa_r+0x2c6>
 8009d6a:	e8df f003 	tbb	[pc, r3]
 8009d6e:	4e2c      	.short	0x4e2c
 8009d70:	5a4c      	.short	0x5a4c
 8009d72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009d76:	441d      	add	r5, r3
 8009d78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	bfc1      	itttt	gt
 8009d80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d88:	fa09 f303 	lslgt.w	r3, r9, r3
 8009d8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d90:	bfda      	itte	le
 8009d92:	f1c3 0320 	rsble	r3, r3, #32
 8009d96:	fa06 f003 	lslle.w	r0, r6, r3
 8009d9a:	4318      	orrgt	r0, r3
 8009d9c:	f7f6 fbd2 	bl	8000544 <__aeabi_ui2d>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4606      	mov	r6, r0
 8009da4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009da8:	3d01      	subs	r5, #1
 8009daa:	9310      	str	r3, [sp, #64]	; 0x40
 8009dac:	e771      	b.n	8009c92 <_dtoa_r+0x11a>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e7b6      	b.n	8009d20 <_dtoa_r+0x1a8>
 8009db2:	900e      	str	r0, [sp, #56]	; 0x38
 8009db4:	e7b5      	b.n	8009d22 <_dtoa_r+0x1aa>
 8009db6:	f1ca 0300 	rsb	r3, sl, #0
 8009dba:	9306      	str	r3, [sp, #24]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	eba8 080a 	sub.w	r8, r8, sl
 8009dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009dc4:	e7c2      	b.n	8009d4c <_dtoa_r+0x1d4>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dc39      	bgt.n	8009e44 <_dtoa_r+0x2cc>
 8009dd0:	f04f 0901 	mov.w	r9, #1
 8009dd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009dd8:	464b      	mov	r3, r9
 8009dda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009dde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009de0:	2200      	movs	r2, #0
 8009de2:	6042      	str	r2, [r0, #4]
 8009de4:	2204      	movs	r2, #4
 8009de6:	f102 0614 	add.w	r6, r2, #20
 8009dea:	429e      	cmp	r6, r3
 8009dec:	6841      	ldr	r1, [r0, #4]
 8009dee:	d92f      	bls.n	8009e50 <_dtoa_r+0x2d8>
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 fcc7 	bl	800a784 <_Balloc>
 8009df6:	9000      	str	r0, [sp, #0]
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d14b      	bne.n	8009e94 <_dtoa_r+0x31c>
 8009dfc:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <_dtoa_r+0x318>)
 8009dfe:	4602      	mov	r2, r0
 8009e00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e04:	e6d1      	b.n	8009baa <_dtoa_r+0x32>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7de      	b.n	8009dc8 <_dtoa_r+0x250>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9308      	str	r3, [sp, #32]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	eb0a 0903 	add.w	r9, sl, r3
 8009e14:	f109 0301 	add.w	r3, r9, #1
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	bfb8      	it	lt
 8009e1e:	2301      	movlt	r3, #1
 8009e20:	e7dd      	b.n	8009dde <_dtoa_r+0x266>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e7f2      	b.n	8009e0c <_dtoa_r+0x294>
 8009e26:	2501      	movs	r5, #1
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	9508      	str	r5, [sp, #32]
 8009e2e:	f04f 39ff 	mov.w	r9, #4294967295
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e38:	2312      	movs	r3, #18
 8009e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e3c:	e7cf      	b.n	8009dde <_dtoa_r+0x266>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	e7f4      	b.n	8009e2e <_dtoa_r+0x2b6>
 8009e44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009e48:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	e7c6      	b.n	8009dde <_dtoa_r+0x266>
 8009e50:	3101      	adds	r1, #1
 8009e52:	6041      	str	r1, [r0, #4]
 8009e54:	0052      	lsls	r2, r2, #1
 8009e56:	e7c6      	b.n	8009de6 <_dtoa_r+0x26e>
 8009e58:	636f4361 	.word	0x636f4361
 8009e5c:	3fd287a7 	.word	0x3fd287a7
 8009e60:	8b60c8b3 	.word	0x8b60c8b3
 8009e64:	3fc68a28 	.word	0x3fc68a28
 8009e68:	509f79fb 	.word	0x509f79fb
 8009e6c:	3fd34413 	.word	0x3fd34413
 8009e70:	0800c02d 	.word	0x0800c02d
 8009e74:	0800c044 	.word	0x0800c044
 8009e78:	7ff00000 	.word	0x7ff00000
 8009e7c:	0800c029 	.word	0x0800c029
 8009e80:	0800c020 	.word	0x0800c020
 8009e84:	0800bffd 	.word	0x0800bffd
 8009e88:	3ff80000 	.word	0x3ff80000
 8009e8c:	0800c140 	.word	0x0800c140
 8009e90:	0800c0a3 	.word	0x0800c0a3
 8009e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e96:	9a00      	ldr	r2, [sp, #0]
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	2b0e      	cmp	r3, #14
 8009e9e:	f200 80ad 	bhi.w	8009ffc <_dtoa_r+0x484>
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	f000 80aa 	beq.w	8009ffc <_dtoa_r+0x484>
 8009ea8:	f1ba 0f00 	cmp.w	sl, #0
 8009eac:	dd36      	ble.n	8009f1c <_dtoa_r+0x3a4>
 8009eae:	4ac3      	ldr	r2, [pc, #780]	; (800a1bc <_dtoa_r+0x644>)
 8009eb0:	f00a 030f 	and.w	r3, sl, #15
 8009eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eb8:	ed93 7b00 	vldr	d7, [r3]
 8009ebc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009ec0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009ec4:	eeb0 8a47 	vmov.f32	s16, s14
 8009ec8:	eef0 8a67 	vmov.f32	s17, s15
 8009ecc:	d016      	beq.n	8009efc <_dtoa_r+0x384>
 8009ece:	4bbc      	ldr	r3, [pc, #752]	; (800a1c0 <_dtoa_r+0x648>)
 8009ed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ed8:	f7f6 fcd8 	bl	800088c <__aeabi_ddiv>
 8009edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee0:	f007 070f 	and.w	r7, r7, #15
 8009ee4:	2503      	movs	r5, #3
 8009ee6:	4eb6      	ldr	r6, [pc, #728]	; (800a1c0 <_dtoa_r+0x648>)
 8009ee8:	b957      	cbnz	r7, 8009f00 <_dtoa_r+0x388>
 8009eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eee:	ec53 2b18 	vmov	r2, r3, d8
 8009ef2:	f7f6 fccb 	bl	800088c <__aeabi_ddiv>
 8009ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009efa:	e029      	b.n	8009f50 <_dtoa_r+0x3d8>
 8009efc:	2502      	movs	r5, #2
 8009efe:	e7f2      	b.n	8009ee6 <_dtoa_r+0x36e>
 8009f00:	07f9      	lsls	r1, r7, #31
 8009f02:	d508      	bpl.n	8009f16 <_dtoa_r+0x39e>
 8009f04:	ec51 0b18 	vmov	r0, r1, d8
 8009f08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f0c:	f7f6 fb94 	bl	8000638 <__aeabi_dmul>
 8009f10:	ec41 0b18 	vmov	d8, r0, r1
 8009f14:	3501      	adds	r5, #1
 8009f16:	107f      	asrs	r7, r7, #1
 8009f18:	3608      	adds	r6, #8
 8009f1a:	e7e5      	b.n	8009ee8 <_dtoa_r+0x370>
 8009f1c:	f000 80a6 	beq.w	800a06c <_dtoa_r+0x4f4>
 8009f20:	f1ca 0600 	rsb	r6, sl, #0
 8009f24:	4ba5      	ldr	r3, [pc, #660]	; (800a1bc <_dtoa_r+0x644>)
 8009f26:	4fa6      	ldr	r7, [pc, #664]	; (800a1c0 <_dtoa_r+0x648>)
 8009f28:	f006 020f 	and.w	r2, r6, #15
 8009f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f38:	f7f6 fb7e 	bl	8000638 <__aeabi_dmul>
 8009f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f40:	1136      	asrs	r6, r6, #4
 8009f42:	2300      	movs	r3, #0
 8009f44:	2502      	movs	r5, #2
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	f040 8085 	bne.w	800a056 <_dtoa_r+0x4de>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1d2      	bne.n	8009ef6 <_dtoa_r+0x37e>
 8009f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 808c 	beq.w	800a070 <_dtoa_r+0x4f8>
 8009f58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f5c:	4b99      	ldr	r3, [pc, #612]	; (800a1c4 <_dtoa_r+0x64c>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fdda 	bl	8000b1c <__aeabi_dcmplt>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f000 8081 	beq.w	800a070 <_dtoa_r+0x4f8>
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d07d      	beq.n	800a070 <_dtoa_r+0x4f8>
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	dd3c      	ble.n	8009ff4 <_dtoa_r+0x47c>
 8009f7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	2200      	movs	r2, #0
 8009f82:	4b91      	ldr	r3, [pc, #580]	; (800a1c8 <_dtoa_r+0x650>)
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	f7f6 fb56 	bl	8000638 <__aeabi_dmul>
 8009f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f90:	3501      	adds	r5, #1
 8009f92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009f96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f7f6 fae2 	bl	8000564 <__aeabi_i2d>
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	463b      	mov	r3, r7
 8009fa4:	f7f6 fb48 	bl	8000638 <__aeabi_dmul>
 8009fa8:	4b88      	ldr	r3, [pc, #544]	; (800a1cc <_dtoa_r+0x654>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	f7f6 f98e 	bl	80002cc <__adddf3>
 8009fb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d15c      	bne.n	800a07a <_dtoa_r+0x502>
 8009fc0:	4b83      	ldr	r3, [pc, #524]	; (800a1d0 <_dtoa_r+0x658>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f97e 	bl	80002c8 <__aeabi_dsub>
 8009fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	f7f6 fdc0 	bl	8000b58 <__aeabi_dcmpgt>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f040 8296 	bne.w	800a50a <_dtoa_r+0x992>
 8009fde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f040 8288 	bne.w	800a504 <_dtoa_r+0x98c>
 8009ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f2c0 8158 	blt.w	800a2b4 <_dtoa_r+0x73c>
 800a004:	f1ba 0f0e 	cmp.w	sl, #14
 800a008:	f300 8154 	bgt.w	800a2b4 <_dtoa_r+0x73c>
 800a00c:	4b6b      	ldr	r3, [pc, #428]	; (800a1bc <_dtoa_r+0x644>)
 800a00e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a012:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f280 80e3 	bge.w	800a1e4 <_dtoa_r+0x66c>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	f300 80df 	bgt.w	800a1e4 <_dtoa_r+0x66c>
 800a026:	f040 826d 	bne.w	800a504 <_dtoa_r+0x98c>
 800a02a:	4b69      	ldr	r3, [pc, #420]	; (800a1d0 <_dtoa_r+0x658>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	4640      	mov	r0, r8
 800a030:	4649      	mov	r1, r9
 800a032:	f7f6 fb01 	bl	8000638 <__aeabi_dmul>
 800a036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a03a:	f7f6 fd83 	bl	8000b44 <__aeabi_dcmpge>
 800a03e:	9e01      	ldr	r6, [sp, #4]
 800a040:	4637      	mov	r7, r6
 800a042:	2800      	cmp	r0, #0
 800a044:	f040 8243 	bne.w	800a4ce <_dtoa_r+0x956>
 800a048:	9d00      	ldr	r5, [sp, #0]
 800a04a:	2331      	movs	r3, #49	; 0x31
 800a04c:	f805 3b01 	strb.w	r3, [r5], #1
 800a050:	f10a 0a01 	add.w	sl, sl, #1
 800a054:	e23f      	b.n	800a4d6 <_dtoa_r+0x95e>
 800a056:	07f2      	lsls	r2, r6, #31
 800a058:	d505      	bpl.n	800a066 <_dtoa_r+0x4ee>
 800a05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a05e:	f7f6 faeb 	bl	8000638 <__aeabi_dmul>
 800a062:	3501      	adds	r5, #1
 800a064:	2301      	movs	r3, #1
 800a066:	1076      	asrs	r6, r6, #1
 800a068:	3708      	adds	r7, #8
 800a06a:	e76c      	b.n	8009f46 <_dtoa_r+0x3ce>
 800a06c:	2502      	movs	r5, #2
 800a06e:	e76f      	b.n	8009f50 <_dtoa_r+0x3d8>
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	f8cd a01c 	str.w	sl, [sp, #28]
 800a076:	930c      	str	r3, [sp, #48]	; 0x30
 800a078:	e78d      	b.n	8009f96 <_dtoa_r+0x41e>
 800a07a:	9900      	ldr	r1, [sp, #0]
 800a07c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a080:	4b4e      	ldr	r3, [pc, #312]	; (800a1bc <_dtoa_r+0x644>)
 800a082:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a086:	4401      	add	r1, r0
 800a088:	9102      	str	r1, [sp, #8]
 800a08a:	9908      	ldr	r1, [sp, #32]
 800a08c:	eeb0 8a47 	vmov.f32	s16, s14
 800a090:	eef0 8a67 	vmov.f32	s17, s15
 800a094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a098:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d045      	beq.n	800a12c <_dtoa_r+0x5b4>
 800a0a0:	494c      	ldr	r1, [pc, #304]	; (800a1d4 <_dtoa_r+0x65c>)
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f7f6 fbf2 	bl	800088c <__aeabi_ddiv>
 800a0a8:	ec53 2b18 	vmov	r2, r3, d8
 800a0ac:	f7f6 f90c 	bl	80002c8 <__aeabi_dsub>
 800a0b0:	9d00      	ldr	r5, [sp, #0]
 800a0b2:	ec41 0b18 	vmov	d8, r0, r1
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7f6 fd6d 	bl	8000b98 <__aeabi_d2iz>
 800a0be:	900c      	str	r0, [sp, #48]	; 0x30
 800a0c0:	f7f6 fa50 	bl	8000564 <__aeabi_i2d>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 f8fc 	bl	80002c8 <__aeabi_dsub>
 800a0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d2:	3330      	adds	r3, #48	; 0x30
 800a0d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a0d8:	ec53 2b18 	vmov	r2, r3, d8
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460f      	mov	r7, r1
 800a0e0:	f7f6 fd1c 	bl	8000b1c <__aeabi_dcmplt>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d165      	bne.n	800a1b4 <_dtoa_r+0x63c>
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4935      	ldr	r1, [pc, #212]	; (800a1c4 <_dtoa_r+0x64c>)
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f7f6 f8ea 	bl	80002c8 <__aeabi_dsub>
 800a0f4:	ec53 2b18 	vmov	r2, r3, d8
 800a0f8:	f7f6 fd10 	bl	8000b1c <__aeabi_dcmplt>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f040 80b9 	bne.w	800a274 <_dtoa_r+0x6fc>
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	429d      	cmp	r5, r3
 800a106:	f43f af75 	beq.w	8009ff4 <_dtoa_r+0x47c>
 800a10a:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <_dtoa_r+0x650>)
 800a10c:	ec51 0b18 	vmov	r0, r1, d8
 800a110:	2200      	movs	r2, #0
 800a112:	f7f6 fa91 	bl	8000638 <__aeabi_dmul>
 800a116:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <_dtoa_r+0x650>)
 800a118:	ec41 0b18 	vmov	d8, r0, r1
 800a11c:	2200      	movs	r2, #0
 800a11e:	4630      	mov	r0, r6
 800a120:	4639      	mov	r1, r7
 800a122:	f7f6 fa89 	bl	8000638 <__aeabi_dmul>
 800a126:	4606      	mov	r6, r0
 800a128:	460f      	mov	r7, r1
 800a12a:	e7c4      	b.n	800a0b6 <_dtoa_r+0x53e>
 800a12c:	ec51 0b17 	vmov	r0, r1, d7
 800a130:	f7f6 fa82 	bl	8000638 <__aeabi_dmul>
 800a134:	9b02      	ldr	r3, [sp, #8]
 800a136:	9d00      	ldr	r5, [sp, #0]
 800a138:	930c      	str	r3, [sp, #48]	; 0x30
 800a13a:	ec41 0b18 	vmov	d8, r0, r1
 800a13e:	4639      	mov	r1, r7
 800a140:	4630      	mov	r0, r6
 800a142:	f7f6 fd29 	bl	8000b98 <__aeabi_d2iz>
 800a146:	9011      	str	r0, [sp, #68]	; 0x44
 800a148:	f7f6 fa0c 	bl	8000564 <__aeabi_i2d>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	f7f6 f8b8 	bl	80002c8 <__aeabi_dsub>
 800a158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a15a:	3330      	adds	r3, #48	; 0x30
 800a15c:	f805 3b01 	strb.w	r3, [r5], #1
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	429d      	cmp	r5, r3
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	d134      	bne.n	800a1d8 <_dtoa_r+0x660>
 800a16e:	4b19      	ldr	r3, [pc, #100]	; (800a1d4 <_dtoa_r+0x65c>)
 800a170:	ec51 0b18 	vmov	r0, r1, d8
 800a174:	f7f6 f8aa 	bl	80002cc <__adddf3>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 fcea 	bl	8000b58 <__aeabi_dcmpgt>
 800a184:	2800      	cmp	r0, #0
 800a186:	d175      	bne.n	800a274 <_dtoa_r+0x6fc>
 800a188:	ec53 2b18 	vmov	r2, r3, d8
 800a18c:	4911      	ldr	r1, [pc, #68]	; (800a1d4 <_dtoa_r+0x65c>)
 800a18e:	2000      	movs	r0, #0
 800a190:	f7f6 f89a 	bl	80002c8 <__aeabi_dsub>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f43f af27 	beq.w	8009ff4 <_dtoa_r+0x47c>
 800a1a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1a8:	1e6b      	subs	r3, r5, #1
 800a1aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1b0:	2b30      	cmp	r3, #48	; 0x30
 800a1b2:	d0f8      	beq.n	800a1a6 <_dtoa_r+0x62e>
 800a1b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1b8:	e04a      	b.n	800a250 <_dtoa_r+0x6d8>
 800a1ba:	bf00      	nop
 800a1bc:	0800c140 	.word	0x0800c140
 800a1c0:	0800c118 	.word	0x0800c118
 800a1c4:	3ff00000 	.word	0x3ff00000
 800a1c8:	40240000 	.word	0x40240000
 800a1cc:	401c0000 	.word	0x401c0000
 800a1d0:	40140000 	.word	0x40140000
 800a1d4:	3fe00000 	.word	0x3fe00000
 800a1d8:	4baf      	ldr	r3, [pc, #700]	; (800a498 <_dtoa_r+0x920>)
 800a1da:	f7f6 fa2d 	bl	8000638 <__aeabi_dmul>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	e7ac      	b.n	800a13e <_dtoa_r+0x5c6>
 800a1e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1e8:	9d00      	ldr	r5, [sp, #0]
 800a1ea:	4642      	mov	r2, r8
 800a1ec:	464b      	mov	r3, r9
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 fb4b 	bl	800088c <__aeabi_ddiv>
 800a1f6:	f7f6 fccf 	bl	8000b98 <__aeabi_d2iz>
 800a1fa:	9002      	str	r0, [sp, #8]
 800a1fc:	f7f6 f9b2 	bl	8000564 <__aeabi_i2d>
 800a200:	4642      	mov	r2, r8
 800a202:	464b      	mov	r3, r9
 800a204:	f7f6 fa18 	bl	8000638 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4630      	mov	r0, r6
 800a20e:	4639      	mov	r1, r7
 800a210:	f7f6 f85a 	bl	80002c8 <__aeabi_dsub>
 800a214:	9e02      	ldr	r6, [sp, #8]
 800a216:	9f01      	ldr	r7, [sp, #4]
 800a218:	3630      	adds	r6, #48	; 0x30
 800a21a:	f805 6b01 	strb.w	r6, [r5], #1
 800a21e:	9e00      	ldr	r6, [sp, #0]
 800a220:	1bae      	subs	r6, r5, r6
 800a222:	42b7      	cmp	r7, r6
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	d137      	bne.n	800a29a <_dtoa_r+0x722>
 800a22a:	f7f6 f84f 	bl	80002cc <__adddf3>
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	4606      	mov	r6, r0
 800a234:	460f      	mov	r7, r1
 800a236:	f7f6 fc8f 	bl	8000b58 <__aeabi_dcmpgt>
 800a23a:	b9c8      	cbnz	r0, 800a270 <_dtoa_r+0x6f8>
 800a23c:	4642      	mov	r2, r8
 800a23e:	464b      	mov	r3, r9
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 fc60 	bl	8000b08 <__aeabi_dcmpeq>
 800a248:	b110      	cbz	r0, 800a250 <_dtoa_r+0x6d8>
 800a24a:	9b02      	ldr	r3, [sp, #8]
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d40f      	bmi.n	800a270 <_dtoa_r+0x6f8>
 800a250:	4620      	mov	r0, r4
 800a252:	4659      	mov	r1, fp
 800a254:	f000 fad6 	bl	800a804 <_Bfree>
 800a258:	2300      	movs	r3, #0
 800a25a:	702b      	strb	r3, [r5, #0]
 800a25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a25e:	f10a 0001 	add.w	r0, sl, #1
 800a262:	6018      	str	r0, [r3, #0]
 800a264:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a266:	2b00      	cmp	r3, #0
 800a268:	f43f acd8 	beq.w	8009c1c <_dtoa_r+0xa4>
 800a26c:	601d      	str	r5, [r3, #0]
 800a26e:	e4d5      	b.n	8009c1c <_dtoa_r+0xa4>
 800a270:	f8cd a01c 	str.w	sl, [sp, #28]
 800a274:	462b      	mov	r3, r5
 800a276:	461d      	mov	r5, r3
 800a278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a27c:	2a39      	cmp	r2, #57	; 0x39
 800a27e:	d108      	bne.n	800a292 <_dtoa_r+0x71a>
 800a280:	9a00      	ldr	r2, [sp, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d1f7      	bne.n	800a276 <_dtoa_r+0x6fe>
 800a286:	9a07      	ldr	r2, [sp, #28]
 800a288:	9900      	ldr	r1, [sp, #0]
 800a28a:	3201      	adds	r2, #1
 800a28c:	9207      	str	r2, [sp, #28]
 800a28e:	2230      	movs	r2, #48	; 0x30
 800a290:	700a      	strb	r2, [r1, #0]
 800a292:	781a      	ldrb	r2, [r3, #0]
 800a294:	3201      	adds	r2, #1
 800a296:	701a      	strb	r2, [r3, #0]
 800a298:	e78c      	b.n	800a1b4 <_dtoa_r+0x63c>
 800a29a:	4b7f      	ldr	r3, [pc, #508]	; (800a498 <_dtoa_r+0x920>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	f7f6 f9cb 	bl	8000638 <__aeabi_dmul>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460f      	mov	r7, r1
 800a2aa:	f7f6 fc2d 	bl	8000b08 <__aeabi_dcmpeq>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d09b      	beq.n	800a1ea <_dtoa_r+0x672>
 800a2b2:	e7cd      	b.n	800a250 <_dtoa_r+0x6d8>
 800a2b4:	9a08      	ldr	r2, [sp, #32]
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	f000 80c4 	beq.w	800a444 <_dtoa_r+0x8cc>
 800a2bc:	9a05      	ldr	r2, [sp, #20]
 800a2be:	2a01      	cmp	r2, #1
 800a2c0:	f300 80a8 	bgt.w	800a414 <_dtoa_r+0x89c>
 800a2c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	f000 80a0 	beq.w	800a40c <_dtoa_r+0x894>
 800a2cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2d0:	9e06      	ldr	r6, [sp, #24]
 800a2d2:	4645      	mov	r5, r8
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	441a      	add	r2, r3
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4498      	add	r8, r3
 800a2de:	9204      	str	r2, [sp, #16]
 800a2e0:	f000 fb4c 	bl	800a97c <__i2b>
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	dd0b      	ble.n	800a302 <_dtoa_r+0x78a>
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	dd08      	ble.n	800a302 <_dtoa_r+0x78a>
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	9a04      	ldr	r2, [sp, #16]
 800a2f4:	bfa8      	it	ge
 800a2f6:	462b      	movge	r3, r5
 800a2f8:	eba8 0803 	sub.w	r8, r8, r3
 800a2fc:	1aed      	subs	r5, r5, r3
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	b1fb      	cbz	r3, 800a346 <_dtoa_r+0x7ce>
 800a306:	9b08      	ldr	r3, [sp, #32]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 809f 	beq.w	800a44c <_dtoa_r+0x8d4>
 800a30e:	2e00      	cmp	r6, #0
 800a310:	dd11      	ble.n	800a336 <_dtoa_r+0x7be>
 800a312:	4639      	mov	r1, r7
 800a314:	4632      	mov	r2, r6
 800a316:	4620      	mov	r0, r4
 800a318:	f000 fbec 	bl	800aaf4 <__pow5mult>
 800a31c:	465a      	mov	r2, fp
 800a31e:	4601      	mov	r1, r0
 800a320:	4607      	mov	r7, r0
 800a322:	4620      	mov	r0, r4
 800a324:	f000 fb40 	bl	800a9a8 <__multiply>
 800a328:	4659      	mov	r1, fp
 800a32a:	9007      	str	r0, [sp, #28]
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 fa69 	bl	800a804 <_Bfree>
 800a332:	9b07      	ldr	r3, [sp, #28]
 800a334:	469b      	mov	fp, r3
 800a336:	9b06      	ldr	r3, [sp, #24]
 800a338:	1b9a      	subs	r2, r3, r6
 800a33a:	d004      	beq.n	800a346 <_dtoa_r+0x7ce>
 800a33c:	4659      	mov	r1, fp
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 fbd8 	bl	800aaf4 <__pow5mult>
 800a344:	4683      	mov	fp, r0
 800a346:	2101      	movs	r1, #1
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fb17 	bl	800a97c <__i2b>
 800a34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a350:	2b00      	cmp	r3, #0
 800a352:	4606      	mov	r6, r0
 800a354:	dd7c      	ble.n	800a450 <_dtoa_r+0x8d8>
 800a356:	461a      	mov	r2, r3
 800a358:	4601      	mov	r1, r0
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fbca 	bl	800aaf4 <__pow5mult>
 800a360:	9b05      	ldr	r3, [sp, #20]
 800a362:	2b01      	cmp	r3, #1
 800a364:	4606      	mov	r6, r0
 800a366:	dd76      	ble.n	800a456 <_dtoa_r+0x8de>
 800a368:	2300      	movs	r3, #0
 800a36a:	9306      	str	r3, [sp, #24]
 800a36c:	6933      	ldr	r3, [r6, #16]
 800a36e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a372:	6918      	ldr	r0, [r3, #16]
 800a374:	f000 fab2 	bl	800a8dc <__hi0bits>
 800a378:	f1c0 0020 	rsb	r0, r0, #32
 800a37c:	9b04      	ldr	r3, [sp, #16]
 800a37e:	4418      	add	r0, r3
 800a380:	f010 001f 	ands.w	r0, r0, #31
 800a384:	f000 8086 	beq.w	800a494 <_dtoa_r+0x91c>
 800a388:	f1c0 0320 	rsb	r3, r0, #32
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	dd7f      	ble.n	800a490 <_dtoa_r+0x918>
 800a390:	f1c0 001c 	rsb	r0, r0, #28
 800a394:	9b04      	ldr	r3, [sp, #16]
 800a396:	4403      	add	r3, r0
 800a398:	4480      	add	r8, r0
 800a39a:	4405      	add	r5, r0
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	f1b8 0f00 	cmp.w	r8, #0
 800a3a2:	dd05      	ble.n	800a3b0 <_dtoa_r+0x838>
 800a3a4:	4659      	mov	r1, fp
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fbfd 	bl	800aba8 <__lshift>
 800a3ae:	4683      	mov	fp, r0
 800a3b0:	9b04      	ldr	r3, [sp, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd05      	ble.n	800a3c2 <_dtoa_r+0x84a>
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fbf4 	bl	800aba8 <__lshift>
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d069      	beq.n	800a49c <_dtoa_r+0x924>
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4658      	mov	r0, fp
 800a3cc:	f000 fc58 	bl	800ac80 <__mcmp>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	da63      	bge.n	800a49c <_dtoa_r+0x924>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4659      	mov	r1, fp
 800a3d8:	220a      	movs	r2, #10
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fa34 	bl	800a848 <__multadd>
 800a3e0:	9b08      	ldr	r3, [sp, #32]
 800a3e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3e6:	4683      	mov	fp, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 818f 	beq.w	800a70c <_dtoa_r+0xb94>
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	220a      	movs	r2, #10
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 fa27 	bl	800a848 <__multadd>
 800a3fa:	f1b9 0f00 	cmp.w	r9, #0
 800a3fe:	4607      	mov	r7, r0
 800a400:	f300 808e 	bgt.w	800a520 <_dtoa_r+0x9a8>
 800a404:	9b05      	ldr	r3, [sp, #20]
 800a406:	2b02      	cmp	r3, #2
 800a408:	dc50      	bgt.n	800a4ac <_dtoa_r+0x934>
 800a40a:	e089      	b.n	800a520 <_dtoa_r+0x9a8>
 800a40c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a40e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a412:	e75d      	b.n	800a2d0 <_dtoa_r+0x758>
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	1e5e      	subs	r6, r3, #1
 800a418:	9b06      	ldr	r3, [sp, #24]
 800a41a:	42b3      	cmp	r3, r6
 800a41c:	bfbf      	itttt	lt
 800a41e:	9b06      	ldrlt	r3, [sp, #24]
 800a420:	9606      	strlt	r6, [sp, #24]
 800a422:	1af2      	sublt	r2, r6, r3
 800a424:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a426:	bfb6      	itet	lt
 800a428:	189b      	addlt	r3, r3, r2
 800a42a:	1b9e      	subge	r6, r3, r6
 800a42c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	bfb8      	it	lt
 800a432:	2600      	movlt	r6, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfb5      	itete	lt
 800a438:	eba8 0503 	sublt.w	r5, r8, r3
 800a43c:	9b01      	ldrge	r3, [sp, #4]
 800a43e:	2300      	movlt	r3, #0
 800a440:	4645      	movge	r5, r8
 800a442:	e747      	b.n	800a2d4 <_dtoa_r+0x75c>
 800a444:	9e06      	ldr	r6, [sp, #24]
 800a446:	9f08      	ldr	r7, [sp, #32]
 800a448:	4645      	mov	r5, r8
 800a44a:	e74c      	b.n	800a2e6 <_dtoa_r+0x76e>
 800a44c:	9a06      	ldr	r2, [sp, #24]
 800a44e:	e775      	b.n	800a33c <_dtoa_r+0x7c4>
 800a450:	9b05      	ldr	r3, [sp, #20]
 800a452:	2b01      	cmp	r3, #1
 800a454:	dc18      	bgt.n	800a488 <_dtoa_r+0x910>
 800a456:	9b02      	ldr	r3, [sp, #8]
 800a458:	b9b3      	cbnz	r3, 800a488 <_dtoa_r+0x910>
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a460:	b9a3      	cbnz	r3, 800a48c <_dtoa_r+0x914>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a468:	0d1b      	lsrs	r3, r3, #20
 800a46a:	051b      	lsls	r3, r3, #20
 800a46c:	b12b      	cbz	r3, 800a47a <_dtoa_r+0x902>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	3301      	adds	r3, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	f108 0801 	add.w	r8, r8, #1
 800a478:	2301      	movs	r3, #1
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f47f af74 	bne.w	800a36c <_dtoa_r+0x7f4>
 800a484:	2001      	movs	r0, #1
 800a486:	e779      	b.n	800a37c <_dtoa_r+0x804>
 800a488:	2300      	movs	r3, #0
 800a48a:	e7f6      	b.n	800a47a <_dtoa_r+0x902>
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	e7f4      	b.n	800a47a <_dtoa_r+0x902>
 800a490:	d085      	beq.n	800a39e <_dtoa_r+0x826>
 800a492:	4618      	mov	r0, r3
 800a494:	301c      	adds	r0, #28
 800a496:	e77d      	b.n	800a394 <_dtoa_r+0x81c>
 800a498:	40240000 	.word	0x40240000
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	dc38      	bgt.n	800a514 <_dtoa_r+0x99c>
 800a4a2:	9b05      	ldr	r3, [sp, #20]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	dd35      	ble.n	800a514 <_dtoa_r+0x99c>
 800a4a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a4ac:	f1b9 0f00 	cmp.w	r9, #0
 800a4b0:	d10d      	bne.n	800a4ce <_dtoa_r+0x956>
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	2205      	movs	r2, #5
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 f9c5 	bl	800a848 <__multadd>
 800a4be:	4601      	mov	r1, r0
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f000 fbdc 	bl	800ac80 <__mcmp>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	f73f adbd 	bgt.w	800a048 <_dtoa_r+0x4d0>
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	9d00      	ldr	r5, [sp, #0]
 800a4d2:	ea6f 0a03 	mvn.w	sl, r3
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 f991 	bl	800a804 <_Bfree>
 800a4e2:	2f00      	cmp	r7, #0
 800a4e4:	f43f aeb4 	beq.w	800a250 <_dtoa_r+0x6d8>
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	d005      	beq.n	800a4fa <_dtoa_r+0x982>
 800a4ee:	45b8      	cmp	r8, r7
 800a4f0:	d003      	beq.n	800a4fa <_dtoa_r+0x982>
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 f985 	bl	800a804 <_Bfree>
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 f981 	bl	800a804 <_Bfree>
 800a502:	e6a5      	b.n	800a250 <_dtoa_r+0x6d8>
 800a504:	2600      	movs	r6, #0
 800a506:	4637      	mov	r7, r6
 800a508:	e7e1      	b.n	800a4ce <_dtoa_r+0x956>
 800a50a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a50c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a510:	4637      	mov	r7, r6
 800a512:	e599      	b.n	800a048 <_dtoa_r+0x4d0>
 800a514:	9b08      	ldr	r3, [sp, #32]
 800a516:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 80fd 	beq.w	800a71a <_dtoa_r+0xba2>
 800a520:	2d00      	cmp	r5, #0
 800a522:	dd05      	ble.n	800a530 <_dtoa_r+0x9b8>
 800a524:	4639      	mov	r1, r7
 800a526:	462a      	mov	r2, r5
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 fb3d 	bl	800aba8 <__lshift>
 800a52e:	4607      	mov	r7, r0
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d05c      	beq.n	800a5f0 <_dtoa_r+0xa78>
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 f923 	bl	800a784 <_Balloc>
 800a53e:	4605      	mov	r5, r0
 800a540:	b928      	cbnz	r0, 800a54e <_dtoa_r+0x9d6>
 800a542:	4b80      	ldr	r3, [pc, #512]	; (800a744 <_dtoa_r+0xbcc>)
 800a544:	4602      	mov	r2, r0
 800a546:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a54a:	f7ff bb2e 	b.w	8009baa <_dtoa_r+0x32>
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	3202      	adds	r2, #2
 800a552:	0092      	lsls	r2, r2, #2
 800a554:	f107 010c 	add.w	r1, r7, #12
 800a558:	300c      	adds	r0, #12
 800a55a:	f000 f905 	bl	800a768 <memcpy>
 800a55e:	2201      	movs	r2, #1
 800a560:	4629      	mov	r1, r5
 800a562:	4620      	mov	r0, r4
 800a564:	f000 fb20 	bl	800aba8 <__lshift>
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	9b00      	ldr	r3, [sp, #0]
 800a570:	444b      	add	r3, r9
 800a572:	9307      	str	r3, [sp, #28]
 800a574:	9b02      	ldr	r3, [sp, #8]
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	46b8      	mov	r8, r7
 800a57c:	9306      	str	r3, [sp, #24]
 800a57e:	4607      	mov	r7, r0
 800a580:	9b01      	ldr	r3, [sp, #4]
 800a582:	4631      	mov	r1, r6
 800a584:	3b01      	subs	r3, #1
 800a586:	4658      	mov	r0, fp
 800a588:	9302      	str	r3, [sp, #8]
 800a58a:	f7ff fa6a 	bl	8009a62 <quorem>
 800a58e:	4603      	mov	r3, r0
 800a590:	3330      	adds	r3, #48	; 0x30
 800a592:	9004      	str	r0, [sp, #16]
 800a594:	4641      	mov	r1, r8
 800a596:	4658      	mov	r0, fp
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	f000 fb71 	bl	800ac80 <__mcmp>
 800a59e:	463a      	mov	r2, r7
 800a5a0:	4681      	mov	r9, r0
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 fb87 	bl	800acb8 <__mdiff>
 800a5aa:	68c2      	ldr	r2, [r0, #12]
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	bb02      	cbnz	r2, 800a5f4 <_dtoa_r+0xa7c>
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4658      	mov	r0, fp
 800a5b6:	f000 fb63 	bl	800ac80 <__mcmp>
 800a5ba:	9b08      	ldr	r3, [sp, #32]
 800a5bc:	4602      	mov	r2, r0
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a5c6:	f000 f91d 	bl	800a804 <_Bfree>
 800a5ca:	9b05      	ldr	r3, [sp, #20]
 800a5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ce:	9d01      	ldr	r5, [sp, #4]
 800a5d0:	ea43 0102 	orr.w	r1, r3, r2
 800a5d4:	9b06      	ldr	r3, [sp, #24]
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	d10d      	bne.n	800a5f8 <_dtoa_r+0xa80>
 800a5dc:	2b39      	cmp	r3, #57	; 0x39
 800a5de:	d029      	beq.n	800a634 <_dtoa_r+0xabc>
 800a5e0:	f1b9 0f00 	cmp.w	r9, #0
 800a5e4:	dd01      	ble.n	800a5ea <_dtoa_r+0xa72>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	3331      	adds	r3, #49	; 0x31
 800a5ea:	9a02      	ldr	r2, [sp, #8]
 800a5ec:	7013      	strb	r3, [r2, #0]
 800a5ee:	e774      	b.n	800a4da <_dtoa_r+0x962>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	e7b9      	b.n	800a568 <_dtoa_r+0x9f0>
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	e7e2      	b.n	800a5be <_dtoa_r+0xa46>
 800a5f8:	f1b9 0f00 	cmp.w	r9, #0
 800a5fc:	db06      	blt.n	800a60c <_dtoa_r+0xa94>
 800a5fe:	9905      	ldr	r1, [sp, #20]
 800a600:	ea41 0909 	orr.w	r9, r1, r9
 800a604:	9906      	ldr	r1, [sp, #24]
 800a606:	ea59 0101 	orrs.w	r1, r9, r1
 800a60a:	d120      	bne.n	800a64e <_dtoa_r+0xad6>
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	ddec      	ble.n	800a5ea <_dtoa_r+0xa72>
 800a610:	4659      	mov	r1, fp
 800a612:	2201      	movs	r2, #1
 800a614:	4620      	mov	r0, r4
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	f000 fac6 	bl	800aba8 <__lshift>
 800a61c:	4631      	mov	r1, r6
 800a61e:	4683      	mov	fp, r0
 800a620:	f000 fb2e 	bl	800ac80 <__mcmp>
 800a624:	2800      	cmp	r0, #0
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	dc02      	bgt.n	800a630 <_dtoa_r+0xab8>
 800a62a:	d1de      	bne.n	800a5ea <_dtoa_r+0xa72>
 800a62c:	07da      	lsls	r2, r3, #31
 800a62e:	d5dc      	bpl.n	800a5ea <_dtoa_r+0xa72>
 800a630:	2b39      	cmp	r3, #57	; 0x39
 800a632:	d1d8      	bne.n	800a5e6 <_dtoa_r+0xa6e>
 800a634:	9a02      	ldr	r2, [sp, #8]
 800a636:	2339      	movs	r3, #57	; 0x39
 800a638:	7013      	strb	r3, [r2, #0]
 800a63a:	462b      	mov	r3, r5
 800a63c:	461d      	mov	r5, r3
 800a63e:	3b01      	subs	r3, #1
 800a640:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a644:	2a39      	cmp	r2, #57	; 0x39
 800a646:	d050      	beq.n	800a6ea <_dtoa_r+0xb72>
 800a648:	3201      	adds	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	e745      	b.n	800a4da <_dtoa_r+0x962>
 800a64e:	2a00      	cmp	r2, #0
 800a650:	dd03      	ble.n	800a65a <_dtoa_r+0xae2>
 800a652:	2b39      	cmp	r3, #57	; 0x39
 800a654:	d0ee      	beq.n	800a634 <_dtoa_r+0xabc>
 800a656:	3301      	adds	r3, #1
 800a658:	e7c7      	b.n	800a5ea <_dtoa_r+0xa72>
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	9907      	ldr	r1, [sp, #28]
 800a65e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a662:	428a      	cmp	r2, r1
 800a664:	d02a      	beq.n	800a6bc <_dtoa_r+0xb44>
 800a666:	4659      	mov	r1, fp
 800a668:	2300      	movs	r3, #0
 800a66a:	220a      	movs	r2, #10
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 f8eb 	bl	800a848 <__multadd>
 800a672:	45b8      	cmp	r8, r7
 800a674:	4683      	mov	fp, r0
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	f04f 020a 	mov.w	r2, #10
 800a67e:	4641      	mov	r1, r8
 800a680:	4620      	mov	r0, r4
 800a682:	d107      	bne.n	800a694 <_dtoa_r+0xb1c>
 800a684:	f000 f8e0 	bl	800a848 <__multadd>
 800a688:	4680      	mov	r8, r0
 800a68a:	4607      	mov	r7, r0
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	3301      	adds	r3, #1
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	e775      	b.n	800a580 <_dtoa_r+0xa08>
 800a694:	f000 f8d8 	bl	800a848 <__multadd>
 800a698:	4639      	mov	r1, r7
 800a69a:	4680      	mov	r8, r0
 800a69c:	2300      	movs	r3, #0
 800a69e:	220a      	movs	r2, #10
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 f8d1 	bl	800a848 <__multadd>
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	e7f0      	b.n	800a68c <_dtoa_r+0xb14>
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	9a00      	ldr	r2, [sp, #0]
 800a6b0:	bfcc      	ite	gt
 800a6b2:	464d      	movgt	r5, r9
 800a6b4:	2501      	movle	r5, #1
 800a6b6:	4415      	add	r5, r2
 800a6b8:	f04f 0800 	mov.w	r8, #0
 800a6bc:	4659      	mov	r1, fp
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	f000 fa70 	bl	800aba8 <__lshift>
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4683      	mov	fp, r0
 800a6cc:	f000 fad8 	bl	800ac80 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	dcb2      	bgt.n	800a63a <_dtoa_r+0xac2>
 800a6d4:	d102      	bne.n	800a6dc <_dtoa_r+0xb64>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	07db      	lsls	r3, r3, #31
 800a6da:	d4ae      	bmi.n	800a63a <_dtoa_r+0xac2>
 800a6dc:	462b      	mov	r3, r5
 800a6de:	461d      	mov	r5, r3
 800a6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6e4:	2a30      	cmp	r2, #48	; 0x30
 800a6e6:	d0fa      	beq.n	800a6de <_dtoa_r+0xb66>
 800a6e8:	e6f7      	b.n	800a4da <_dtoa_r+0x962>
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d1a5      	bne.n	800a63c <_dtoa_r+0xac4>
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	2331      	movs	r3, #49	; 0x31
 800a6f6:	e779      	b.n	800a5ec <_dtoa_r+0xa74>
 800a6f8:	4b13      	ldr	r3, [pc, #76]	; (800a748 <_dtoa_r+0xbd0>)
 800a6fa:	f7ff baaf 	b.w	8009c5c <_dtoa_r+0xe4>
 800a6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a700:	2b00      	cmp	r3, #0
 800a702:	f47f aa86 	bne.w	8009c12 <_dtoa_r+0x9a>
 800a706:	4b11      	ldr	r3, [pc, #68]	; (800a74c <_dtoa_r+0xbd4>)
 800a708:	f7ff baa8 	b.w	8009c5c <_dtoa_r+0xe4>
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	dc03      	bgt.n	800a71a <_dtoa_r+0xba2>
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	2b02      	cmp	r3, #2
 800a716:	f73f aec9 	bgt.w	800a4ac <_dtoa_r+0x934>
 800a71a:	9d00      	ldr	r5, [sp, #0]
 800a71c:	4631      	mov	r1, r6
 800a71e:	4658      	mov	r0, fp
 800a720:	f7ff f99f 	bl	8009a62 <quorem>
 800a724:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a728:	f805 3b01 	strb.w	r3, [r5], #1
 800a72c:	9a00      	ldr	r2, [sp, #0]
 800a72e:	1aaa      	subs	r2, r5, r2
 800a730:	4591      	cmp	r9, r2
 800a732:	ddba      	ble.n	800a6aa <_dtoa_r+0xb32>
 800a734:	4659      	mov	r1, fp
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 f884 	bl	800a848 <__multadd>
 800a740:	4683      	mov	fp, r0
 800a742:	e7eb      	b.n	800a71c <_dtoa_r+0xba4>
 800a744:	0800c0a3 	.word	0x0800c0a3
 800a748:	0800bffc 	.word	0x0800bffc
 800a74c:	0800c020 	.word	0x0800c020

0800a750 <_localeconv_r>:
 800a750:	4800      	ldr	r0, [pc, #0]	; (800a754 <_localeconv_r+0x4>)
 800a752:	4770      	bx	lr
 800a754:	20000178 	.word	0x20000178

0800a758 <malloc>:
 800a758:	4b02      	ldr	r3, [pc, #8]	; (800a764 <malloc+0xc>)
 800a75a:	4601      	mov	r1, r0
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	f000 bbef 	b.w	800af40 <_malloc_r>
 800a762:	bf00      	nop
 800a764:	20000024 	.word	0x20000024

0800a768 <memcpy>:
 800a768:	440a      	add	r2, r1
 800a76a:	4291      	cmp	r1, r2
 800a76c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a770:	d100      	bne.n	800a774 <memcpy+0xc>
 800a772:	4770      	bx	lr
 800a774:	b510      	push	{r4, lr}
 800a776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a77a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a77e:	4291      	cmp	r1, r2
 800a780:	d1f9      	bne.n	800a776 <memcpy+0xe>
 800a782:	bd10      	pop	{r4, pc}

0800a784 <_Balloc>:
 800a784:	b570      	push	{r4, r5, r6, lr}
 800a786:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a788:	4604      	mov	r4, r0
 800a78a:	460d      	mov	r5, r1
 800a78c:	b976      	cbnz	r6, 800a7ac <_Balloc+0x28>
 800a78e:	2010      	movs	r0, #16
 800a790:	f7ff ffe2 	bl	800a758 <malloc>
 800a794:	4602      	mov	r2, r0
 800a796:	6260      	str	r0, [r4, #36]	; 0x24
 800a798:	b920      	cbnz	r0, 800a7a4 <_Balloc+0x20>
 800a79a:	4b18      	ldr	r3, [pc, #96]	; (800a7fc <_Balloc+0x78>)
 800a79c:	4818      	ldr	r0, [pc, #96]	; (800a800 <_Balloc+0x7c>)
 800a79e:	2166      	movs	r1, #102	; 0x66
 800a7a0:	f000 fd94 	bl	800b2cc <__assert_func>
 800a7a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7a8:	6006      	str	r6, [r0, #0]
 800a7aa:	60c6      	str	r6, [r0, #12]
 800a7ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a7ae:	68f3      	ldr	r3, [r6, #12]
 800a7b0:	b183      	cbz	r3, 800a7d4 <_Balloc+0x50>
 800a7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7ba:	b9b8      	cbnz	r0, 800a7ec <_Balloc+0x68>
 800a7bc:	2101      	movs	r1, #1
 800a7be:	fa01 f605 	lsl.w	r6, r1, r5
 800a7c2:	1d72      	adds	r2, r6, #5
 800a7c4:	0092      	lsls	r2, r2, #2
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fb5a 	bl	800ae80 <_calloc_r>
 800a7cc:	b160      	cbz	r0, 800a7e8 <_Balloc+0x64>
 800a7ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7d2:	e00e      	b.n	800a7f2 <_Balloc+0x6e>
 800a7d4:	2221      	movs	r2, #33	; 0x21
 800a7d6:	2104      	movs	r1, #4
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fb51 	bl	800ae80 <_calloc_r>
 800a7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7e0:	60f0      	str	r0, [r6, #12]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1e4      	bne.n	800a7b2 <_Balloc+0x2e>
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	bd70      	pop	{r4, r5, r6, pc}
 800a7ec:	6802      	ldr	r2, [r0, #0]
 800a7ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7f8:	e7f7      	b.n	800a7ea <_Balloc+0x66>
 800a7fa:	bf00      	nop
 800a7fc:	0800c02d 	.word	0x0800c02d
 800a800:	0800c0b4 	.word	0x0800c0b4

0800a804 <_Bfree>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a808:	4605      	mov	r5, r0
 800a80a:	460c      	mov	r4, r1
 800a80c:	b976      	cbnz	r6, 800a82c <_Bfree+0x28>
 800a80e:	2010      	movs	r0, #16
 800a810:	f7ff ffa2 	bl	800a758 <malloc>
 800a814:	4602      	mov	r2, r0
 800a816:	6268      	str	r0, [r5, #36]	; 0x24
 800a818:	b920      	cbnz	r0, 800a824 <_Bfree+0x20>
 800a81a:	4b09      	ldr	r3, [pc, #36]	; (800a840 <_Bfree+0x3c>)
 800a81c:	4809      	ldr	r0, [pc, #36]	; (800a844 <_Bfree+0x40>)
 800a81e:	218a      	movs	r1, #138	; 0x8a
 800a820:	f000 fd54 	bl	800b2cc <__assert_func>
 800a824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a828:	6006      	str	r6, [r0, #0]
 800a82a:	60c6      	str	r6, [r0, #12]
 800a82c:	b13c      	cbz	r4, 800a83e <_Bfree+0x3a>
 800a82e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a830:	6862      	ldr	r2, [r4, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a838:	6021      	str	r1, [r4, #0]
 800a83a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a83e:	bd70      	pop	{r4, r5, r6, pc}
 800a840:	0800c02d 	.word	0x0800c02d
 800a844:	0800c0b4 	.word	0x0800c0b4

0800a848 <__multadd>:
 800a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84c:	690e      	ldr	r6, [r1, #16]
 800a84e:	4607      	mov	r7, r0
 800a850:	4698      	mov	r8, r3
 800a852:	460c      	mov	r4, r1
 800a854:	f101 0014 	add.w	r0, r1, #20
 800a858:	2300      	movs	r3, #0
 800a85a:	6805      	ldr	r5, [r0, #0]
 800a85c:	b2a9      	uxth	r1, r5
 800a85e:	fb02 8101 	mla	r1, r2, r1, r8
 800a862:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a866:	0c2d      	lsrs	r5, r5, #16
 800a868:	fb02 c505 	mla	r5, r2, r5, ip
 800a86c:	b289      	uxth	r1, r1
 800a86e:	3301      	adds	r3, #1
 800a870:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a874:	429e      	cmp	r6, r3
 800a876:	f840 1b04 	str.w	r1, [r0], #4
 800a87a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a87e:	dcec      	bgt.n	800a85a <__multadd+0x12>
 800a880:	f1b8 0f00 	cmp.w	r8, #0
 800a884:	d022      	beq.n	800a8cc <__multadd+0x84>
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	42b3      	cmp	r3, r6
 800a88a:	dc19      	bgt.n	800a8c0 <__multadd+0x78>
 800a88c:	6861      	ldr	r1, [r4, #4]
 800a88e:	4638      	mov	r0, r7
 800a890:	3101      	adds	r1, #1
 800a892:	f7ff ff77 	bl	800a784 <_Balloc>
 800a896:	4605      	mov	r5, r0
 800a898:	b928      	cbnz	r0, 800a8a6 <__multadd+0x5e>
 800a89a:	4602      	mov	r2, r0
 800a89c:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <__multadd+0x8c>)
 800a89e:	480e      	ldr	r0, [pc, #56]	; (800a8d8 <__multadd+0x90>)
 800a8a0:	21b5      	movs	r1, #181	; 0xb5
 800a8a2:	f000 fd13 	bl	800b2cc <__assert_func>
 800a8a6:	6922      	ldr	r2, [r4, #16]
 800a8a8:	3202      	adds	r2, #2
 800a8aa:	f104 010c 	add.w	r1, r4, #12
 800a8ae:	0092      	lsls	r2, r2, #2
 800a8b0:	300c      	adds	r0, #12
 800a8b2:	f7ff ff59 	bl	800a768 <memcpy>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	f7ff ffa3 	bl	800a804 <_Bfree>
 800a8be:	462c      	mov	r4, r5
 800a8c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a8c4:	3601      	adds	r6, #1
 800a8c6:	f8c3 8014 	str.w	r8, [r3, #20]
 800a8ca:	6126      	str	r6, [r4, #16]
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d2:	bf00      	nop
 800a8d4:	0800c0a3 	.word	0x0800c0a3
 800a8d8:	0800c0b4 	.word	0x0800c0b4

0800a8dc <__hi0bits>:
 800a8dc:	0c03      	lsrs	r3, r0, #16
 800a8de:	041b      	lsls	r3, r3, #16
 800a8e0:	b9d3      	cbnz	r3, 800a918 <__hi0bits+0x3c>
 800a8e2:	0400      	lsls	r0, r0, #16
 800a8e4:	2310      	movs	r3, #16
 800a8e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a8ea:	bf04      	itt	eq
 800a8ec:	0200      	lsleq	r0, r0, #8
 800a8ee:	3308      	addeq	r3, #8
 800a8f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a8f4:	bf04      	itt	eq
 800a8f6:	0100      	lsleq	r0, r0, #4
 800a8f8:	3304      	addeq	r3, #4
 800a8fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a8fe:	bf04      	itt	eq
 800a900:	0080      	lsleq	r0, r0, #2
 800a902:	3302      	addeq	r3, #2
 800a904:	2800      	cmp	r0, #0
 800a906:	db05      	blt.n	800a914 <__hi0bits+0x38>
 800a908:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a90c:	f103 0301 	add.w	r3, r3, #1
 800a910:	bf08      	it	eq
 800a912:	2320      	moveq	r3, #32
 800a914:	4618      	mov	r0, r3
 800a916:	4770      	bx	lr
 800a918:	2300      	movs	r3, #0
 800a91a:	e7e4      	b.n	800a8e6 <__hi0bits+0xa>

0800a91c <__lo0bits>:
 800a91c:	6803      	ldr	r3, [r0, #0]
 800a91e:	f013 0207 	ands.w	r2, r3, #7
 800a922:	4601      	mov	r1, r0
 800a924:	d00b      	beq.n	800a93e <__lo0bits+0x22>
 800a926:	07da      	lsls	r2, r3, #31
 800a928:	d424      	bmi.n	800a974 <__lo0bits+0x58>
 800a92a:	0798      	lsls	r0, r3, #30
 800a92c:	bf49      	itett	mi
 800a92e:	085b      	lsrmi	r3, r3, #1
 800a930:	089b      	lsrpl	r3, r3, #2
 800a932:	2001      	movmi	r0, #1
 800a934:	600b      	strmi	r3, [r1, #0]
 800a936:	bf5c      	itt	pl
 800a938:	600b      	strpl	r3, [r1, #0]
 800a93a:	2002      	movpl	r0, #2
 800a93c:	4770      	bx	lr
 800a93e:	b298      	uxth	r0, r3
 800a940:	b9b0      	cbnz	r0, 800a970 <__lo0bits+0x54>
 800a942:	0c1b      	lsrs	r3, r3, #16
 800a944:	2010      	movs	r0, #16
 800a946:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a94a:	bf04      	itt	eq
 800a94c:	0a1b      	lsreq	r3, r3, #8
 800a94e:	3008      	addeq	r0, #8
 800a950:	071a      	lsls	r2, r3, #28
 800a952:	bf04      	itt	eq
 800a954:	091b      	lsreq	r3, r3, #4
 800a956:	3004      	addeq	r0, #4
 800a958:	079a      	lsls	r2, r3, #30
 800a95a:	bf04      	itt	eq
 800a95c:	089b      	lsreq	r3, r3, #2
 800a95e:	3002      	addeq	r0, #2
 800a960:	07da      	lsls	r2, r3, #31
 800a962:	d403      	bmi.n	800a96c <__lo0bits+0x50>
 800a964:	085b      	lsrs	r3, r3, #1
 800a966:	f100 0001 	add.w	r0, r0, #1
 800a96a:	d005      	beq.n	800a978 <__lo0bits+0x5c>
 800a96c:	600b      	str	r3, [r1, #0]
 800a96e:	4770      	bx	lr
 800a970:	4610      	mov	r0, r2
 800a972:	e7e8      	b.n	800a946 <__lo0bits+0x2a>
 800a974:	2000      	movs	r0, #0
 800a976:	4770      	bx	lr
 800a978:	2020      	movs	r0, #32
 800a97a:	4770      	bx	lr

0800a97c <__i2b>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	460c      	mov	r4, r1
 800a980:	2101      	movs	r1, #1
 800a982:	f7ff feff 	bl	800a784 <_Balloc>
 800a986:	4602      	mov	r2, r0
 800a988:	b928      	cbnz	r0, 800a996 <__i2b+0x1a>
 800a98a:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <__i2b+0x24>)
 800a98c:	4805      	ldr	r0, [pc, #20]	; (800a9a4 <__i2b+0x28>)
 800a98e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a992:	f000 fc9b 	bl	800b2cc <__assert_func>
 800a996:	2301      	movs	r3, #1
 800a998:	6144      	str	r4, [r0, #20]
 800a99a:	6103      	str	r3, [r0, #16]
 800a99c:	bd10      	pop	{r4, pc}
 800a99e:	bf00      	nop
 800a9a0:	0800c0a3 	.word	0x0800c0a3
 800a9a4:	0800c0b4 	.word	0x0800c0b4

0800a9a8 <__multiply>:
 800a9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ac:	4614      	mov	r4, r2
 800a9ae:	690a      	ldr	r2, [r1, #16]
 800a9b0:	6923      	ldr	r3, [r4, #16]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	bfb8      	it	lt
 800a9b6:	460b      	movlt	r3, r1
 800a9b8:	460d      	mov	r5, r1
 800a9ba:	bfbc      	itt	lt
 800a9bc:	4625      	movlt	r5, r4
 800a9be:	461c      	movlt	r4, r3
 800a9c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9c8:	68ab      	ldr	r3, [r5, #8]
 800a9ca:	6869      	ldr	r1, [r5, #4]
 800a9cc:	eb0a 0709 	add.w	r7, sl, r9
 800a9d0:	42bb      	cmp	r3, r7
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	bfb8      	it	lt
 800a9d6:	3101      	addlt	r1, #1
 800a9d8:	f7ff fed4 	bl	800a784 <_Balloc>
 800a9dc:	b930      	cbnz	r0, 800a9ec <__multiply+0x44>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	4b42      	ldr	r3, [pc, #264]	; (800aaec <__multiply+0x144>)
 800a9e2:	4843      	ldr	r0, [pc, #268]	; (800aaf0 <__multiply+0x148>)
 800a9e4:	f240 115d 	movw	r1, #349	; 0x15d
 800a9e8:	f000 fc70 	bl	800b2cc <__assert_func>
 800a9ec:	f100 0614 	add.w	r6, r0, #20
 800a9f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a9f4:	4633      	mov	r3, r6
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4543      	cmp	r3, r8
 800a9fa:	d31e      	bcc.n	800aa3a <__multiply+0x92>
 800a9fc:	f105 0c14 	add.w	ip, r5, #20
 800aa00:	f104 0314 	add.w	r3, r4, #20
 800aa04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aa08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aa0c:	9202      	str	r2, [sp, #8]
 800aa0e:	ebac 0205 	sub.w	r2, ip, r5
 800aa12:	3a15      	subs	r2, #21
 800aa14:	f022 0203 	bic.w	r2, r2, #3
 800aa18:	3204      	adds	r2, #4
 800aa1a:	f105 0115 	add.w	r1, r5, #21
 800aa1e:	458c      	cmp	ip, r1
 800aa20:	bf38      	it	cc
 800aa22:	2204      	movcc	r2, #4
 800aa24:	9201      	str	r2, [sp, #4]
 800aa26:	9a02      	ldr	r2, [sp, #8]
 800aa28:	9303      	str	r3, [sp, #12]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d808      	bhi.n	800aa40 <__multiply+0x98>
 800aa2e:	2f00      	cmp	r7, #0
 800aa30:	dc55      	bgt.n	800aade <__multiply+0x136>
 800aa32:	6107      	str	r7, [r0, #16]
 800aa34:	b005      	add	sp, #20
 800aa36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa3a:	f843 2b04 	str.w	r2, [r3], #4
 800aa3e:	e7db      	b.n	800a9f8 <__multiply+0x50>
 800aa40:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa44:	f1ba 0f00 	cmp.w	sl, #0
 800aa48:	d020      	beq.n	800aa8c <__multiply+0xe4>
 800aa4a:	f105 0e14 	add.w	lr, r5, #20
 800aa4e:	46b1      	mov	r9, r6
 800aa50:	2200      	movs	r2, #0
 800aa52:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa56:	f8d9 b000 	ldr.w	fp, [r9]
 800aa5a:	b2a1      	uxth	r1, r4
 800aa5c:	fa1f fb8b 	uxth.w	fp, fp
 800aa60:	fb0a b101 	mla	r1, sl, r1, fp
 800aa64:	4411      	add	r1, r2
 800aa66:	f8d9 2000 	ldr.w	r2, [r9]
 800aa6a:	0c24      	lsrs	r4, r4, #16
 800aa6c:	0c12      	lsrs	r2, r2, #16
 800aa6e:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa76:	b289      	uxth	r1, r1
 800aa78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aa7c:	45f4      	cmp	ip, lr
 800aa7e:	f849 1b04 	str.w	r1, [r9], #4
 800aa82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aa86:	d8e4      	bhi.n	800aa52 <__multiply+0xaa>
 800aa88:	9901      	ldr	r1, [sp, #4]
 800aa8a:	5072      	str	r2, [r6, r1]
 800aa8c:	9a03      	ldr	r2, [sp, #12]
 800aa8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aa92:	3304      	adds	r3, #4
 800aa94:	f1b9 0f00 	cmp.w	r9, #0
 800aa98:	d01f      	beq.n	800aada <__multiply+0x132>
 800aa9a:	6834      	ldr	r4, [r6, #0]
 800aa9c:	f105 0114 	add.w	r1, r5, #20
 800aaa0:	46b6      	mov	lr, r6
 800aaa2:	f04f 0a00 	mov.w	sl, #0
 800aaa6:	880a      	ldrh	r2, [r1, #0]
 800aaa8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aaac:	fb09 b202 	mla	r2, r9, r2, fp
 800aab0:	4492      	add	sl, r2
 800aab2:	b2a4      	uxth	r4, r4
 800aab4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aab8:	f84e 4b04 	str.w	r4, [lr], #4
 800aabc:	f851 4b04 	ldr.w	r4, [r1], #4
 800aac0:	f8be 2000 	ldrh.w	r2, [lr]
 800aac4:	0c24      	lsrs	r4, r4, #16
 800aac6:	fb09 2404 	mla	r4, r9, r4, r2
 800aaca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aace:	458c      	cmp	ip, r1
 800aad0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aad4:	d8e7      	bhi.n	800aaa6 <__multiply+0xfe>
 800aad6:	9a01      	ldr	r2, [sp, #4]
 800aad8:	50b4      	str	r4, [r6, r2]
 800aada:	3604      	adds	r6, #4
 800aadc:	e7a3      	b.n	800aa26 <__multiply+0x7e>
 800aade:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d1a5      	bne.n	800aa32 <__multiply+0x8a>
 800aae6:	3f01      	subs	r7, #1
 800aae8:	e7a1      	b.n	800aa2e <__multiply+0x86>
 800aaea:	bf00      	nop
 800aaec:	0800c0a3 	.word	0x0800c0a3
 800aaf0:	0800c0b4 	.word	0x0800c0b4

0800aaf4 <__pow5mult>:
 800aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf8:	4615      	mov	r5, r2
 800aafa:	f012 0203 	ands.w	r2, r2, #3
 800aafe:	4606      	mov	r6, r0
 800ab00:	460f      	mov	r7, r1
 800ab02:	d007      	beq.n	800ab14 <__pow5mult+0x20>
 800ab04:	4c25      	ldr	r4, [pc, #148]	; (800ab9c <__pow5mult+0xa8>)
 800ab06:	3a01      	subs	r2, #1
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab0e:	f7ff fe9b 	bl	800a848 <__multadd>
 800ab12:	4607      	mov	r7, r0
 800ab14:	10ad      	asrs	r5, r5, #2
 800ab16:	d03d      	beq.n	800ab94 <__pow5mult+0xa0>
 800ab18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab1a:	b97c      	cbnz	r4, 800ab3c <__pow5mult+0x48>
 800ab1c:	2010      	movs	r0, #16
 800ab1e:	f7ff fe1b 	bl	800a758 <malloc>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6270      	str	r0, [r6, #36]	; 0x24
 800ab26:	b928      	cbnz	r0, 800ab34 <__pow5mult+0x40>
 800ab28:	4b1d      	ldr	r3, [pc, #116]	; (800aba0 <__pow5mult+0xac>)
 800ab2a:	481e      	ldr	r0, [pc, #120]	; (800aba4 <__pow5mult+0xb0>)
 800ab2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab30:	f000 fbcc 	bl	800b2cc <__assert_func>
 800ab34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab38:	6004      	str	r4, [r0, #0]
 800ab3a:	60c4      	str	r4, [r0, #12]
 800ab3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab44:	b94c      	cbnz	r4, 800ab5a <__pow5mult+0x66>
 800ab46:	f240 2171 	movw	r1, #625	; 0x271
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ff16 	bl	800a97c <__i2b>
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab56:	4604      	mov	r4, r0
 800ab58:	6003      	str	r3, [r0, #0]
 800ab5a:	f04f 0900 	mov.w	r9, #0
 800ab5e:	07eb      	lsls	r3, r5, #31
 800ab60:	d50a      	bpl.n	800ab78 <__pow5mult+0x84>
 800ab62:	4639      	mov	r1, r7
 800ab64:	4622      	mov	r2, r4
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7ff ff1e 	bl	800a9a8 <__multiply>
 800ab6c:	4639      	mov	r1, r7
 800ab6e:	4680      	mov	r8, r0
 800ab70:	4630      	mov	r0, r6
 800ab72:	f7ff fe47 	bl	800a804 <_Bfree>
 800ab76:	4647      	mov	r7, r8
 800ab78:	106d      	asrs	r5, r5, #1
 800ab7a:	d00b      	beq.n	800ab94 <__pow5mult+0xa0>
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	b938      	cbnz	r0, 800ab90 <__pow5mult+0x9c>
 800ab80:	4622      	mov	r2, r4
 800ab82:	4621      	mov	r1, r4
 800ab84:	4630      	mov	r0, r6
 800ab86:	f7ff ff0f 	bl	800a9a8 <__multiply>
 800ab8a:	6020      	str	r0, [r4, #0]
 800ab8c:	f8c0 9000 	str.w	r9, [r0]
 800ab90:	4604      	mov	r4, r0
 800ab92:	e7e4      	b.n	800ab5e <__pow5mult+0x6a>
 800ab94:	4638      	mov	r0, r7
 800ab96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9a:	bf00      	nop
 800ab9c:	0800c208 	.word	0x0800c208
 800aba0:	0800c02d 	.word	0x0800c02d
 800aba4:	0800c0b4 	.word	0x0800c0b4

0800aba8 <__lshift>:
 800aba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abac:	460c      	mov	r4, r1
 800abae:	6849      	ldr	r1, [r1, #4]
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abb6:	68a3      	ldr	r3, [r4, #8]
 800abb8:	4607      	mov	r7, r0
 800abba:	4691      	mov	r9, r2
 800abbc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abc0:	f108 0601 	add.w	r6, r8, #1
 800abc4:	42b3      	cmp	r3, r6
 800abc6:	db0b      	blt.n	800abe0 <__lshift+0x38>
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff fddb 	bl	800a784 <_Balloc>
 800abce:	4605      	mov	r5, r0
 800abd0:	b948      	cbnz	r0, 800abe6 <__lshift+0x3e>
 800abd2:	4602      	mov	r2, r0
 800abd4:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <__lshift+0xd0>)
 800abd6:	4829      	ldr	r0, [pc, #164]	; (800ac7c <__lshift+0xd4>)
 800abd8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800abdc:	f000 fb76 	bl	800b2cc <__assert_func>
 800abe0:	3101      	adds	r1, #1
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	e7ee      	b.n	800abc4 <__lshift+0x1c>
 800abe6:	2300      	movs	r3, #0
 800abe8:	f100 0114 	add.w	r1, r0, #20
 800abec:	f100 0210 	add.w	r2, r0, #16
 800abf0:	4618      	mov	r0, r3
 800abf2:	4553      	cmp	r3, sl
 800abf4:	db33      	blt.n	800ac5e <__lshift+0xb6>
 800abf6:	6920      	ldr	r0, [r4, #16]
 800abf8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abfc:	f104 0314 	add.w	r3, r4, #20
 800ac00:	f019 091f 	ands.w	r9, r9, #31
 800ac04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac08:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac0c:	d02b      	beq.n	800ac66 <__lshift+0xbe>
 800ac0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac12:	468a      	mov	sl, r1
 800ac14:	2200      	movs	r2, #0
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	fa00 f009 	lsl.w	r0, r0, r9
 800ac1c:	4302      	orrs	r2, r0
 800ac1e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac22:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac26:	459c      	cmp	ip, r3
 800ac28:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac2c:	d8f3      	bhi.n	800ac16 <__lshift+0x6e>
 800ac2e:	ebac 0304 	sub.w	r3, ip, r4
 800ac32:	3b15      	subs	r3, #21
 800ac34:	f023 0303 	bic.w	r3, r3, #3
 800ac38:	3304      	adds	r3, #4
 800ac3a:	f104 0015 	add.w	r0, r4, #21
 800ac3e:	4584      	cmp	ip, r0
 800ac40:	bf38      	it	cc
 800ac42:	2304      	movcc	r3, #4
 800ac44:	50ca      	str	r2, [r1, r3]
 800ac46:	b10a      	cbz	r2, 800ac4c <__lshift+0xa4>
 800ac48:	f108 0602 	add.w	r6, r8, #2
 800ac4c:	3e01      	subs	r6, #1
 800ac4e:	4638      	mov	r0, r7
 800ac50:	612e      	str	r6, [r5, #16]
 800ac52:	4621      	mov	r1, r4
 800ac54:	f7ff fdd6 	bl	800a804 <_Bfree>
 800ac58:	4628      	mov	r0, r5
 800ac5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac62:	3301      	adds	r3, #1
 800ac64:	e7c5      	b.n	800abf2 <__lshift+0x4a>
 800ac66:	3904      	subs	r1, #4
 800ac68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac6c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac70:	459c      	cmp	ip, r3
 800ac72:	d8f9      	bhi.n	800ac68 <__lshift+0xc0>
 800ac74:	e7ea      	b.n	800ac4c <__lshift+0xa4>
 800ac76:	bf00      	nop
 800ac78:	0800c0a3 	.word	0x0800c0a3
 800ac7c:	0800c0b4 	.word	0x0800c0b4

0800ac80 <__mcmp>:
 800ac80:	b530      	push	{r4, r5, lr}
 800ac82:	6902      	ldr	r2, [r0, #16]
 800ac84:	690c      	ldr	r4, [r1, #16]
 800ac86:	1b12      	subs	r2, r2, r4
 800ac88:	d10e      	bne.n	800aca8 <__mcmp+0x28>
 800ac8a:	f100 0314 	add.w	r3, r0, #20
 800ac8e:	3114      	adds	r1, #20
 800ac90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ac94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aca0:	42a5      	cmp	r5, r4
 800aca2:	d003      	beq.n	800acac <__mcmp+0x2c>
 800aca4:	d305      	bcc.n	800acb2 <__mcmp+0x32>
 800aca6:	2201      	movs	r2, #1
 800aca8:	4610      	mov	r0, r2
 800acaa:	bd30      	pop	{r4, r5, pc}
 800acac:	4283      	cmp	r3, r0
 800acae:	d3f3      	bcc.n	800ac98 <__mcmp+0x18>
 800acb0:	e7fa      	b.n	800aca8 <__mcmp+0x28>
 800acb2:	f04f 32ff 	mov.w	r2, #4294967295
 800acb6:	e7f7      	b.n	800aca8 <__mcmp+0x28>

0800acb8 <__mdiff>:
 800acb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acbc:	460c      	mov	r4, r1
 800acbe:	4606      	mov	r6, r0
 800acc0:	4611      	mov	r1, r2
 800acc2:	4620      	mov	r0, r4
 800acc4:	4617      	mov	r7, r2
 800acc6:	f7ff ffdb 	bl	800ac80 <__mcmp>
 800acca:	1e05      	subs	r5, r0, #0
 800accc:	d110      	bne.n	800acf0 <__mdiff+0x38>
 800acce:	4629      	mov	r1, r5
 800acd0:	4630      	mov	r0, r6
 800acd2:	f7ff fd57 	bl	800a784 <_Balloc>
 800acd6:	b930      	cbnz	r0, 800ace6 <__mdiff+0x2e>
 800acd8:	4b39      	ldr	r3, [pc, #228]	; (800adc0 <__mdiff+0x108>)
 800acda:	4602      	mov	r2, r0
 800acdc:	f240 2132 	movw	r1, #562	; 0x232
 800ace0:	4838      	ldr	r0, [pc, #224]	; (800adc4 <__mdiff+0x10c>)
 800ace2:	f000 faf3 	bl	800b2cc <__assert_func>
 800ace6:	2301      	movs	r3, #1
 800ace8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf0:	bfa4      	itt	ge
 800acf2:	463b      	movge	r3, r7
 800acf4:	4627      	movge	r7, r4
 800acf6:	4630      	mov	r0, r6
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	bfa6      	itte	ge
 800acfc:	461c      	movge	r4, r3
 800acfe:	2500      	movge	r5, #0
 800ad00:	2501      	movlt	r5, #1
 800ad02:	f7ff fd3f 	bl	800a784 <_Balloc>
 800ad06:	b920      	cbnz	r0, 800ad12 <__mdiff+0x5a>
 800ad08:	4b2d      	ldr	r3, [pc, #180]	; (800adc0 <__mdiff+0x108>)
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad10:	e7e6      	b.n	800ace0 <__mdiff+0x28>
 800ad12:	693e      	ldr	r6, [r7, #16]
 800ad14:	60c5      	str	r5, [r0, #12]
 800ad16:	6925      	ldr	r5, [r4, #16]
 800ad18:	f107 0114 	add.w	r1, r7, #20
 800ad1c:	f104 0914 	add.w	r9, r4, #20
 800ad20:	f100 0e14 	add.w	lr, r0, #20
 800ad24:	f107 0210 	add.w	r2, r7, #16
 800ad28:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad2c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad30:	46f2      	mov	sl, lr
 800ad32:	2700      	movs	r7, #0
 800ad34:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad3c:	fa1f f883 	uxth.w	r8, r3
 800ad40:	fa17 f78b 	uxtah	r7, r7, fp
 800ad44:	0c1b      	lsrs	r3, r3, #16
 800ad46:	eba7 0808 	sub.w	r8, r7, r8
 800ad4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad52:	fa1f f888 	uxth.w	r8, r8
 800ad56:	141f      	asrs	r7, r3, #16
 800ad58:	454d      	cmp	r5, r9
 800ad5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad5e:	f84a 3b04 	str.w	r3, [sl], #4
 800ad62:	d8e7      	bhi.n	800ad34 <__mdiff+0x7c>
 800ad64:	1b2b      	subs	r3, r5, r4
 800ad66:	3b15      	subs	r3, #21
 800ad68:	f023 0303 	bic.w	r3, r3, #3
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	3415      	adds	r4, #21
 800ad70:	42a5      	cmp	r5, r4
 800ad72:	bf38      	it	cc
 800ad74:	2304      	movcc	r3, #4
 800ad76:	4419      	add	r1, r3
 800ad78:	4473      	add	r3, lr
 800ad7a:	469e      	mov	lr, r3
 800ad7c:	460d      	mov	r5, r1
 800ad7e:	4565      	cmp	r5, ip
 800ad80:	d30e      	bcc.n	800ada0 <__mdiff+0xe8>
 800ad82:	f10c 0203 	add.w	r2, ip, #3
 800ad86:	1a52      	subs	r2, r2, r1
 800ad88:	f022 0203 	bic.w	r2, r2, #3
 800ad8c:	3903      	subs	r1, #3
 800ad8e:	458c      	cmp	ip, r1
 800ad90:	bf38      	it	cc
 800ad92:	2200      	movcc	r2, #0
 800ad94:	441a      	add	r2, r3
 800ad96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad9a:	b17b      	cbz	r3, 800adbc <__mdiff+0x104>
 800ad9c:	6106      	str	r6, [r0, #16]
 800ad9e:	e7a5      	b.n	800acec <__mdiff+0x34>
 800ada0:	f855 8b04 	ldr.w	r8, [r5], #4
 800ada4:	fa17 f488 	uxtah	r4, r7, r8
 800ada8:	1422      	asrs	r2, r4, #16
 800adaa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800adae:	b2a4      	uxth	r4, r4
 800adb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800adb4:	f84e 4b04 	str.w	r4, [lr], #4
 800adb8:	1417      	asrs	r7, r2, #16
 800adba:	e7e0      	b.n	800ad7e <__mdiff+0xc6>
 800adbc:	3e01      	subs	r6, #1
 800adbe:	e7ea      	b.n	800ad96 <__mdiff+0xde>
 800adc0:	0800c0a3 	.word	0x0800c0a3
 800adc4:	0800c0b4 	.word	0x0800c0b4

0800adc8 <__d2b>:
 800adc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adcc:	4689      	mov	r9, r1
 800adce:	2101      	movs	r1, #1
 800add0:	ec57 6b10 	vmov	r6, r7, d0
 800add4:	4690      	mov	r8, r2
 800add6:	f7ff fcd5 	bl	800a784 <_Balloc>
 800adda:	4604      	mov	r4, r0
 800addc:	b930      	cbnz	r0, 800adec <__d2b+0x24>
 800adde:	4602      	mov	r2, r0
 800ade0:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <__d2b+0xb0>)
 800ade2:	4826      	ldr	r0, [pc, #152]	; (800ae7c <__d2b+0xb4>)
 800ade4:	f240 310a 	movw	r1, #778	; 0x30a
 800ade8:	f000 fa70 	bl	800b2cc <__assert_func>
 800adec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800adf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800adf4:	bb35      	cbnz	r5, 800ae44 <__d2b+0x7c>
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	d028      	beq.n	800ae4e <__d2b+0x86>
 800adfc:	4668      	mov	r0, sp
 800adfe:	9600      	str	r6, [sp, #0]
 800ae00:	f7ff fd8c 	bl	800a91c <__lo0bits>
 800ae04:	9900      	ldr	r1, [sp, #0]
 800ae06:	b300      	cbz	r0, 800ae4a <__d2b+0x82>
 800ae08:	9a01      	ldr	r2, [sp, #4]
 800ae0a:	f1c0 0320 	rsb	r3, r0, #32
 800ae0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae12:	430b      	orrs	r3, r1
 800ae14:	40c2      	lsrs	r2, r0
 800ae16:	6163      	str	r3, [r4, #20]
 800ae18:	9201      	str	r2, [sp, #4]
 800ae1a:	9b01      	ldr	r3, [sp, #4]
 800ae1c:	61a3      	str	r3, [r4, #24]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	bf14      	ite	ne
 800ae22:	2202      	movne	r2, #2
 800ae24:	2201      	moveq	r2, #1
 800ae26:	6122      	str	r2, [r4, #16]
 800ae28:	b1d5      	cbz	r5, 800ae60 <__d2b+0x98>
 800ae2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae2e:	4405      	add	r5, r0
 800ae30:	f8c9 5000 	str.w	r5, [r9]
 800ae34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae38:	f8c8 0000 	str.w	r0, [r8]
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	b003      	add	sp, #12
 800ae40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae48:	e7d5      	b.n	800adf6 <__d2b+0x2e>
 800ae4a:	6161      	str	r1, [r4, #20]
 800ae4c:	e7e5      	b.n	800ae1a <__d2b+0x52>
 800ae4e:	a801      	add	r0, sp, #4
 800ae50:	f7ff fd64 	bl	800a91c <__lo0bits>
 800ae54:	9b01      	ldr	r3, [sp, #4]
 800ae56:	6163      	str	r3, [r4, #20]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	6122      	str	r2, [r4, #16]
 800ae5c:	3020      	adds	r0, #32
 800ae5e:	e7e3      	b.n	800ae28 <__d2b+0x60>
 800ae60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae68:	f8c9 0000 	str.w	r0, [r9]
 800ae6c:	6918      	ldr	r0, [r3, #16]
 800ae6e:	f7ff fd35 	bl	800a8dc <__hi0bits>
 800ae72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae76:	e7df      	b.n	800ae38 <__d2b+0x70>
 800ae78:	0800c0a3 	.word	0x0800c0a3
 800ae7c:	0800c0b4 	.word	0x0800c0b4

0800ae80 <_calloc_r>:
 800ae80:	b513      	push	{r0, r1, r4, lr}
 800ae82:	434a      	muls	r2, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	9201      	str	r2, [sp, #4]
 800ae88:	f000 f85a 	bl	800af40 <_malloc_r>
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	b118      	cbz	r0, 800ae98 <_calloc_r+0x18>
 800ae90:	9a01      	ldr	r2, [sp, #4]
 800ae92:	2100      	movs	r1, #0
 800ae94:	f7fe f944 	bl	8009120 <memset>
 800ae98:	4620      	mov	r0, r4
 800ae9a:	b002      	add	sp, #8
 800ae9c:	bd10      	pop	{r4, pc}
	...

0800aea0 <_free_r>:
 800aea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aea2:	2900      	cmp	r1, #0
 800aea4:	d048      	beq.n	800af38 <_free_r+0x98>
 800aea6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeaa:	9001      	str	r0, [sp, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	f1a1 0404 	sub.w	r4, r1, #4
 800aeb2:	bfb8      	it	lt
 800aeb4:	18e4      	addlt	r4, r4, r3
 800aeb6:	f000 fa65 	bl	800b384 <__malloc_lock>
 800aeba:	4a20      	ldr	r2, [pc, #128]	; (800af3c <_free_r+0x9c>)
 800aebc:	9801      	ldr	r0, [sp, #4]
 800aebe:	6813      	ldr	r3, [r2, #0]
 800aec0:	4615      	mov	r5, r2
 800aec2:	b933      	cbnz	r3, 800aed2 <_free_r+0x32>
 800aec4:	6063      	str	r3, [r4, #4]
 800aec6:	6014      	str	r4, [r2, #0]
 800aec8:	b003      	add	sp, #12
 800aeca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aece:	f000 ba5f 	b.w	800b390 <__malloc_unlock>
 800aed2:	42a3      	cmp	r3, r4
 800aed4:	d90b      	bls.n	800aeee <_free_r+0x4e>
 800aed6:	6821      	ldr	r1, [r4, #0]
 800aed8:	1862      	adds	r2, r4, r1
 800aeda:	4293      	cmp	r3, r2
 800aedc:	bf04      	itt	eq
 800aede:	681a      	ldreq	r2, [r3, #0]
 800aee0:	685b      	ldreq	r3, [r3, #4]
 800aee2:	6063      	str	r3, [r4, #4]
 800aee4:	bf04      	itt	eq
 800aee6:	1852      	addeq	r2, r2, r1
 800aee8:	6022      	streq	r2, [r4, #0]
 800aeea:	602c      	str	r4, [r5, #0]
 800aeec:	e7ec      	b.n	800aec8 <_free_r+0x28>
 800aeee:	461a      	mov	r2, r3
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	b10b      	cbz	r3, 800aef8 <_free_r+0x58>
 800aef4:	42a3      	cmp	r3, r4
 800aef6:	d9fa      	bls.n	800aeee <_free_r+0x4e>
 800aef8:	6811      	ldr	r1, [r2, #0]
 800aefa:	1855      	adds	r5, r2, r1
 800aefc:	42a5      	cmp	r5, r4
 800aefe:	d10b      	bne.n	800af18 <_free_r+0x78>
 800af00:	6824      	ldr	r4, [r4, #0]
 800af02:	4421      	add	r1, r4
 800af04:	1854      	adds	r4, r2, r1
 800af06:	42a3      	cmp	r3, r4
 800af08:	6011      	str	r1, [r2, #0]
 800af0a:	d1dd      	bne.n	800aec8 <_free_r+0x28>
 800af0c:	681c      	ldr	r4, [r3, #0]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	6053      	str	r3, [r2, #4]
 800af12:	4421      	add	r1, r4
 800af14:	6011      	str	r1, [r2, #0]
 800af16:	e7d7      	b.n	800aec8 <_free_r+0x28>
 800af18:	d902      	bls.n	800af20 <_free_r+0x80>
 800af1a:	230c      	movs	r3, #12
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	e7d3      	b.n	800aec8 <_free_r+0x28>
 800af20:	6825      	ldr	r5, [r4, #0]
 800af22:	1961      	adds	r1, r4, r5
 800af24:	428b      	cmp	r3, r1
 800af26:	bf04      	itt	eq
 800af28:	6819      	ldreq	r1, [r3, #0]
 800af2a:	685b      	ldreq	r3, [r3, #4]
 800af2c:	6063      	str	r3, [r4, #4]
 800af2e:	bf04      	itt	eq
 800af30:	1949      	addeq	r1, r1, r5
 800af32:	6021      	streq	r1, [r4, #0]
 800af34:	6054      	str	r4, [r2, #4]
 800af36:	e7c7      	b.n	800aec8 <_free_r+0x28>
 800af38:	b003      	add	sp, #12
 800af3a:	bd30      	pop	{r4, r5, pc}
 800af3c:	200002dc 	.word	0x200002dc

0800af40 <_malloc_r>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	1ccd      	adds	r5, r1, #3
 800af44:	f025 0503 	bic.w	r5, r5, #3
 800af48:	3508      	adds	r5, #8
 800af4a:	2d0c      	cmp	r5, #12
 800af4c:	bf38      	it	cc
 800af4e:	250c      	movcc	r5, #12
 800af50:	2d00      	cmp	r5, #0
 800af52:	4606      	mov	r6, r0
 800af54:	db01      	blt.n	800af5a <_malloc_r+0x1a>
 800af56:	42a9      	cmp	r1, r5
 800af58:	d903      	bls.n	800af62 <_malloc_r+0x22>
 800af5a:	230c      	movs	r3, #12
 800af5c:	6033      	str	r3, [r6, #0]
 800af5e:	2000      	movs	r0, #0
 800af60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af62:	f000 fa0f 	bl	800b384 <__malloc_lock>
 800af66:	4921      	ldr	r1, [pc, #132]	; (800afec <_malloc_r+0xac>)
 800af68:	680a      	ldr	r2, [r1, #0]
 800af6a:	4614      	mov	r4, r2
 800af6c:	b99c      	cbnz	r4, 800af96 <_malloc_r+0x56>
 800af6e:	4f20      	ldr	r7, [pc, #128]	; (800aff0 <_malloc_r+0xb0>)
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	b923      	cbnz	r3, 800af7e <_malloc_r+0x3e>
 800af74:	4621      	mov	r1, r4
 800af76:	4630      	mov	r0, r6
 800af78:	f000 f998 	bl	800b2ac <_sbrk_r>
 800af7c:	6038      	str	r0, [r7, #0]
 800af7e:	4629      	mov	r1, r5
 800af80:	4630      	mov	r0, r6
 800af82:	f000 f993 	bl	800b2ac <_sbrk_r>
 800af86:	1c43      	adds	r3, r0, #1
 800af88:	d123      	bne.n	800afd2 <_malloc_r+0x92>
 800af8a:	230c      	movs	r3, #12
 800af8c:	6033      	str	r3, [r6, #0]
 800af8e:	4630      	mov	r0, r6
 800af90:	f000 f9fe 	bl	800b390 <__malloc_unlock>
 800af94:	e7e3      	b.n	800af5e <_malloc_r+0x1e>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	1b5b      	subs	r3, r3, r5
 800af9a:	d417      	bmi.n	800afcc <_malloc_r+0x8c>
 800af9c:	2b0b      	cmp	r3, #11
 800af9e:	d903      	bls.n	800afa8 <_malloc_r+0x68>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	441c      	add	r4, r3
 800afa4:	6025      	str	r5, [r4, #0]
 800afa6:	e004      	b.n	800afb2 <_malloc_r+0x72>
 800afa8:	6863      	ldr	r3, [r4, #4]
 800afaa:	42a2      	cmp	r2, r4
 800afac:	bf0c      	ite	eq
 800afae:	600b      	streq	r3, [r1, #0]
 800afb0:	6053      	strne	r3, [r2, #4]
 800afb2:	4630      	mov	r0, r6
 800afb4:	f000 f9ec 	bl	800b390 <__malloc_unlock>
 800afb8:	f104 000b 	add.w	r0, r4, #11
 800afbc:	1d23      	adds	r3, r4, #4
 800afbe:	f020 0007 	bic.w	r0, r0, #7
 800afc2:	1ac2      	subs	r2, r0, r3
 800afc4:	d0cc      	beq.n	800af60 <_malloc_r+0x20>
 800afc6:	1a1b      	subs	r3, r3, r0
 800afc8:	50a3      	str	r3, [r4, r2]
 800afca:	e7c9      	b.n	800af60 <_malloc_r+0x20>
 800afcc:	4622      	mov	r2, r4
 800afce:	6864      	ldr	r4, [r4, #4]
 800afd0:	e7cc      	b.n	800af6c <_malloc_r+0x2c>
 800afd2:	1cc4      	adds	r4, r0, #3
 800afd4:	f024 0403 	bic.w	r4, r4, #3
 800afd8:	42a0      	cmp	r0, r4
 800afda:	d0e3      	beq.n	800afa4 <_malloc_r+0x64>
 800afdc:	1a21      	subs	r1, r4, r0
 800afde:	4630      	mov	r0, r6
 800afe0:	f000 f964 	bl	800b2ac <_sbrk_r>
 800afe4:	3001      	adds	r0, #1
 800afe6:	d1dd      	bne.n	800afa4 <_malloc_r+0x64>
 800afe8:	e7cf      	b.n	800af8a <_malloc_r+0x4a>
 800afea:	bf00      	nop
 800afec:	200002dc 	.word	0x200002dc
 800aff0:	200002e0 	.word	0x200002e0

0800aff4 <__ssputs_r>:
 800aff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	688e      	ldr	r6, [r1, #8]
 800affa:	429e      	cmp	r6, r3
 800affc:	4682      	mov	sl, r0
 800affe:	460c      	mov	r4, r1
 800b000:	4690      	mov	r8, r2
 800b002:	461f      	mov	r7, r3
 800b004:	d838      	bhi.n	800b078 <__ssputs_r+0x84>
 800b006:	898a      	ldrh	r2, [r1, #12]
 800b008:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b00c:	d032      	beq.n	800b074 <__ssputs_r+0x80>
 800b00e:	6825      	ldr	r5, [r4, #0]
 800b010:	6909      	ldr	r1, [r1, #16]
 800b012:	eba5 0901 	sub.w	r9, r5, r1
 800b016:	6965      	ldr	r5, [r4, #20]
 800b018:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b01c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b020:	3301      	adds	r3, #1
 800b022:	444b      	add	r3, r9
 800b024:	106d      	asrs	r5, r5, #1
 800b026:	429d      	cmp	r5, r3
 800b028:	bf38      	it	cc
 800b02a:	461d      	movcc	r5, r3
 800b02c:	0553      	lsls	r3, r2, #21
 800b02e:	d531      	bpl.n	800b094 <__ssputs_r+0xa0>
 800b030:	4629      	mov	r1, r5
 800b032:	f7ff ff85 	bl	800af40 <_malloc_r>
 800b036:	4606      	mov	r6, r0
 800b038:	b950      	cbnz	r0, 800b050 <__ssputs_r+0x5c>
 800b03a:	230c      	movs	r3, #12
 800b03c:	f8ca 3000 	str.w	r3, [sl]
 800b040:	89a3      	ldrh	r3, [r4, #12]
 800b042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	f04f 30ff 	mov.w	r0, #4294967295
 800b04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b050:	6921      	ldr	r1, [r4, #16]
 800b052:	464a      	mov	r2, r9
 800b054:	f7ff fb88 	bl	800a768 <memcpy>
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b05e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b062:	81a3      	strh	r3, [r4, #12]
 800b064:	6126      	str	r6, [r4, #16]
 800b066:	6165      	str	r5, [r4, #20]
 800b068:	444e      	add	r6, r9
 800b06a:	eba5 0509 	sub.w	r5, r5, r9
 800b06e:	6026      	str	r6, [r4, #0]
 800b070:	60a5      	str	r5, [r4, #8]
 800b072:	463e      	mov	r6, r7
 800b074:	42be      	cmp	r6, r7
 800b076:	d900      	bls.n	800b07a <__ssputs_r+0x86>
 800b078:	463e      	mov	r6, r7
 800b07a:	4632      	mov	r2, r6
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	4641      	mov	r1, r8
 800b080:	f000 f966 	bl	800b350 <memmove>
 800b084:	68a3      	ldr	r3, [r4, #8]
 800b086:	6822      	ldr	r2, [r4, #0]
 800b088:	1b9b      	subs	r3, r3, r6
 800b08a:	4432      	add	r2, r6
 800b08c:	60a3      	str	r3, [r4, #8]
 800b08e:	6022      	str	r2, [r4, #0]
 800b090:	2000      	movs	r0, #0
 800b092:	e7db      	b.n	800b04c <__ssputs_r+0x58>
 800b094:	462a      	mov	r2, r5
 800b096:	f000 f981 	bl	800b39c <_realloc_r>
 800b09a:	4606      	mov	r6, r0
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d1e1      	bne.n	800b064 <__ssputs_r+0x70>
 800b0a0:	6921      	ldr	r1, [r4, #16]
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	f7ff fefc 	bl	800aea0 <_free_r>
 800b0a8:	e7c7      	b.n	800b03a <__ssputs_r+0x46>
	...

0800b0ac <_svfiprintf_r>:
 800b0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0b0:	4698      	mov	r8, r3
 800b0b2:	898b      	ldrh	r3, [r1, #12]
 800b0b4:	061b      	lsls	r3, r3, #24
 800b0b6:	b09d      	sub	sp, #116	; 0x74
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	460d      	mov	r5, r1
 800b0bc:	4614      	mov	r4, r2
 800b0be:	d50e      	bpl.n	800b0de <_svfiprintf_r+0x32>
 800b0c0:	690b      	ldr	r3, [r1, #16]
 800b0c2:	b963      	cbnz	r3, 800b0de <_svfiprintf_r+0x32>
 800b0c4:	2140      	movs	r1, #64	; 0x40
 800b0c6:	f7ff ff3b 	bl	800af40 <_malloc_r>
 800b0ca:	6028      	str	r0, [r5, #0]
 800b0cc:	6128      	str	r0, [r5, #16]
 800b0ce:	b920      	cbnz	r0, 800b0da <_svfiprintf_r+0x2e>
 800b0d0:	230c      	movs	r3, #12
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d8:	e0d1      	b.n	800b27e <_svfiprintf_r+0x1d2>
 800b0da:	2340      	movs	r3, #64	; 0x40
 800b0dc:	616b      	str	r3, [r5, #20]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e2:	2320      	movs	r3, #32
 800b0e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0ec:	2330      	movs	r3, #48	; 0x30
 800b0ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b298 <_svfiprintf_r+0x1ec>
 800b0f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0f6:	f04f 0901 	mov.w	r9, #1
 800b0fa:	4623      	mov	r3, r4
 800b0fc:	469a      	mov	sl, r3
 800b0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b102:	b10a      	cbz	r2, 800b108 <_svfiprintf_r+0x5c>
 800b104:	2a25      	cmp	r2, #37	; 0x25
 800b106:	d1f9      	bne.n	800b0fc <_svfiprintf_r+0x50>
 800b108:	ebba 0b04 	subs.w	fp, sl, r4
 800b10c:	d00b      	beq.n	800b126 <_svfiprintf_r+0x7a>
 800b10e:	465b      	mov	r3, fp
 800b110:	4622      	mov	r2, r4
 800b112:	4629      	mov	r1, r5
 800b114:	4638      	mov	r0, r7
 800b116:	f7ff ff6d 	bl	800aff4 <__ssputs_r>
 800b11a:	3001      	adds	r0, #1
 800b11c:	f000 80aa 	beq.w	800b274 <_svfiprintf_r+0x1c8>
 800b120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b122:	445a      	add	r2, fp
 800b124:	9209      	str	r2, [sp, #36]	; 0x24
 800b126:	f89a 3000 	ldrb.w	r3, [sl]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 80a2 	beq.w	800b274 <_svfiprintf_r+0x1c8>
 800b130:	2300      	movs	r3, #0
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b13a:	f10a 0a01 	add.w	sl, sl, #1
 800b13e:	9304      	str	r3, [sp, #16]
 800b140:	9307      	str	r3, [sp, #28]
 800b142:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b146:	931a      	str	r3, [sp, #104]	; 0x68
 800b148:	4654      	mov	r4, sl
 800b14a:	2205      	movs	r2, #5
 800b14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b150:	4851      	ldr	r0, [pc, #324]	; (800b298 <_svfiprintf_r+0x1ec>)
 800b152:	f7f5 f865 	bl	8000220 <memchr>
 800b156:	9a04      	ldr	r2, [sp, #16]
 800b158:	b9d8      	cbnz	r0, 800b192 <_svfiprintf_r+0xe6>
 800b15a:	06d0      	lsls	r0, r2, #27
 800b15c:	bf44      	itt	mi
 800b15e:	2320      	movmi	r3, #32
 800b160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b164:	0711      	lsls	r1, r2, #28
 800b166:	bf44      	itt	mi
 800b168:	232b      	movmi	r3, #43	; 0x2b
 800b16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b16e:	f89a 3000 	ldrb.w	r3, [sl]
 800b172:	2b2a      	cmp	r3, #42	; 0x2a
 800b174:	d015      	beq.n	800b1a2 <_svfiprintf_r+0xf6>
 800b176:	9a07      	ldr	r2, [sp, #28]
 800b178:	4654      	mov	r4, sl
 800b17a:	2000      	movs	r0, #0
 800b17c:	f04f 0c0a 	mov.w	ip, #10
 800b180:	4621      	mov	r1, r4
 800b182:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b186:	3b30      	subs	r3, #48	; 0x30
 800b188:	2b09      	cmp	r3, #9
 800b18a:	d94e      	bls.n	800b22a <_svfiprintf_r+0x17e>
 800b18c:	b1b0      	cbz	r0, 800b1bc <_svfiprintf_r+0x110>
 800b18e:	9207      	str	r2, [sp, #28]
 800b190:	e014      	b.n	800b1bc <_svfiprintf_r+0x110>
 800b192:	eba0 0308 	sub.w	r3, r0, r8
 800b196:	fa09 f303 	lsl.w	r3, r9, r3
 800b19a:	4313      	orrs	r3, r2
 800b19c:	9304      	str	r3, [sp, #16]
 800b19e:	46a2      	mov	sl, r4
 800b1a0:	e7d2      	b.n	800b148 <_svfiprintf_r+0x9c>
 800b1a2:	9b03      	ldr	r3, [sp, #12]
 800b1a4:	1d19      	adds	r1, r3, #4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	9103      	str	r1, [sp, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	bfbb      	ittet	lt
 800b1ae:	425b      	neglt	r3, r3
 800b1b0:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b4:	9307      	strge	r3, [sp, #28]
 800b1b6:	9307      	strlt	r3, [sp, #28]
 800b1b8:	bfb8      	it	lt
 800b1ba:	9204      	strlt	r2, [sp, #16]
 800b1bc:	7823      	ldrb	r3, [r4, #0]
 800b1be:	2b2e      	cmp	r3, #46	; 0x2e
 800b1c0:	d10c      	bne.n	800b1dc <_svfiprintf_r+0x130>
 800b1c2:	7863      	ldrb	r3, [r4, #1]
 800b1c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c6:	d135      	bne.n	800b234 <_svfiprintf_r+0x188>
 800b1c8:	9b03      	ldr	r3, [sp, #12]
 800b1ca:	1d1a      	adds	r2, r3, #4
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	9203      	str	r2, [sp, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	bfb8      	it	lt
 800b1d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1d8:	3402      	adds	r4, #2
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2a8 <_svfiprintf_r+0x1fc>
 800b1e0:	7821      	ldrb	r1, [r4, #0]
 800b1e2:	2203      	movs	r2, #3
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	f7f5 f81b 	bl	8000220 <memchr>
 800b1ea:	b140      	cbz	r0, 800b1fe <_svfiprintf_r+0x152>
 800b1ec:	2340      	movs	r3, #64	; 0x40
 800b1ee:	eba0 000a 	sub.w	r0, r0, sl
 800b1f2:	fa03 f000 	lsl.w	r0, r3, r0
 800b1f6:	9b04      	ldr	r3, [sp, #16]
 800b1f8:	4303      	orrs	r3, r0
 800b1fa:	3401      	adds	r4, #1
 800b1fc:	9304      	str	r3, [sp, #16]
 800b1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b202:	4826      	ldr	r0, [pc, #152]	; (800b29c <_svfiprintf_r+0x1f0>)
 800b204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b208:	2206      	movs	r2, #6
 800b20a:	f7f5 f809 	bl	8000220 <memchr>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d038      	beq.n	800b284 <_svfiprintf_r+0x1d8>
 800b212:	4b23      	ldr	r3, [pc, #140]	; (800b2a0 <_svfiprintf_r+0x1f4>)
 800b214:	bb1b      	cbnz	r3, 800b25e <_svfiprintf_r+0x1b2>
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	3307      	adds	r3, #7
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	3308      	adds	r3, #8
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b224:	4433      	add	r3, r6
 800b226:	9309      	str	r3, [sp, #36]	; 0x24
 800b228:	e767      	b.n	800b0fa <_svfiprintf_r+0x4e>
 800b22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b22e:	460c      	mov	r4, r1
 800b230:	2001      	movs	r0, #1
 800b232:	e7a5      	b.n	800b180 <_svfiprintf_r+0xd4>
 800b234:	2300      	movs	r3, #0
 800b236:	3401      	adds	r4, #1
 800b238:	9305      	str	r3, [sp, #20]
 800b23a:	4619      	mov	r1, r3
 800b23c:	f04f 0c0a 	mov.w	ip, #10
 800b240:	4620      	mov	r0, r4
 800b242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b246:	3a30      	subs	r2, #48	; 0x30
 800b248:	2a09      	cmp	r2, #9
 800b24a:	d903      	bls.n	800b254 <_svfiprintf_r+0x1a8>
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0c5      	beq.n	800b1dc <_svfiprintf_r+0x130>
 800b250:	9105      	str	r1, [sp, #20]
 800b252:	e7c3      	b.n	800b1dc <_svfiprintf_r+0x130>
 800b254:	fb0c 2101 	mla	r1, ip, r1, r2
 800b258:	4604      	mov	r4, r0
 800b25a:	2301      	movs	r3, #1
 800b25c:	e7f0      	b.n	800b240 <_svfiprintf_r+0x194>
 800b25e:	ab03      	add	r3, sp, #12
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	462a      	mov	r2, r5
 800b264:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <_svfiprintf_r+0x1f8>)
 800b266:	a904      	add	r1, sp, #16
 800b268:	4638      	mov	r0, r7
 800b26a:	f7fe f801 	bl	8009270 <_printf_float>
 800b26e:	1c42      	adds	r2, r0, #1
 800b270:	4606      	mov	r6, r0
 800b272:	d1d6      	bne.n	800b222 <_svfiprintf_r+0x176>
 800b274:	89ab      	ldrh	r3, [r5, #12]
 800b276:	065b      	lsls	r3, r3, #25
 800b278:	f53f af2c 	bmi.w	800b0d4 <_svfiprintf_r+0x28>
 800b27c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b27e:	b01d      	add	sp, #116	; 0x74
 800b280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	462a      	mov	r2, r5
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <_svfiprintf_r+0x1f8>)
 800b28c:	a904      	add	r1, sp, #16
 800b28e:	4638      	mov	r0, r7
 800b290:	f7fe fa92 	bl	80097b8 <_printf_i>
 800b294:	e7eb      	b.n	800b26e <_svfiprintf_r+0x1c2>
 800b296:	bf00      	nop
 800b298:	0800c214 	.word	0x0800c214
 800b29c:	0800c21e 	.word	0x0800c21e
 800b2a0:	08009271 	.word	0x08009271
 800b2a4:	0800aff5 	.word	0x0800aff5
 800b2a8:	0800c21a 	.word	0x0800c21a

0800b2ac <_sbrk_r>:
 800b2ac:	b538      	push	{r3, r4, r5, lr}
 800b2ae:	4d06      	ldr	r5, [pc, #24]	; (800b2c8 <_sbrk_r+0x1c>)
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	4604      	mov	r4, r0
 800b2b4:	4608      	mov	r0, r1
 800b2b6:	602b      	str	r3, [r5, #0]
 800b2b8:	f7f7 fe6e 	bl	8002f98 <_sbrk>
 800b2bc:	1c43      	adds	r3, r0, #1
 800b2be:	d102      	bne.n	800b2c6 <_sbrk_r+0x1a>
 800b2c0:	682b      	ldr	r3, [r5, #0]
 800b2c2:	b103      	cbz	r3, 800b2c6 <_sbrk_r+0x1a>
 800b2c4:	6023      	str	r3, [r4, #0]
 800b2c6:	bd38      	pop	{r3, r4, r5, pc}
 800b2c8:	20004990 	.word	0x20004990

0800b2cc <__assert_func>:
 800b2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2ce:	4614      	mov	r4, r2
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4b09      	ldr	r3, [pc, #36]	; (800b2f8 <__assert_func+0x2c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4605      	mov	r5, r0
 800b2d8:	68d8      	ldr	r0, [r3, #12]
 800b2da:	b14c      	cbz	r4, 800b2f0 <__assert_func+0x24>
 800b2dc:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <__assert_func+0x30>)
 800b2de:	9100      	str	r1, [sp, #0]
 800b2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2e4:	4906      	ldr	r1, [pc, #24]	; (800b300 <__assert_func+0x34>)
 800b2e6:	462b      	mov	r3, r5
 800b2e8:	f000 f80e 	bl	800b308 <fiprintf>
 800b2ec:	f000 faa4 	bl	800b838 <abort>
 800b2f0:	4b04      	ldr	r3, [pc, #16]	; (800b304 <__assert_func+0x38>)
 800b2f2:	461c      	mov	r4, r3
 800b2f4:	e7f3      	b.n	800b2de <__assert_func+0x12>
 800b2f6:	bf00      	nop
 800b2f8:	20000024 	.word	0x20000024
 800b2fc:	0800c225 	.word	0x0800c225
 800b300:	0800c232 	.word	0x0800c232
 800b304:	0800c260 	.word	0x0800c260

0800b308 <fiprintf>:
 800b308:	b40e      	push	{r1, r2, r3}
 800b30a:	b503      	push	{r0, r1, lr}
 800b30c:	4601      	mov	r1, r0
 800b30e:	ab03      	add	r3, sp, #12
 800b310:	4805      	ldr	r0, [pc, #20]	; (800b328 <fiprintf+0x20>)
 800b312:	f853 2b04 	ldr.w	r2, [r3], #4
 800b316:	6800      	ldr	r0, [r0, #0]
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	f000 f88f 	bl	800b43c <_vfiprintf_r>
 800b31e:	b002      	add	sp, #8
 800b320:	f85d eb04 	ldr.w	lr, [sp], #4
 800b324:	b003      	add	sp, #12
 800b326:	4770      	bx	lr
 800b328:	20000024 	.word	0x20000024

0800b32c <__ascii_mbtowc>:
 800b32c:	b082      	sub	sp, #8
 800b32e:	b901      	cbnz	r1, 800b332 <__ascii_mbtowc+0x6>
 800b330:	a901      	add	r1, sp, #4
 800b332:	b142      	cbz	r2, 800b346 <__ascii_mbtowc+0x1a>
 800b334:	b14b      	cbz	r3, 800b34a <__ascii_mbtowc+0x1e>
 800b336:	7813      	ldrb	r3, [r2, #0]
 800b338:	600b      	str	r3, [r1, #0]
 800b33a:	7812      	ldrb	r2, [r2, #0]
 800b33c:	1e10      	subs	r0, r2, #0
 800b33e:	bf18      	it	ne
 800b340:	2001      	movne	r0, #1
 800b342:	b002      	add	sp, #8
 800b344:	4770      	bx	lr
 800b346:	4610      	mov	r0, r2
 800b348:	e7fb      	b.n	800b342 <__ascii_mbtowc+0x16>
 800b34a:	f06f 0001 	mvn.w	r0, #1
 800b34e:	e7f8      	b.n	800b342 <__ascii_mbtowc+0x16>

0800b350 <memmove>:
 800b350:	4288      	cmp	r0, r1
 800b352:	b510      	push	{r4, lr}
 800b354:	eb01 0402 	add.w	r4, r1, r2
 800b358:	d902      	bls.n	800b360 <memmove+0x10>
 800b35a:	4284      	cmp	r4, r0
 800b35c:	4623      	mov	r3, r4
 800b35e:	d807      	bhi.n	800b370 <memmove+0x20>
 800b360:	1e43      	subs	r3, r0, #1
 800b362:	42a1      	cmp	r1, r4
 800b364:	d008      	beq.n	800b378 <memmove+0x28>
 800b366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b36a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b36e:	e7f8      	b.n	800b362 <memmove+0x12>
 800b370:	4402      	add	r2, r0
 800b372:	4601      	mov	r1, r0
 800b374:	428a      	cmp	r2, r1
 800b376:	d100      	bne.n	800b37a <memmove+0x2a>
 800b378:	bd10      	pop	{r4, pc}
 800b37a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b37e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b382:	e7f7      	b.n	800b374 <memmove+0x24>

0800b384 <__malloc_lock>:
 800b384:	4801      	ldr	r0, [pc, #4]	; (800b38c <__malloc_lock+0x8>)
 800b386:	f000 bc17 	b.w	800bbb8 <__retarget_lock_acquire_recursive>
 800b38a:	bf00      	nop
 800b38c:	20004998 	.word	0x20004998

0800b390 <__malloc_unlock>:
 800b390:	4801      	ldr	r0, [pc, #4]	; (800b398 <__malloc_unlock+0x8>)
 800b392:	f000 bc12 	b.w	800bbba <__retarget_lock_release_recursive>
 800b396:	bf00      	nop
 800b398:	20004998 	.word	0x20004998

0800b39c <_realloc_r>:
 800b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b39e:	4607      	mov	r7, r0
 800b3a0:	4614      	mov	r4, r2
 800b3a2:	460e      	mov	r6, r1
 800b3a4:	b921      	cbnz	r1, 800b3b0 <_realloc_r+0x14>
 800b3a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	f7ff bdc8 	b.w	800af40 <_malloc_r>
 800b3b0:	b922      	cbnz	r2, 800b3bc <_realloc_r+0x20>
 800b3b2:	f7ff fd75 	bl	800aea0 <_free_r>
 800b3b6:	4625      	mov	r5, r4
 800b3b8:	4628      	mov	r0, r5
 800b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3bc:	f000 fc62 	bl	800bc84 <_malloc_usable_size_r>
 800b3c0:	42a0      	cmp	r0, r4
 800b3c2:	d20f      	bcs.n	800b3e4 <_realloc_r+0x48>
 800b3c4:	4621      	mov	r1, r4
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	f7ff fdba 	bl	800af40 <_malloc_r>
 800b3cc:	4605      	mov	r5, r0
 800b3ce:	2800      	cmp	r0, #0
 800b3d0:	d0f2      	beq.n	800b3b8 <_realloc_r+0x1c>
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	f7ff f9c7 	bl	800a768 <memcpy>
 800b3da:	4631      	mov	r1, r6
 800b3dc:	4638      	mov	r0, r7
 800b3de:	f7ff fd5f 	bl	800aea0 <_free_r>
 800b3e2:	e7e9      	b.n	800b3b8 <_realloc_r+0x1c>
 800b3e4:	4635      	mov	r5, r6
 800b3e6:	e7e7      	b.n	800b3b8 <_realloc_r+0x1c>

0800b3e8 <__sfputc_r>:
 800b3e8:	6893      	ldr	r3, [r2, #8]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	b410      	push	{r4}
 800b3f0:	6093      	str	r3, [r2, #8]
 800b3f2:	da08      	bge.n	800b406 <__sfputc_r+0x1e>
 800b3f4:	6994      	ldr	r4, [r2, #24]
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	db01      	blt.n	800b3fe <__sfputc_r+0x16>
 800b3fa:	290a      	cmp	r1, #10
 800b3fc:	d103      	bne.n	800b406 <__sfputc_r+0x1e>
 800b3fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b402:	f000 b94b 	b.w	800b69c <__swbuf_r>
 800b406:	6813      	ldr	r3, [r2, #0]
 800b408:	1c58      	adds	r0, r3, #1
 800b40a:	6010      	str	r0, [r2, #0]
 800b40c:	7019      	strb	r1, [r3, #0]
 800b40e:	4608      	mov	r0, r1
 800b410:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <__sfputs_r>:
 800b416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b418:	4606      	mov	r6, r0
 800b41a:	460f      	mov	r7, r1
 800b41c:	4614      	mov	r4, r2
 800b41e:	18d5      	adds	r5, r2, r3
 800b420:	42ac      	cmp	r4, r5
 800b422:	d101      	bne.n	800b428 <__sfputs_r+0x12>
 800b424:	2000      	movs	r0, #0
 800b426:	e007      	b.n	800b438 <__sfputs_r+0x22>
 800b428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b42c:	463a      	mov	r2, r7
 800b42e:	4630      	mov	r0, r6
 800b430:	f7ff ffda 	bl	800b3e8 <__sfputc_r>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d1f3      	bne.n	800b420 <__sfputs_r+0xa>
 800b438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b43c <_vfiprintf_r>:
 800b43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b440:	460d      	mov	r5, r1
 800b442:	b09d      	sub	sp, #116	; 0x74
 800b444:	4614      	mov	r4, r2
 800b446:	4698      	mov	r8, r3
 800b448:	4606      	mov	r6, r0
 800b44a:	b118      	cbz	r0, 800b454 <_vfiprintf_r+0x18>
 800b44c:	6983      	ldr	r3, [r0, #24]
 800b44e:	b90b      	cbnz	r3, 800b454 <_vfiprintf_r+0x18>
 800b450:	f000 fb14 	bl	800ba7c <__sinit>
 800b454:	4b89      	ldr	r3, [pc, #548]	; (800b67c <_vfiprintf_r+0x240>)
 800b456:	429d      	cmp	r5, r3
 800b458:	d11b      	bne.n	800b492 <_vfiprintf_r+0x56>
 800b45a:	6875      	ldr	r5, [r6, #4]
 800b45c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b45e:	07d9      	lsls	r1, r3, #31
 800b460:	d405      	bmi.n	800b46e <_vfiprintf_r+0x32>
 800b462:	89ab      	ldrh	r3, [r5, #12]
 800b464:	059a      	lsls	r2, r3, #22
 800b466:	d402      	bmi.n	800b46e <_vfiprintf_r+0x32>
 800b468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b46a:	f000 fba5 	bl	800bbb8 <__retarget_lock_acquire_recursive>
 800b46e:	89ab      	ldrh	r3, [r5, #12]
 800b470:	071b      	lsls	r3, r3, #28
 800b472:	d501      	bpl.n	800b478 <_vfiprintf_r+0x3c>
 800b474:	692b      	ldr	r3, [r5, #16]
 800b476:	b9eb      	cbnz	r3, 800b4b4 <_vfiprintf_r+0x78>
 800b478:	4629      	mov	r1, r5
 800b47a:	4630      	mov	r0, r6
 800b47c:	f000 f96e 	bl	800b75c <__swsetup_r>
 800b480:	b1c0      	cbz	r0, 800b4b4 <_vfiprintf_r+0x78>
 800b482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b484:	07dc      	lsls	r4, r3, #31
 800b486:	d50e      	bpl.n	800b4a6 <_vfiprintf_r+0x6a>
 800b488:	f04f 30ff 	mov.w	r0, #4294967295
 800b48c:	b01d      	add	sp, #116	; 0x74
 800b48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b492:	4b7b      	ldr	r3, [pc, #492]	; (800b680 <_vfiprintf_r+0x244>)
 800b494:	429d      	cmp	r5, r3
 800b496:	d101      	bne.n	800b49c <_vfiprintf_r+0x60>
 800b498:	68b5      	ldr	r5, [r6, #8]
 800b49a:	e7df      	b.n	800b45c <_vfiprintf_r+0x20>
 800b49c:	4b79      	ldr	r3, [pc, #484]	; (800b684 <_vfiprintf_r+0x248>)
 800b49e:	429d      	cmp	r5, r3
 800b4a0:	bf08      	it	eq
 800b4a2:	68f5      	ldreq	r5, [r6, #12]
 800b4a4:	e7da      	b.n	800b45c <_vfiprintf_r+0x20>
 800b4a6:	89ab      	ldrh	r3, [r5, #12]
 800b4a8:	0598      	lsls	r0, r3, #22
 800b4aa:	d4ed      	bmi.n	800b488 <_vfiprintf_r+0x4c>
 800b4ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4ae:	f000 fb84 	bl	800bbba <__retarget_lock_release_recursive>
 800b4b2:	e7e9      	b.n	800b488 <_vfiprintf_r+0x4c>
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b8:	2320      	movs	r3, #32
 800b4ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4c2:	2330      	movs	r3, #48	; 0x30
 800b4c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b688 <_vfiprintf_r+0x24c>
 800b4c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4cc:	f04f 0901 	mov.w	r9, #1
 800b4d0:	4623      	mov	r3, r4
 800b4d2:	469a      	mov	sl, r3
 800b4d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4d8:	b10a      	cbz	r2, 800b4de <_vfiprintf_r+0xa2>
 800b4da:	2a25      	cmp	r2, #37	; 0x25
 800b4dc:	d1f9      	bne.n	800b4d2 <_vfiprintf_r+0x96>
 800b4de:	ebba 0b04 	subs.w	fp, sl, r4
 800b4e2:	d00b      	beq.n	800b4fc <_vfiprintf_r+0xc0>
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	4622      	mov	r2, r4
 800b4e8:	4629      	mov	r1, r5
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f7ff ff93 	bl	800b416 <__sfputs_r>
 800b4f0:	3001      	adds	r0, #1
 800b4f2:	f000 80aa 	beq.w	800b64a <_vfiprintf_r+0x20e>
 800b4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4f8:	445a      	add	r2, fp
 800b4fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b4fc:	f89a 3000 	ldrb.w	r3, [sl]
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 80a2 	beq.w	800b64a <_vfiprintf_r+0x20e>
 800b506:	2300      	movs	r3, #0
 800b508:	f04f 32ff 	mov.w	r2, #4294967295
 800b50c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b510:	f10a 0a01 	add.w	sl, sl, #1
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	9307      	str	r3, [sp, #28]
 800b518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b51c:	931a      	str	r3, [sp, #104]	; 0x68
 800b51e:	4654      	mov	r4, sl
 800b520:	2205      	movs	r2, #5
 800b522:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b526:	4858      	ldr	r0, [pc, #352]	; (800b688 <_vfiprintf_r+0x24c>)
 800b528:	f7f4 fe7a 	bl	8000220 <memchr>
 800b52c:	9a04      	ldr	r2, [sp, #16]
 800b52e:	b9d8      	cbnz	r0, 800b568 <_vfiprintf_r+0x12c>
 800b530:	06d1      	lsls	r1, r2, #27
 800b532:	bf44      	itt	mi
 800b534:	2320      	movmi	r3, #32
 800b536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b53a:	0713      	lsls	r3, r2, #28
 800b53c:	bf44      	itt	mi
 800b53e:	232b      	movmi	r3, #43	; 0x2b
 800b540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b544:	f89a 3000 	ldrb.w	r3, [sl]
 800b548:	2b2a      	cmp	r3, #42	; 0x2a
 800b54a:	d015      	beq.n	800b578 <_vfiprintf_r+0x13c>
 800b54c:	9a07      	ldr	r2, [sp, #28]
 800b54e:	4654      	mov	r4, sl
 800b550:	2000      	movs	r0, #0
 800b552:	f04f 0c0a 	mov.w	ip, #10
 800b556:	4621      	mov	r1, r4
 800b558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b55c:	3b30      	subs	r3, #48	; 0x30
 800b55e:	2b09      	cmp	r3, #9
 800b560:	d94e      	bls.n	800b600 <_vfiprintf_r+0x1c4>
 800b562:	b1b0      	cbz	r0, 800b592 <_vfiprintf_r+0x156>
 800b564:	9207      	str	r2, [sp, #28]
 800b566:	e014      	b.n	800b592 <_vfiprintf_r+0x156>
 800b568:	eba0 0308 	sub.w	r3, r0, r8
 800b56c:	fa09 f303 	lsl.w	r3, r9, r3
 800b570:	4313      	orrs	r3, r2
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	46a2      	mov	sl, r4
 800b576:	e7d2      	b.n	800b51e <_vfiprintf_r+0xe2>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	1d19      	adds	r1, r3, #4
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	9103      	str	r1, [sp, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	bfbb      	ittet	lt
 800b584:	425b      	neglt	r3, r3
 800b586:	f042 0202 	orrlt.w	r2, r2, #2
 800b58a:	9307      	strge	r3, [sp, #28]
 800b58c:	9307      	strlt	r3, [sp, #28]
 800b58e:	bfb8      	it	lt
 800b590:	9204      	strlt	r2, [sp, #16]
 800b592:	7823      	ldrb	r3, [r4, #0]
 800b594:	2b2e      	cmp	r3, #46	; 0x2e
 800b596:	d10c      	bne.n	800b5b2 <_vfiprintf_r+0x176>
 800b598:	7863      	ldrb	r3, [r4, #1]
 800b59a:	2b2a      	cmp	r3, #42	; 0x2a
 800b59c:	d135      	bne.n	800b60a <_vfiprintf_r+0x1ce>
 800b59e:	9b03      	ldr	r3, [sp, #12]
 800b5a0:	1d1a      	adds	r2, r3, #4
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	9203      	str	r2, [sp, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	bfb8      	it	lt
 800b5aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5ae:	3402      	adds	r4, #2
 800b5b0:	9305      	str	r3, [sp, #20]
 800b5b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b698 <_vfiprintf_r+0x25c>
 800b5b6:	7821      	ldrb	r1, [r4, #0]
 800b5b8:	2203      	movs	r2, #3
 800b5ba:	4650      	mov	r0, sl
 800b5bc:	f7f4 fe30 	bl	8000220 <memchr>
 800b5c0:	b140      	cbz	r0, 800b5d4 <_vfiprintf_r+0x198>
 800b5c2:	2340      	movs	r3, #64	; 0x40
 800b5c4:	eba0 000a 	sub.w	r0, r0, sl
 800b5c8:	fa03 f000 	lsl.w	r0, r3, r0
 800b5cc:	9b04      	ldr	r3, [sp, #16]
 800b5ce:	4303      	orrs	r3, r0
 800b5d0:	3401      	adds	r4, #1
 800b5d2:	9304      	str	r3, [sp, #16]
 800b5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d8:	482c      	ldr	r0, [pc, #176]	; (800b68c <_vfiprintf_r+0x250>)
 800b5da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5de:	2206      	movs	r2, #6
 800b5e0:	f7f4 fe1e 	bl	8000220 <memchr>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d03f      	beq.n	800b668 <_vfiprintf_r+0x22c>
 800b5e8:	4b29      	ldr	r3, [pc, #164]	; (800b690 <_vfiprintf_r+0x254>)
 800b5ea:	bb1b      	cbnz	r3, 800b634 <_vfiprintf_r+0x1f8>
 800b5ec:	9b03      	ldr	r3, [sp, #12]
 800b5ee:	3307      	adds	r3, #7
 800b5f0:	f023 0307 	bic.w	r3, r3, #7
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	9303      	str	r3, [sp, #12]
 800b5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fa:	443b      	add	r3, r7
 800b5fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fe:	e767      	b.n	800b4d0 <_vfiprintf_r+0x94>
 800b600:	fb0c 3202 	mla	r2, ip, r2, r3
 800b604:	460c      	mov	r4, r1
 800b606:	2001      	movs	r0, #1
 800b608:	e7a5      	b.n	800b556 <_vfiprintf_r+0x11a>
 800b60a:	2300      	movs	r3, #0
 800b60c:	3401      	adds	r4, #1
 800b60e:	9305      	str	r3, [sp, #20]
 800b610:	4619      	mov	r1, r3
 800b612:	f04f 0c0a 	mov.w	ip, #10
 800b616:	4620      	mov	r0, r4
 800b618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b61c:	3a30      	subs	r2, #48	; 0x30
 800b61e:	2a09      	cmp	r2, #9
 800b620:	d903      	bls.n	800b62a <_vfiprintf_r+0x1ee>
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0c5      	beq.n	800b5b2 <_vfiprintf_r+0x176>
 800b626:	9105      	str	r1, [sp, #20]
 800b628:	e7c3      	b.n	800b5b2 <_vfiprintf_r+0x176>
 800b62a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b62e:	4604      	mov	r4, r0
 800b630:	2301      	movs	r3, #1
 800b632:	e7f0      	b.n	800b616 <_vfiprintf_r+0x1da>
 800b634:	ab03      	add	r3, sp, #12
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	462a      	mov	r2, r5
 800b63a:	4b16      	ldr	r3, [pc, #88]	; (800b694 <_vfiprintf_r+0x258>)
 800b63c:	a904      	add	r1, sp, #16
 800b63e:	4630      	mov	r0, r6
 800b640:	f7fd fe16 	bl	8009270 <_printf_float>
 800b644:	4607      	mov	r7, r0
 800b646:	1c78      	adds	r0, r7, #1
 800b648:	d1d6      	bne.n	800b5f8 <_vfiprintf_r+0x1bc>
 800b64a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b64c:	07d9      	lsls	r1, r3, #31
 800b64e:	d405      	bmi.n	800b65c <_vfiprintf_r+0x220>
 800b650:	89ab      	ldrh	r3, [r5, #12]
 800b652:	059a      	lsls	r2, r3, #22
 800b654:	d402      	bmi.n	800b65c <_vfiprintf_r+0x220>
 800b656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b658:	f000 faaf 	bl	800bbba <__retarget_lock_release_recursive>
 800b65c:	89ab      	ldrh	r3, [r5, #12]
 800b65e:	065b      	lsls	r3, r3, #25
 800b660:	f53f af12 	bmi.w	800b488 <_vfiprintf_r+0x4c>
 800b664:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b666:	e711      	b.n	800b48c <_vfiprintf_r+0x50>
 800b668:	ab03      	add	r3, sp, #12
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	462a      	mov	r2, r5
 800b66e:	4b09      	ldr	r3, [pc, #36]	; (800b694 <_vfiprintf_r+0x258>)
 800b670:	a904      	add	r1, sp, #16
 800b672:	4630      	mov	r0, r6
 800b674:	f7fe f8a0 	bl	80097b8 <_printf_i>
 800b678:	e7e4      	b.n	800b644 <_vfiprintf_r+0x208>
 800b67a:	bf00      	nop
 800b67c:	0800c38c 	.word	0x0800c38c
 800b680:	0800c3ac 	.word	0x0800c3ac
 800b684:	0800c36c 	.word	0x0800c36c
 800b688:	0800c214 	.word	0x0800c214
 800b68c:	0800c21e 	.word	0x0800c21e
 800b690:	08009271 	.word	0x08009271
 800b694:	0800b417 	.word	0x0800b417
 800b698:	0800c21a 	.word	0x0800c21a

0800b69c <__swbuf_r>:
 800b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69e:	460e      	mov	r6, r1
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	4605      	mov	r5, r0
 800b6a4:	b118      	cbz	r0, 800b6ae <__swbuf_r+0x12>
 800b6a6:	6983      	ldr	r3, [r0, #24]
 800b6a8:	b90b      	cbnz	r3, 800b6ae <__swbuf_r+0x12>
 800b6aa:	f000 f9e7 	bl	800ba7c <__sinit>
 800b6ae:	4b21      	ldr	r3, [pc, #132]	; (800b734 <__swbuf_r+0x98>)
 800b6b0:	429c      	cmp	r4, r3
 800b6b2:	d12b      	bne.n	800b70c <__swbuf_r+0x70>
 800b6b4:	686c      	ldr	r4, [r5, #4]
 800b6b6:	69a3      	ldr	r3, [r4, #24]
 800b6b8:	60a3      	str	r3, [r4, #8]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	071a      	lsls	r2, r3, #28
 800b6be:	d52f      	bpl.n	800b720 <__swbuf_r+0x84>
 800b6c0:	6923      	ldr	r3, [r4, #16]
 800b6c2:	b36b      	cbz	r3, 800b720 <__swbuf_r+0x84>
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	6820      	ldr	r0, [r4, #0]
 800b6c8:	1ac0      	subs	r0, r0, r3
 800b6ca:	6963      	ldr	r3, [r4, #20]
 800b6cc:	b2f6      	uxtb	r6, r6
 800b6ce:	4283      	cmp	r3, r0
 800b6d0:	4637      	mov	r7, r6
 800b6d2:	dc04      	bgt.n	800b6de <__swbuf_r+0x42>
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 f93c 	bl	800b954 <_fflush_r>
 800b6dc:	bb30      	cbnz	r0, 800b72c <__swbuf_r+0x90>
 800b6de:	68a3      	ldr	r3, [r4, #8]
 800b6e0:	3b01      	subs	r3, #1
 800b6e2:	60a3      	str	r3, [r4, #8]
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	6022      	str	r2, [r4, #0]
 800b6ea:	701e      	strb	r6, [r3, #0]
 800b6ec:	6963      	ldr	r3, [r4, #20]
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	4283      	cmp	r3, r0
 800b6f2:	d004      	beq.n	800b6fe <__swbuf_r+0x62>
 800b6f4:	89a3      	ldrh	r3, [r4, #12]
 800b6f6:	07db      	lsls	r3, r3, #31
 800b6f8:	d506      	bpl.n	800b708 <__swbuf_r+0x6c>
 800b6fa:	2e0a      	cmp	r6, #10
 800b6fc:	d104      	bne.n	800b708 <__swbuf_r+0x6c>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	f000 f927 	bl	800b954 <_fflush_r>
 800b706:	b988      	cbnz	r0, 800b72c <__swbuf_r+0x90>
 800b708:	4638      	mov	r0, r7
 800b70a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b70c:	4b0a      	ldr	r3, [pc, #40]	; (800b738 <__swbuf_r+0x9c>)
 800b70e:	429c      	cmp	r4, r3
 800b710:	d101      	bne.n	800b716 <__swbuf_r+0x7a>
 800b712:	68ac      	ldr	r4, [r5, #8]
 800b714:	e7cf      	b.n	800b6b6 <__swbuf_r+0x1a>
 800b716:	4b09      	ldr	r3, [pc, #36]	; (800b73c <__swbuf_r+0xa0>)
 800b718:	429c      	cmp	r4, r3
 800b71a:	bf08      	it	eq
 800b71c:	68ec      	ldreq	r4, [r5, #12]
 800b71e:	e7ca      	b.n	800b6b6 <__swbuf_r+0x1a>
 800b720:	4621      	mov	r1, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f81a 	bl	800b75c <__swsetup_r>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d0cb      	beq.n	800b6c4 <__swbuf_r+0x28>
 800b72c:	f04f 37ff 	mov.w	r7, #4294967295
 800b730:	e7ea      	b.n	800b708 <__swbuf_r+0x6c>
 800b732:	bf00      	nop
 800b734:	0800c38c 	.word	0x0800c38c
 800b738:	0800c3ac 	.word	0x0800c3ac
 800b73c:	0800c36c 	.word	0x0800c36c

0800b740 <__ascii_wctomb>:
 800b740:	b149      	cbz	r1, 800b756 <__ascii_wctomb+0x16>
 800b742:	2aff      	cmp	r2, #255	; 0xff
 800b744:	bf85      	ittet	hi
 800b746:	238a      	movhi	r3, #138	; 0x8a
 800b748:	6003      	strhi	r3, [r0, #0]
 800b74a:	700a      	strbls	r2, [r1, #0]
 800b74c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b750:	bf98      	it	ls
 800b752:	2001      	movls	r0, #1
 800b754:	4770      	bx	lr
 800b756:	4608      	mov	r0, r1
 800b758:	4770      	bx	lr
	...

0800b75c <__swsetup_r>:
 800b75c:	4b32      	ldr	r3, [pc, #200]	; (800b828 <__swsetup_r+0xcc>)
 800b75e:	b570      	push	{r4, r5, r6, lr}
 800b760:	681d      	ldr	r5, [r3, #0]
 800b762:	4606      	mov	r6, r0
 800b764:	460c      	mov	r4, r1
 800b766:	b125      	cbz	r5, 800b772 <__swsetup_r+0x16>
 800b768:	69ab      	ldr	r3, [r5, #24]
 800b76a:	b913      	cbnz	r3, 800b772 <__swsetup_r+0x16>
 800b76c:	4628      	mov	r0, r5
 800b76e:	f000 f985 	bl	800ba7c <__sinit>
 800b772:	4b2e      	ldr	r3, [pc, #184]	; (800b82c <__swsetup_r+0xd0>)
 800b774:	429c      	cmp	r4, r3
 800b776:	d10f      	bne.n	800b798 <__swsetup_r+0x3c>
 800b778:	686c      	ldr	r4, [r5, #4]
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b780:	0719      	lsls	r1, r3, #28
 800b782:	d42c      	bmi.n	800b7de <__swsetup_r+0x82>
 800b784:	06dd      	lsls	r5, r3, #27
 800b786:	d411      	bmi.n	800b7ac <__swsetup_r+0x50>
 800b788:	2309      	movs	r3, #9
 800b78a:	6033      	str	r3, [r6, #0]
 800b78c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	e03e      	b.n	800b816 <__swsetup_r+0xba>
 800b798:	4b25      	ldr	r3, [pc, #148]	; (800b830 <__swsetup_r+0xd4>)
 800b79a:	429c      	cmp	r4, r3
 800b79c:	d101      	bne.n	800b7a2 <__swsetup_r+0x46>
 800b79e:	68ac      	ldr	r4, [r5, #8]
 800b7a0:	e7eb      	b.n	800b77a <__swsetup_r+0x1e>
 800b7a2:	4b24      	ldr	r3, [pc, #144]	; (800b834 <__swsetup_r+0xd8>)
 800b7a4:	429c      	cmp	r4, r3
 800b7a6:	bf08      	it	eq
 800b7a8:	68ec      	ldreq	r4, [r5, #12]
 800b7aa:	e7e6      	b.n	800b77a <__swsetup_r+0x1e>
 800b7ac:	0758      	lsls	r0, r3, #29
 800b7ae:	d512      	bpl.n	800b7d6 <__swsetup_r+0x7a>
 800b7b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7b2:	b141      	cbz	r1, 800b7c6 <__swsetup_r+0x6a>
 800b7b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7b8:	4299      	cmp	r1, r3
 800b7ba:	d002      	beq.n	800b7c2 <__swsetup_r+0x66>
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7ff fb6f 	bl	800aea0 <_free_r>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6363      	str	r3, [r4, #52]	; 0x34
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	6063      	str	r3, [r4, #4]
 800b7d2:	6923      	ldr	r3, [r4, #16]
 800b7d4:	6023      	str	r3, [r4, #0]
 800b7d6:	89a3      	ldrh	r3, [r4, #12]
 800b7d8:	f043 0308 	orr.w	r3, r3, #8
 800b7dc:	81a3      	strh	r3, [r4, #12]
 800b7de:	6923      	ldr	r3, [r4, #16]
 800b7e0:	b94b      	cbnz	r3, 800b7f6 <__swsetup_r+0x9a>
 800b7e2:	89a3      	ldrh	r3, [r4, #12]
 800b7e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ec:	d003      	beq.n	800b7f6 <__swsetup_r+0x9a>
 800b7ee:	4621      	mov	r1, r4
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f000 fa07 	bl	800bc04 <__smakebuf_r>
 800b7f6:	89a0      	ldrh	r0, [r4, #12]
 800b7f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7fc:	f010 0301 	ands.w	r3, r0, #1
 800b800:	d00a      	beq.n	800b818 <__swsetup_r+0xbc>
 800b802:	2300      	movs	r3, #0
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	6963      	ldr	r3, [r4, #20]
 800b808:	425b      	negs	r3, r3
 800b80a:	61a3      	str	r3, [r4, #24]
 800b80c:	6923      	ldr	r3, [r4, #16]
 800b80e:	b943      	cbnz	r3, 800b822 <__swsetup_r+0xc6>
 800b810:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b814:	d1ba      	bne.n	800b78c <__swsetup_r+0x30>
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	0781      	lsls	r1, r0, #30
 800b81a:	bf58      	it	pl
 800b81c:	6963      	ldrpl	r3, [r4, #20]
 800b81e:	60a3      	str	r3, [r4, #8]
 800b820:	e7f4      	b.n	800b80c <__swsetup_r+0xb0>
 800b822:	2000      	movs	r0, #0
 800b824:	e7f7      	b.n	800b816 <__swsetup_r+0xba>
 800b826:	bf00      	nop
 800b828:	20000024 	.word	0x20000024
 800b82c:	0800c38c 	.word	0x0800c38c
 800b830:	0800c3ac 	.word	0x0800c3ac
 800b834:	0800c36c 	.word	0x0800c36c

0800b838 <abort>:
 800b838:	b508      	push	{r3, lr}
 800b83a:	2006      	movs	r0, #6
 800b83c:	f000 fa52 	bl	800bce4 <raise>
 800b840:	2001      	movs	r0, #1
 800b842:	f7f7 fb31 	bl	8002ea8 <_exit>
	...

0800b848 <__sflush_r>:
 800b848:	898a      	ldrh	r2, [r1, #12]
 800b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	4605      	mov	r5, r0
 800b850:	0710      	lsls	r0, r2, #28
 800b852:	460c      	mov	r4, r1
 800b854:	d458      	bmi.n	800b908 <__sflush_r+0xc0>
 800b856:	684b      	ldr	r3, [r1, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dc05      	bgt.n	800b868 <__sflush_r+0x20>
 800b85c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dc02      	bgt.n	800b868 <__sflush_r+0x20>
 800b862:	2000      	movs	r0, #0
 800b864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b868:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	d0f9      	beq.n	800b862 <__sflush_r+0x1a>
 800b86e:	2300      	movs	r3, #0
 800b870:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b874:	682f      	ldr	r7, [r5, #0]
 800b876:	602b      	str	r3, [r5, #0]
 800b878:	d032      	beq.n	800b8e0 <__sflush_r+0x98>
 800b87a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	075a      	lsls	r2, r3, #29
 800b880:	d505      	bpl.n	800b88e <__sflush_r+0x46>
 800b882:	6863      	ldr	r3, [r4, #4]
 800b884:	1ac0      	subs	r0, r0, r3
 800b886:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b888:	b10b      	cbz	r3, 800b88e <__sflush_r+0x46>
 800b88a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b88c:	1ac0      	subs	r0, r0, r3
 800b88e:	2300      	movs	r3, #0
 800b890:	4602      	mov	r2, r0
 800b892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b894:	6a21      	ldr	r1, [r4, #32]
 800b896:	4628      	mov	r0, r5
 800b898:	47b0      	blx	r6
 800b89a:	1c43      	adds	r3, r0, #1
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	d106      	bne.n	800b8ae <__sflush_r+0x66>
 800b8a0:	6829      	ldr	r1, [r5, #0]
 800b8a2:	291d      	cmp	r1, #29
 800b8a4:	d82c      	bhi.n	800b900 <__sflush_r+0xb8>
 800b8a6:	4a2a      	ldr	r2, [pc, #168]	; (800b950 <__sflush_r+0x108>)
 800b8a8:	40ca      	lsrs	r2, r1
 800b8aa:	07d6      	lsls	r6, r2, #31
 800b8ac:	d528      	bpl.n	800b900 <__sflush_r+0xb8>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	6062      	str	r2, [r4, #4]
 800b8b2:	04d9      	lsls	r1, r3, #19
 800b8b4:	6922      	ldr	r2, [r4, #16]
 800b8b6:	6022      	str	r2, [r4, #0]
 800b8b8:	d504      	bpl.n	800b8c4 <__sflush_r+0x7c>
 800b8ba:	1c42      	adds	r2, r0, #1
 800b8bc:	d101      	bne.n	800b8c2 <__sflush_r+0x7a>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b903      	cbnz	r3, 800b8c4 <__sflush_r+0x7c>
 800b8c2:	6560      	str	r0, [r4, #84]	; 0x54
 800b8c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8c6:	602f      	str	r7, [r5, #0]
 800b8c8:	2900      	cmp	r1, #0
 800b8ca:	d0ca      	beq.n	800b862 <__sflush_r+0x1a>
 800b8cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8d0:	4299      	cmp	r1, r3
 800b8d2:	d002      	beq.n	800b8da <__sflush_r+0x92>
 800b8d4:	4628      	mov	r0, r5
 800b8d6:	f7ff fae3 	bl	800aea0 <_free_r>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	6360      	str	r0, [r4, #52]	; 0x34
 800b8de:	e7c1      	b.n	800b864 <__sflush_r+0x1c>
 800b8e0:	6a21      	ldr	r1, [r4, #32]
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	47b0      	blx	r6
 800b8e8:	1c41      	adds	r1, r0, #1
 800b8ea:	d1c7      	bne.n	800b87c <__sflush_r+0x34>
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d0c4      	beq.n	800b87c <__sflush_r+0x34>
 800b8f2:	2b1d      	cmp	r3, #29
 800b8f4:	d001      	beq.n	800b8fa <__sflush_r+0xb2>
 800b8f6:	2b16      	cmp	r3, #22
 800b8f8:	d101      	bne.n	800b8fe <__sflush_r+0xb6>
 800b8fa:	602f      	str	r7, [r5, #0]
 800b8fc:	e7b1      	b.n	800b862 <__sflush_r+0x1a>
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	e7ad      	b.n	800b864 <__sflush_r+0x1c>
 800b908:	690f      	ldr	r7, [r1, #16]
 800b90a:	2f00      	cmp	r7, #0
 800b90c:	d0a9      	beq.n	800b862 <__sflush_r+0x1a>
 800b90e:	0793      	lsls	r3, r2, #30
 800b910:	680e      	ldr	r6, [r1, #0]
 800b912:	bf08      	it	eq
 800b914:	694b      	ldreq	r3, [r1, #20]
 800b916:	600f      	str	r7, [r1, #0]
 800b918:	bf18      	it	ne
 800b91a:	2300      	movne	r3, #0
 800b91c:	eba6 0807 	sub.w	r8, r6, r7
 800b920:	608b      	str	r3, [r1, #8]
 800b922:	f1b8 0f00 	cmp.w	r8, #0
 800b926:	dd9c      	ble.n	800b862 <__sflush_r+0x1a>
 800b928:	6a21      	ldr	r1, [r4, #32]
 800b92a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b92c:	4643      	mov	r3, r8
 800b92e:	463a      	mov	r2, r7
 800b930:	4628      	mov	r0, r5
 800b932:	47b0      	blx	r6
 800b934:	2800      	cmp	r0, #0
 800b936:	dc06      	bgt.n	800b946 <__sflush_r+0xfe>
 800b938:	89a3      	ldrh	r3, [r4, #12]
 800b93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295
 800b944:	e78e      	b.n	800b864 <__sflush_r+0x1c>
 800b946:	4407      	add	r7, r0
 800b948:	eba8 0800 	sub.w	r8, r8, r0
 800b94c:	e7e9      	b.n	800b922 <__sflush_r+0xda>
 800b94e:	bf00      	nop
 800b950:	20400001 	.word	0x20400001

0800b954 <_fflush_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	690b      	ldr	r3, [r1, #16]
 800b958:	4605      	mov	r5, r0
 800b95a:	460c      	mov	r4, r1
 800b95c:	b913      	cbnz	r3, 800b964 <_fflush_r+0x10>
 800b95e:	2500      	movs	r5, #0
 800b960:	4628      	mov	r0, r5
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	b118      	cbz	r0, 800b96e <_fflush_r+0x1a>
 800b966:	6983      	ldr	r3, [r0, #24]
 800b968:	b90b      	cbnz	r3, 800b96e <_fflush_r+0x1a>
 800b96a:	f000 f887 	bl	800ba7c <__sinit>
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <_fflush_r+0x6c>)
 800b970:	429c      	cmp	r4, r3
 800b972:	d11b      	bne.n	800b9ac <_fflush_r+0x58>
 800b974:	686c      	ldr	r4, [r5, #4]
 800b976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0ef      	beq.n	800b95e <_fflush_r+0xa>
 800b97e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b980:	07d0      	lsls	r0, r2, #31
 800b982:	d404      	bmi.n	800b98e <_fflush_r+0x3a>
 800b984:	0599      	lsls	r1, r3, #22
 800b986:	d402      	bmi.n	800b98e <_fflush_r+0x3a>
 800b988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b98a:	f000 f915 	bl	800bbb8 <__retarget_lock_acquire_recursive>
 800b98e:	4628      	mov	r0, r5
 800b990:	4621      	mov	r1, r4
 800b992:	f7ff ff59 	bl	800b848 <__sflush_r>
 800b996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b998:	07da      	lsls	r2, r3, #31
 800b99a:	4605      	mov	r5, r0
 800b99c:	d4e0      	bmi.n	800b960 <_fflush_r+0xc>
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	059b      	lsls	r3, r3, #22
 800b9a2:	d4dd      	bmi.n	800b960 <_fflush_r+0xc>
 800b9a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9a6:	f000 f908 	bl	800bbba <__retarget_lock_release_recursive>
 800b9aa:	e7d9      	b.n	800b960 <_fflush_r+0xc>
 800b9ac:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <_fflush_r+0x70>)
 800b9ae:	429c      	cmp	r4, r3
 800b9b0:	d101      	bne.n	800b9b6 <_fflush_r+0x62>
 800b9b2:	68ac      	ldr	r4, [r5, #8]
 800b9b4:	e7df      	b.n	800b976 <_fflush_r+0x22>
 800b9b6:	4b04      	ldr	r3, [pc, #16]	; (800b9c8 <_fflush_r+0x74>)
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	bf08      	it	eq
 800b9bc:	68ec      	ldreq	r4, [r5, #12]
 800b9be:	e7da      	b.n	800b976 <_fflush_r+0x22>
 800b9c0:	0800c38c 	.word	0x0800c38c
 800b9c4:	0800c3ac 	.word	0x0800c3ac
 800b9c8:	0800c36c 	.word	0x0800c36c

0800b9cc <std>:
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	e9c0 3300 	strd	r3, r3, [r0]
 800b9d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9da:	6083      	str	r3, [r0, #8]
 800b9dc:	8181      	strh	r1, [r0, #12]
 800b9de:	6643      	str	r3, [r0, #100]	; 0x64
 800b9e0:	81c2      	strh	r2, [r0, #14]
 800b9e2:	6183      	str	r3, [r0, #24]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	2208      	movs	r2, #8
 800b9e8:	305c      	adds	r0, #92	; 0x5c
 800b9ea:	f7fd fb99 	bl	8009120 <memset>
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <std+0x38>)
 800b9f0:	6263      	str	r3, [r4, #36]	; 0x24
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <std+0x3c>)
 800b9f4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9f6:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <std+0x40>)
 800b9f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9fa:	4b05      	ldr	r3, [pc, #20]	; (800ba10 <std+0x44>)
 800b9fc:	6224      	str	r4, [r4, #32]
 800b9fe:	6323      	str	r3, [r4, #48]	; 0x30
 800ba00:	bd10      	pop	{r4, pc}
 800ba02:	bf00      	nop
 800ba04:	0800bd1d 	.word	0x0800bd1d
 800ba08:	0800bd3f 	.word	0x0800bd3f
 800ba0c:	0800bd77 	.word	0x0800bd77
 800ba10:	0800bd9b 	.word	0x0800bd9b

0800ba14 <_cleanup_r>:
 800ba14:	4901      	ldr	r1, [pc, #4]	; (800ba1c <_cleanup_r+0x8>)
 800ba16:	f000 b8af 	b.w	800bb78 <_fwalk_reent>
 800ba1a:	bf00      	nop
 800ba1c:	0800b955 	.word	0x0800b955

0800ba20 <__sfmoreglue>:
 800ba20:	b570      	push	{r4, r5, r6, lr}
 800ba22:	1e4a      	subs	r2, r1, #1
 800ba24:	2568      	movs	r5, #104	; 0x68
 800ba26:	4355      	muls	r5, r2
 800ba28:	460e      	mov	r6, r1
 800ba2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ba2e:	f7ff fa87 	bl	800af40 <_malloc_r>
 800ba32:	4604      	mov	r4, r0
 800ba34:	b140      	cbz	r0, 800ba48 <__sfmoreglue+0x28>
 800ba36:	2100      	movs	r1, #0
 800ba38:	e9c0 1600 	strd	r1, r6, [r0]
 800ba3c:	300c      	adds	r0, #12
 800ba3e:	60a0      	str	r0, [r4, #8]
 800ba40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba44:	f7fd fb6c 	bl	8009120 <memset>
 800ba48:	4620      	mov	r0, r4
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}

0800ba4c <__sfp_lock_acquire>:
 800ba4c:	4801      	ldr	r0, [pc, #4]	; (800ba54 <__sfp_lock_acquire+0x8>)
 800ba4e:	f000 b8b3 	b.w	800bbb8 <__retarget_lock_acquire_recursive>
 800ba52:	bf00      	nop
 800ba54:	2000499c 	.word	0x2000499c

0800ba58 <__sfp_lock_release>:
 800ba58:	4801      	ldr	r0, [pc, #4]	; (800ba60 <__sfp_lock_release+0x8>)
 800ba5a:	f000 b8ae 	b.w	800bbba <__retarget_lock_release_recursive>
 800ba5e:	bf00      	nop
 800ba60:	2000499c 	.word	0x2000499c

0800ba64 <__sinit_lock_acquire>:
 800ba64:	4801      	ldr	r0, [pc, #4]	; (800ba6c <__sinit_lock_acquire+0x8>)
 800ba66:	f000 b8a7 	b.w	800bbb8 <__retarget_lock_acquire_recursive>
 800ba6a:	bf00      	nop
 800ba6c:	20004997 	.word	0x20004997

0800ba70 <__sinit_lock_release>:
 800ba70:	4801      	ldr	r0, [pc, #4]	; (800ba78 <__sinit_lock_release+0x8>)
 800ba72:	f000 b8a2 	b.w	800bbba <__retarget_lock_release_recursive>
 800ba76:	bf00      	nop
 800ba78:	20004997 	.word	0x20004997

0800ba7c <__sinit>:
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	4604      	mov	r4, r0
 800ba80:	f7ff fff0 	bl	800ba64 <__sinit_lock_acquire>
 800ba84:	69a3      	ldr	r3, [r4, #24]
 800ba86:	b11b      	cbz	r3, 800ba90 <__sinit+0x14>
 800ba88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba8c:	f7ff bff0 	b.w	800ba70 <__sinit_lock_release>
 800ba90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba94:	6523      	str	r3, [r4, #80]	; 0x50
 800ba96:	4b13      	ldr	r3, [pc, #76]	; (800bae4 <__sinit+0x68>)
 800ba98:	4a13      	ldr	r2, [pc, #76]	; (800bae8 <__sinit+0x6c>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba9e:	42a3      	cmp	r3, r4
 800baa0:	bf04      	itt	eq
 800baa2:	2301      	moveq	r3, #1
 800baa4:	61a3      	streq	r3, [r4, #24]
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 f820 	bl	800baec <__sfp>
 800baac:	6060      	str	r0, [r4, #4]
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 f81c 	bl	800baec <__sfp>
 800bab4:	60a0      	str	r0, [r4, #8]
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 f818 	bl	800baec <__sfp>
 800babc:	2200      	movs	r2, #0
 800babe:	60e0      	str	r0, [r4, #12]
 800bac0:	2104      	movs	r1, #4
 800bac2:	6860      	ldr	r0, [r4, #4]
 800bac4:	f7ff ff82 	bl	800b9cc <std>
 800bac8:	68a0      	ldr	r0, [r4, #8]
 800baca:	2201      	movs	r2, #1
 800bacc:	2109      	movs	r1, #9
 800bace:	f7ff ff7d 	bl	800b9cc <std>
 800bad2:	68e0      	ldr	r0, [r4, #12]
 800bad4:	2202      	movs	r2, #2
 800bad6:	2112      	movs	r1, #18
 800bad8:	f7ff ff78 	bl	800b9cc <std>
 800badc:	2301      	movs	r3, #1
 800bade:	61a3      	str	r3, [r4, #24]
 800bae0:	e7d2      	b.n	800ba88 <__sinit+0xc>
 800bae2:	bf00      	nop
 800bae4:	0800bfe8 	.word	0x0800bfe8
 800bae8:	0800ba15 	.word	0x0800ba15

0800baec <__sfp>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	4607      	mov	r7, r0
 800baf0:	f7ff ffac 	bl	800ba4c <__sfp_lock_acquire>
 800baf4:	4b1e      	ldr	r3, [pc, #120]	; (800bb70 <__sfp+0x84>)
 800baf6:	681e      	ldr	r6, [r3, #0]
 800baf8:	69b3      	ldr	r3, [r6, #24]
 800bafa:	b913      	cbnz	r3, 800bb02 <__sfp+0x16>
 800bafc:	4630      	mov	r0, r6
 800bafe:	f7ff ffbd 	bl	800ba7c <__sinit>
 800bb02:	3648      	adds	r6, #72	; 0x48
 800bb04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	d503      	bpl.n	800bb14 <__sfp+0x28>
 800bb0c:	6833      	ldr	r3, [r6, #0]
 800bb0e:	b30b      	cbz	r3, 800bb54 <__sfp+0x68>
 800bb10:	6836      	ldr	r6, [r6, #0]
 800bb12:	e7f7      	b.n	800bb04 <__sfp+0x18>
 800bb14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb18:	b9d5      	cbnz	r5, 800bb50 <__sfp+0x64>
 800bb1a:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <__sfp+0x88>)
 800bb1c:	60e3      	str	r3, [r4, #12]
 800bb1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bb22:	6665      	str	r5, [r4, #100]	; 0x64
 800bb24:	f000 f847 	bl	800bbb6 <__retarget_lock_init_recursive>
 800bb28:	f7ff ff96 	bl	800ba58 <__sfp_lock_release>
 800bb2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bb30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bb34:	6025      	str	r5, [r4, #0]
 800bb36:	61a5      	str	r5, [r4, #24]
 800bb38:	2208      	movs	r2, #8
 800bb3a:	4629      	mov	r1, r5
 800bb3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bb40:	f7fd faee 	bl	8009120 <memset>
 800bb44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb50:	3468      	adds	r4, #104	; 0x68
 800bb52:	e7d9      	b.n	800bb08 <__sfp+0x1c>
 800bb54:	2104      	movs	r1, #4
 800bb56:	4638      	mov	r0, r7
 800bb58:	f7ff ff62 	bl	800ba20 <__sfmoreglue>
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	6030      	str	r0, [r6, #0]
 800bb60:	2800      	cmp	r0, #0
 800bb62:	d1d5      	bne.n	800bb10 <__sfp+0x24>
 800bb64:	f7ff ff78 	bl	800ba58 <__sfp_lock_release>
 800bb68:	230c      	movs	r3, #12
 800bb6a:	603b      	str	r3, [r7, #0]
 800bb6c:	e7ee      	b.n	800bb4c <__sfp+0x60>
 800bb6e:	bf00      	nop
 800bb70:	0800bfe8 	.word	0x0800bfe8
 800bb74:	ffff0001 	.word	0xffff0001

0800bb78 <_fwalk_reent>:
 800bb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	4688      	mov	r8, r1
 800bb80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb84:	2700      	movs	r7, #0
 800bb86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb8a:	f1b9 0901 	subs.w	r9, r9, #1
 800bb8e:	d505      	bpl.n	800bb9c <_fwalk_reent+0x24>
 800bb90:	6824      	ldr	r4, [r4, #0]
 800bb92:	2c00      	cmp	r4, #0
 800bb94:	d1f7      	bne.n	800bb86 <_fwalk_reent+0xe>
 800bb96:	4638      	mov	r0, r7
 800bb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9c:	89ab      	ldrh	r3, [r5, #12]
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d907      	bls.n	800bbb2 <_fwalk_reent+0x3a>
 800bba2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bba6:	3301      	adds	r3, #1
 800bba8:	d003      	beq.n	800bbb2 <_fwalk_reent+0x3a>
 800bbaa:	4629      	mov	r1, r5
 800bbac:	4630      	mov	r0, r6
 800bbae:	47c0      	blx	r8
 800bbb0:	4307      	orrs	r7, r0
 800bbb2:	3568      	adds	r5, #104	; 0x68
 800bbb4:	e7e9      	b.n	800bb8a <_fwalk_reent+0x12>

0800bbb6 <__retarget_lock_init_recursive>:
 800bbb6:	4770      	bx	lr

0800bbb8 <__retarget_lock_acquire_recursive>:
 800bbb8:	4770      	bx	lr

0800bbba <__retarget_lock_release_recursive>:
 800bbba:	4770      	bx	lr

0800bbbc <__swhatbuf_r>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	460e      	mov	r6, r1
 800bbc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc4:	2900      	cmp	r1, #0
 800bbc6:	b096      	sub	sp, #88	; 0x58
 800bbc8:	4614      	mov	r4, r2
 800bbca:	461d      	mov	r5, r3
 800bbcc:	da07      	bge.n	800bbde <__swhatbuf_r+0x22>
 800bbce:	2300      	movs	r3, #0
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	89b3      	ldrh	r3, [r6, #12]
 800bbd4:	061a      	lsls	r2, r3, #24
 800bbd6:	d410      	bmi.n	800bbfa <__swhatbuf_r+0x3e>
 800bbd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbdc:	e00e      	b.n	800bbfc <__swhatbuf_r+0x40>
 800bbde:	466a      	mov	r2, sp
 800bbe0:	f000 f902 	bl	800bde8 <_fstat_r>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	dbf2      	blt.n	800bbce <__swhatbuf_r+0x12>
 800bbe8:	9a01      	ldr	r2, [sp, #4]
 800bbea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bbee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bbf2:	425a      	negs	r2, r3
 800bbf4:	415a      	adcs	r2, r3
 800bbf6:	602a      	str	r2, [r5, #0]
 800bbf8:	e7ee      	b.n	800bbd8 <__swhatbuf_r+0x1c>
 800bbfa:	2340      	movs	r3, #64	; 0x40
 800bbfc:	2000      	movs	r0, #0
 800bbfe:	6023      	str	r3, [r4, #0]
 800bc00:	b016      	add	sp, #88	; 0x58
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <__smakebuf_r>:
 800bc04:	898b      	ldrh	r3, [r1, #12]
 800bc06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc08:	079d      	lsls	r5, r3, #30
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	d507      	bpl.n	800bc20 <__smakebuf_r+0x1c>
 800bc10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	6123      	str	r3, [r4, #16]
 800bc18:	2301      	movs	r3, #1
 800bc1a:	6163      	str	r3, [r4, #20]
 800bc1c:	b002      	add	sp, #8
 800bc1e:	bd70      	pop	{r4, r5, r6, pc}
 800bc20:	ab01      	add	r3, sp, #4
 800bc22:	466a      	mov	r2, sp
 800bc24:	f7ff ffca 	bl	800bbbc <__swhatbuf_r>
 800bc28:	9900      	ldr	r1, [sp, #0]
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	f7ff f987 	bl	800af40 <_malloc_r>
 800bc32:	b948      	cbnz	r0, 800bc48 <__smakebuf_r+0x44>
 800bc34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc38:	059a      	lsls	r2, r3, #22
 800bc3a:	d4ef      	bmi.n	800bc1c <__smakebuf_r+0x18>
 800bc3c:	f023 0303 	bic.w	r3, r3, #3
 800bc40:	f043 0302 	orr.w	r3, r3, #2
 800bc44:	81a3      	strh	r3, [r4, #12]
 800bc46:	e7e3      	b.n	800bc10 <__smakebuf_r+0xc>
 800bc48:	4b0d      	ldr	r3, [pc, #52]	; (800bc80 <__smakebuf_r+0x7c>)
 800bc4a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bc4c:	89a3      	ldrh	r3, [r4, #12]
 800bc4e:	6020      	str	r0, [r4, #0]
 800bc50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc54:	81a3      	strh	r3, [r4, #12]
 800bc56:	9b00      	ldr	r3, [sp, #0]
 800bc58:	6163      	str	r3, [r4, #20]
 800bc5a:	9b01      	ldr	r3, [sp, #4]
 800bc5c:	6120      	str	r0, [r4, #16]
 800bc5e:	b15b      	cbz	r3, 800bc78 <__smakebuf_r+0x74>
 800bc60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc64:	4630      	mov	r0, r6
 800bc66:	f000 f8d1 	bl	800be0c <_isatty_r>
 800bc6a:	b128      	cbz	r0, 800bc78 <__smakebuf_r+0x74>
 800bc6c:	89a3      	ldrh	r3, [r4, #12]
 800bc6e:	f023 0303 	bic.w	r3, r3, #3
 800bc72:	f043 0301 	orr.w	r3, r3, #1
 800bc76:	81a3      	strh	r3, [r4, #12]
 800bc78:	89a0      	ldrh	r0, [r4, #12]
 800bc7a:	4305      	orrs	r5, r0
 800bc7c:	81a5      	strh	r5, [r4, #12]
 800bc7e:	e7cd      	b.n	800bc1c <__smakebuf_r+0x18>
 800bc80:	0800ba15 	.word	0x0800ba15

0800bc84 <_malloc_usable_size_r>:
 800bc84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc88:	1f18      	subs	r0, r3, #4
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bfbc      	itt	lt
 800bc8e:	580b      	ldrlt	r3, [r1, r0]
 800bc90:	18c0      	addlt	r0, r0, r3
 800bc92:	4770      	bx	lr

0800bc94 <_raise_r>:
 800bc94:	291f      	cmp	r1, #31
 800bc96:	b538      	push	{r3, r4, r5, lr}
 800bc98:	4604      	mov	r4, r0
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	d904      	bls.n	800bca8 <_raise_r+0x14>
 800bc9e:	2316      	movs	r3, #22
 800bca0:	6003      	str	r3, [r0, #0]
 800bca2:	f04f 30ff 	mov.w	r0, #4294967295
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bcaa:	b112      	cbz	r2, 800bcb2 <_raise_r+0x1e>
 800bcac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bcb0:	b94b      	cbnz	r3, 800bcc6 <_raise_r+0x32>
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 f830 	bl	800bd18 <_getpid_r>
 800bcb8:	462a      	mov	r2, r5
 800bcba:	4601      	mov	r1, r0
 800bcbc:	4620      	mov	r0, r4
 800bcbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcc2:	f000 b817 	b.w	800bcf4 <_kill_r>
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d00a      	beq.n	800bce0 <_raise_r+0x4c>
 800bcca:	1c59      	adds	r1, r3, #1
 800bccc:	d103      	bne.n	800bcd6 <_raise_r+0x42>
 800bcce:	2316      	movs	r3, #22
 800bcd0:	6003      	str	r3, [r0, #0]
 800bcd2:	2001      	movs	r0, #1
 800bcd4:	e7e7      	b.n	800bca6 <_raise_r+0x12>
 800bcd6:	2400      	movs	r4, #0
 800bcd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcdc:	4628      	mov	r0, r5
 800bcde:	4798      	blx	r3
 800bce0:	2000      	movs	r0, #0
 800bce2:	e7e0      	b.n	800bca6 <_raise_r+0x12>

0800bce4 <raise>:
 800bce4:	4b02      	ldr	r3, [pc, #8]	; (800bcf0 <raise+0xc>)
 800bce6:	4601      	mov	r1, r0
 800bce8:	6818      	ldr	r0, [r3, #0]
 800bcea:	f7ff bfd3 	b.w	800bc94 <_raise_r>
 800bcee:	bf00      	nop
 800bcf0:	20000024 	.word	0x20000024

0800bcf4 <_kill_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_kill_r+0x20>)
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4604      	mov	r4, r0
 800bcfc:	4608      	mov	r0, r1
 800bcfe:	4611      	mov	r1, r2
 800bd00:	602b      	str	r3, [r5, #0]
 800bd02:	f7f7 f8c1 	bl	8002e88 <_kill>
 800bd06:	1c43      	adds	r3, r0, #1
 800bd08:	d102      	bne.n	800bd10 <_kill_r+0x1c>
 800bd0a:	682b      	ldr	r3, [r5, #0]
 800bd0c:	b103      	cbz	r3, 800bd10 <_kill_r+0x1c>
 800bd0e:	6023      	str	r3, [r4, #0]
 800bd10:	bd38      	pop	{r3, r4, r5, pc}
 800bd12:	bf00      	nop
 800bd14:	20004990 	.word	0x20004990

0800bd18 <_getpid_r>:
 800bd18:	f7f7 b8ae 	b.w	8002e78 <_getpid>

0800bd1c <__sread>:
 800bd1c:	b510      	push	{r4, lr}
 800bd1e:	460c      	mov	r4, r1
 800bd20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd24:	f000 f894 	bl	800be50 <_read_r>
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	bfab      	itete	ge
 800bd2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bd30:	181b      	addge	r3, r3, r0
 800bd32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd36:	bfac      	ite	ge
 800bd38:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd3a:	81a3      	strhlt	r3, [r4, #12]
 800bd3c:	bd10      	pop	{r4, pc}

0800bd3e <__swrite>:
 800bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd42:	461f      	mov	r7, r3
 800bd44:	898b      	ldrh	r3, [r1, #12]
 800bd46:	05db      	lsls	r3, r3, #23
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	4616      	mov	r6, r2
 800bd4e:	d505      	bpl.n	800bd5c <__swrite+0x1e>
 800bd50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd54:	2302      	movs	r3, #2
 800bd56:	2200      	movs	r2, #0
 800bd58:	f000 f868 	bl	800be2c <_lseek_r>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	4632      	mov	r2, r6
 800bd6a:	463b      	mov	r3, r7
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd72:	f000 b817 	b.w	800bda4 <_write_r>

0800bd76 <__sseek>:
 800bd76:	b510      	push	{r4, lr}
 800bd78:	460c      	mov	r4, r1
 800bd7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd7e:	f000 f855 	bl	800be2c <_lseek_r>
 800bd82:	1c43      	adds	r3, r0, #1
 800bd84:	89a3      	ldrh	r3, [r4, #12]
 800bd86:	bf15      	itete	ne
 800bd88:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd92:	81a3      	strheq	r3, [r4, #12]
 800bd94:	bf18      	it	ne
 800bd96:	81a3      	strhne	r3, [r4, #12]
 800bd98:	bd10      	pop	{r4, pc}

0800bd9a <__sclose>:
 800bd9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9e:	f000 b813 	b.w	800bdc8 <_close_r>
	...

0800bda4 <_write_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	; (800bdc4 <_write_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f7 f89f 	bl	8002ef6 <_write>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_write_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_write_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20004990 	.word	0x20004990

0800bdc8 <_close_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	; (800bde4 <_close_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f7 f8ab 	bl	8002f2e <_close>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_close_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_close_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20004990 	.word	0x20004990

0800bde8 <_fstat_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_fstat_r+0x20>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	602b      	str	r3, [r5, #0]
 800bdf6:	f7f7 f8a6 	bl	8002f46 <_fstat>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	d102      	bne.n	800be04 <_fstat_r+0x1c>
 800bdfe:	682b      	ldr	r3, [r5, #0]
 800be00:	b103      	cbz	r3, 800be04 <_fstat_r+0x1c>
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	bd38      	pop	{r3, r4, r5, pc}
 800be06:	bf00      	nop
 800be08:	20004990 	.word	0x20004990

0800be0c <_isatty_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d06      	ldr	r5, [pc, #24]	; (800be28 <_isatty_r+0x1c>)
 800be10:	2300      	movs	r3, #0
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	602b      	str	r3, [r5, #0]
 800be18:	f7f7 f8a5 	bl	8002f66 <_isatty>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d102      	bne.n	800be26 <_isatty_r+0x1a>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	b103      	cbz	r3, 800be26 <_isatty_r+0x1a>
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	20004990 	.word	0x20004990

0800be2c <_lseek_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d07      	ldr	r5, [pc, #28]	; (800be4c <_lseek_r+0x20>)
 800be30:	4604      	mov	r4, r0
 800be32:	4608      	mov	r0, r1
 800be34:	4611      	mov	r1, r2
 800be36:	2200      	movs	r2, #0
 800be38:	602a      	str	r2, [r5, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	f7f7 f89e 	bl	8002f7c <_lseek>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	d102      	bne.n	800be4a <_lseek_r+0x1e>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	b103      	cbz	r3, 800be4a <_lseek_r+0x1e>
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	20004990 	.word	0x20004990

0800be50 <_read_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4d07      	ldr	r5, [pc, #28]	; (800be70 <_read_r+0x20>)
 800be54:	4604      	mov	r4, r0
 800be56:	4608      	mov	r0, r1
 800be58:	4611      	mov	r1, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	602a      	str	r2, [r5, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	f7f7 f82c 	bl	8002ebc <_read>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_read_r+0x1e>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_read_r+0x1e>
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	20004990 	.word	0x20004990

0800be74 <_init>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr

0800be80 <_fini>:
 800be80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be82:	bf00      	nop
 800be84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be86:	bc08      	pop	{r3}
 800be88:	469e      	mov	lr, r3
 800be8a:	4770      	bx	lr
