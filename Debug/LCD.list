
LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c544  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800c718  0800c718  0001c718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc6c  0800cc6c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc6c  0800cc6c  0001cc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc74  0800cc74  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc74  0800cc74  0001cc74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc78  0800cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800cc7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004800  20000200  0800ce7c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a00  0800ce7c  00024a00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df4d  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c83  00000000  00000000  0003e17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00041e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00043460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027587  00000000  00000000  00044948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3ab  00000000  00000000  0006becf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5621  00000000  00000000  0008827a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016d89b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f98  00000000  00000000  0016d8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000200 	.word	0x20000200
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c6fc 	.word	0x0800c6fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000204 	.word	0x20000204
 800020c:	0800c6fc 	.word	0x0800c6fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <LiquidCrystal>:
uint8_t _numlines;
uint8_t _row_offsets[4];

void LiquidCrystal(GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			     uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af0a      	add	r7, sp, #40	; 0x28
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4603      	mov	r3, r0
 8000f90:	817b      	strh	r3, [r7, #10]
 8000f92:	460b      	mov	r3, r1
 8000f94:	813b      	strh	r3, [r7, #8]
 8000f96:	4613      	mov	r3, r2
 8000f98:	80fb      	strh	r3, [r7, #6]
  if(_fourbit_mode)
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <LiquidCrystal+0x90>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d019      	beq.n	8000fd6 <LiquidCrystal+0x56>
    init(1, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000fa2:	8939      	ldrh	r1, [r7, #8]
 8000fa4:	897a      	ldrh	r2, [r7, #10]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	9308      	str	r3, [sp, #32]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9307      	str	r3, [sp, #28]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9306      	str	r3, [sp, #24]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9305      	str	r3, [sp, #20]
 8000fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb8:	9304      	str	r3, [sp, #16]
 8000fba:	8c3b      	ldrh	r3, [r7, #32]
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	8bbb      	ldrh	r3, [r7, #28]
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	8b3b      	ldrh	r3, [r7, #24]
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 f820 	bl	8001014 <init>
  else
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
 8000fd4:	e018      	b.n	8001008 <LiquidCrystal+0x88>
    init(0, gpioport, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
 8000fd6:	8939      	ldrh	r1, [r7, #8]
 8000fd8:	897a      	ldrh	r2, [r7, #10]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9308      	str	r3, [sp, #32]
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9307      	str	r3, [sp, #28]
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	9306      	str	r3, [sp, #24]
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9305      	str	r3, [sp, #20]
 8000fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fec:	9304      	str	r3, [sp, #16]
 8000fee:	8c3b      	ldrh	r3, [r7, #32]
 8000ff0:	9303      	str	r3, [sp, #12]
 8000ff2:	8bbb      	ldrh	r3, [r7, #28]
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	8b3b      	ldrh	r3, [r7, #24]
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	460b      	mov	r3, r1
 8001000:	68f9      	ldr	r1, [r7, #12]
 8001002:	2000      	movs	r0, #0
 8001004:	f000 f806 	bl	8001014 <init>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000

08001014 <init>:

void init(uint8_t fourbitmode, GPIO_TypeDef *gpioport, uint16_t rs, uint16_t rw, uint16_t enable,
			 uint16_t d0, uint16_t d1, uint16_t d2, uint16_t d3,
			 uint16_t d4, uint16_t d5, uint16_t d6, uint16_t d7)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	4611      	mov	r1, r2
 800101e:	461a      	mov	r2, r3
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	460b      	mov	r3, r1
 8001026:	81bb      	strh	r3, [r7, #12]
 8001028:	4613      	mov	r3, r2
 800102a:	80fb      	strh	r3, [r7, #6]
  _rs_pin = rs;
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <init+0x84>)
 800102e:	89bb      	ldrh	r3, [r7, #12]
 8001030:	8013      	strh	r3, [r2, #0]
  _rw_pin = rw;
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <init+0x88>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	8013      	strh	r3, [r2, #0]
  _enable_pin = enable;
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <init+0x8c>)
 800103a:	8b3b      	ldrh	r3, [r7, #24]
 800103c:	8013      	strh	r3, [r2, #0]
  _port = gpioport;
 800103e:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <init+0x90>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	6013      	str	r3, [r2, #0]

  _data_pins[0] = d0;
 8001044:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <init+0x94>)
 8001046:	8bbb      	ldrh	r3, [r7, #28]
 8001048:	8013      	strh	r3, [r2, #0]
  _data_pins[1] = d1;
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <init+0x94>)
 800104c:	8c3b      	ldrh	r3, [r7, #32]
 800104e:	8053      	strh	r3, [r2, #2]
  _data_pins[2] = d2;
 8001050:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <init+0x94>)
 8001052:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001054:	8093      	strh	r3, [r2, #4]
  _data_pins[3] = d3;
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <init+0x94>)
 8001058:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800105a:	80d3      	strh	r3, [r2, #6]
  _data_pins[4] = d4;
 800105c:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <init+0x94>)
 800105e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001060:	8113      	strh	r3, [r2, #8]
  _data_pins[5] = d5;
 8001062:	4a11      	ldr	r2, [pc, #68]	; (80010a8 <init+0x94>)
 8001064:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001066:	8153      	strh	r3, [r2, #10]
  _data_pins[6] = d6;
 8001068:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <init+0x94>)
 800106a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800106c:	8193      	strh	r3, [r2, #12]
  _data_pins[7] = d7;
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <init+0x94>)
 8001070:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001072:	81d3      	strh	r3, [r2, #14]

  if (fourbitmode)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <init+0x6e>
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	e002      	b.n	8001088 <init+0x74>
  else
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <init+0x98>)
 8001084:	2210      	movs	r2, #16
 8001086:	701a      	strb	r2, [r3, #0]

  begin(16, 2);
 8001088:	2102      	movs	r1, #2
 800108a:	2010      	movs	r0, #16
 800108c:	f000 f810 	bl	80010b0 <begin>
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000310 	.word	0x20000310
 800109c:	200002f0 	.word	0x200002f0
 80010a0:	2000030e 	.word	0x2000030e
 80010a4:	200002f4 	.word	0x200002f4
 80010a8:	200002fc 	.word	0x200002fc
 80010ac:	2000030d 	.word	0x2000030d

080010b0 <begin>:

void begin(uint8_t cols, uint8_t lines) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	460a      	mov	r2, r1
 80010ba:	71fb      	strb	r3, [r7, #7]
 80010bc:	4613      	mov	r3, r2
 80010be:	71bb      	strb	r3, [r7, #6]
  if (lines > 1) {
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d906      	bls.n	80010d4 <begin+0x24>
    _displayfunction |= LCD_2LINE;
 80010c6:	4b77      	ldr	r3, [pc, #476]	; (80012a4 <begin+0x1f4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	f043 0308 	orr.w	r3, r3, #8
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b74      	ldr	r3, [pc, #464]	; (80012a4 <begin+0x1f4>)
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 80010d4:	4a74      	ldr	r2, [pc, #464]	; (80012a8 <begin+0x1f8>)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	3340      	adds	r3, #64	; 0x40
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f998 	bl	8001418 <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 80010e8:	4b70      	ldr	r3, [pc, #448]	; (80012ac <begin+0x1fc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d009      	beq.n	8001104 <begin+0x54>
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d106      	bne.n	8001104 <begin+0x54>
    _displayfunction |= LCD_5x10DOTS;
 80010f6:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <begin+0x1f4>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b68      	ldr	r3, [pc, #416]	; (80012a4 <begin+0x1f4>)
 8001102:	701a      	strb	r2, [r3, #0]
  }

  //Initializing GPIO Pins
  enableClock();
 8001104:	f000 f8e4 	bl	80012d0 <enableClock>

  GPIO_InitTypeDef gpio_init;
  gpio_init.Speed = GPIO_SPEED_FREQ_HIGH;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
  gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]

  if(_fourbit_mode)
 8001110:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <begin+0x200>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d01b      	beq.n	8001150 <begin+0xa0>
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3];
 8001118:	4b66      	ldr	r3, [pc, #408]	; (80012b4 <begin+0x204>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b66      	ldr	r3, [pc, #408]	; (80012b8 <begin+0x208>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	4313      	orrs	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b65      	ldr	r3, [pc, #404]	; (80012bc <begin+0x20c>)
 8001126:	881b      	ldrh	r3, [r3, #0]
 8001128:	4313      	orrs	r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <begin+0x210>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	4313      	orrs	r3, r2
 8001132:	b29a      	uxth	r2, r3
 8001134:	4b62      	ldr	r3, [pc, #392]	; (80012c0 <begin+0x210>)
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	4313      	orrs	r3, r2
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b60      	ldr	r3, [pc, #384]	; (80012c0 <begin+0x210>)
 800113e:	889b      	ldrh	r3, [r3, #4]
 8001140:	4313      	orrs	r3, r2
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b5e      	ldr	r3, [pc, #376]	; (80012c0 <begin+0x210>)
 8001146:	88db      	ldrh	r3, [r3, #6]
 8001148:	4313      	orrs	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	e02a      	b.n	80011a6 <begin+0xf6>
  else
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001150:	4b58      	ldr	r3, [pc, #352]	; (80012b4 <begin+0x204>)
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <begin+0x208>)
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	4313      	orrs	r3, r2
 800115a:	b29a      	uxth	r2, r3
 800115c:	4b57      	ldr	r3, [pc, #348]	; (80012bc <begin+0x20c>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	4313      	orrs	r3, r2
 8001162:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001164:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <begin+0x210>)
 8001166:	881b      	ldrh	r3, [r3, #0]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001168:	4313      	orrs	r3, r2
 800116a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800116c:	4b54      	ldr	r3, [pc, #336]	; (80012c0 <begin+0x210>)
 800116e:	885b      	ldrh	r3, [r3, #2]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001170:	4313      	orrs	r3, r2
 8001172:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 8001174:	4b52      	ldr	r3, [pc, #328]	; (80012c0 <begin+0x210>)
 8001176:	889b      	ldrh	r3, [r3, #4]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001178:	4313      	orrs	r3, r2
 800117a:	b29a      	uxth	r2, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <begin+0x210>)
 800117e:	88db      	ldrh	r3, [r3, #6]
                    _data_pins[4] | _data_pins[5] | _data_pins[6] | _data_pins[7];
 8001180:	4313      	orrs	r3, r2
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b4e      	ldr	r3, [pc, #312]	; (80012c0 <begin+0x210>)
 8001186:	891b      	ldrh	r3, [r3, #8]
 8001188:	4313      	orrs	r3, r2
 800118a:	b29a      	uxth	r2, r3
 800118c:	4b4c      	ldr	r3, [pc, #304]	; (80012c0 <begin+0x210>)
 800118e:	895b      	ldrh	r3, [r3, #10]
 8001190:	4313      	orrs	r3, r2
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <begin+0x210>)
 8001196:	899b      	ldrh	r3, [r3, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	b29a      	uxth	r2, r3
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <begin+0x210>)
 800119e:	89db      	ldrh	r3, [r3, #14]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b29b      	uxth	r3, r3
    gpio_init.Pin = _rs_pin | _rw_pin | _enable_pin | _data_pins[0] | _data_pins[1] | _data_pins[2] | _data_pins[3] |
 80011a4:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_Init(_port, &gpio_init);
 80011a6:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <begin+0x214>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 fb67 	bl	8004884 <HAL_GPIO_Init>

  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // so we'll wait 50 just to make sure
  HAL_Delay(50);
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f002 f888 	bl	80032cc <HAL_Delay>

  // Now we pull both RS and R/W low to begin commands
  HAL_GPIO_WritePin(_port, _rs_pin, GPIO_PIN_RESET);
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <begin+0x214>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a3c      	ldr	r2, [pc, #240]	; (80012b4 <begin+0x204>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 fcf0 	bl	8004bac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <begin+0x214>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a3a      	ldr	r2, [pc, #232]	; (80012bc <begin+0x20c>)
 80011d2:	8811      	ldrh	r1, [r2, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fce8 	bl	8004bac <HAL_GPIO_WritePin>

  if (_rw_pin != 255) {
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <begin+0x208>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	2bff      	cmp	r3, #255	; 0xff
 80011e2:	d007      	beq.n	80011f4 <begin+0x144>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 80011e4:	4b37      	ldr	r3, [pc, #220]	; (80012c4 <begin+0x214>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <begin+0x208>)
 80011ea:	8811      	ldrh	r1, [r2, #0]
 80011ec:	2200      	movs	r2, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 fcdc 	bl	8004bac <HAL_GPIO_WritePin>
  }

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 80011f4:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <begin+0x1f4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f003 0310 	and.w	r3, r3, #16
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d115      	bne.n	800122c <begin+0x17c>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 fa55 	bl	80016b0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001206:	2005      	movs	r0, #5
 8001208:	f002 f860 	bl	80032cc <HAL_Delay>

    // second try
    write4bits(0x03);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fa4f 	bl	80016b0 <write4bits>
    HAL_Delay(5); // wait min 4.1ms
 8001212:	2005      	movs	r0, #5
 8001214:	f002 f85a 	bl	80032cc <HAL_Delay>

    // third go!
    write4bits(0x03);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 fa49 	bl	80016b0 <write4bits>
    HAL_Delay(1);
 800121e:	2001      	movs	r0, #1
 8001220:	f002 f854 	bl	80032cc <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8001224:	2002      	movs	r0, #2
 8001226:	f000 fa43 	bl	80016b0 <write4bits>
 800122a:	e01d      	b.n	8001268 <begin+0x1b8>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <begin+0x1f4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f9b4 	bl	80015a4 <command>
    HAL_Delay(5);  // wait more than 4.1ms
 800123c:	2005      	movs	r0, #5
 800123e:	f002 f845 	bl	80032cc <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8001242:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <begin+0x1f4>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	f043 0320 	orr.w	r3, r3, #32
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f9a9 	bl	80015a4 <command>
    HAL_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f002 f83a 	bl	80032cc <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <begin+0x1f4>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f99e 	bl	80015a4 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <begin+0x1f4>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	b2db      	uxtb	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f996 	bl	80015a4 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001278:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <begin+0x218>)
 800127a:	2204      	movs	r2, #4
 800127c:	701a      	strb	r2, [r3, #0]
  display();
 800127e:	f000 f927 	bl	80014d0 <display>

  // clear it off
  clear();
 8001282:	f000 f8e9 	bl	8001458 <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <begin+0x21c>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <begin+0x21c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	b2db      	uxtb	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f984 	bl	80015a4 <command>

}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2000030d 	.word	0x2000030d
 80012a8:	200002f9 	.word	0x200002f9
 80012ac:	2000021c 	.word	0x2000021c
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000310 	.word	0x20000310
 80012b8:	200002f0 	.word	0x200002f0
 80012bc:	2000030e 	.word	0x2000030e
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	200002f4 	.word	0x200002f4
 80012c8:	200002f8 	.word	0x200002f8
 80012cc:	2000030c 	.word	0x2000030c

080012d0 <enableClock>:

// enables GPIO RCC Clock
void enableClock(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b089      	sub	sp, #36	; 0x24
 80012d4:	af00      	add	r7, sp, #0
  if(_port == GPIOA)
 80012d6:	4b48      	ldr	r3, [pc, #288]	; (80013f8 <enableClock+0x128>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a48      	ldr	r2, [pc, #288]	; (80013fc <enableClock+0x12c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d10e      	bne.n	80012fe <enableClock+0x2e>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	4b46      	ldr	r3, [pc, #280]	; (8001400 <enableClock+0x130>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	4a45      	ldr	r2, [pc, #276]	; (8001400 <enableClock+0x130>)
 80012ea:	f043 0301 	orr.w	r3, r3, #1
 80012ee:	6313      	str	r3, [r2, #48]	; 0x30
 80012f0:	4b43      	ldr	r3, [pc, #268]	; (8001400 <enableClock+0x130>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	61fb      	str	r3, [r7, #28]
 80012fa:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOE_CLK_ENABLE();
	else if(_port == GPIOF)
		__HAL_RCC_GPIOF_CLK_ENABLE();

  // if you have a port that is not listed add it below the other else ifs
}
 80012fc:	e076      	b.n	80013ec <enableClock+0x11c>
  else if(_port == GPIOB)
 80012fe:	4b3e      	ldr	r3, [pc, #248]	; (80013f8 <enableClock+0x128>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a40      	ldr	r2, [pc, #256]	; (8001404 <enableClock+0x134>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d10e      	bne.n	8001326 <enableClock+0x56>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	4b3c      	ldr	r3, [pc, #240]	; (8001400 <enableClock+0x130>)
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4a3b      	ldr	r2, [pc, #236]	; (8001400 <enableClock+0x130>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	6313      	str	r3, [r2, #48]	; 0x30
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <enableClock+0x130>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	61bb      	str	r3, [r7, #24]
 8001322:	69bb      	ldr	r3, [r7, #24]
}
 8001324:	e062      	b.n	80013ec <enableClock+0x11c>
  else if(_port == GPIOB)
 8001326:	4b34      	ldr	r3, [pc, #208]	; (80013f8 <enableClock+0x128>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a36      	ldr	r2, [pc, #216]	; (8001404 <enableClock+0x134>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d10e      	bne.n	800134e <enableClock+0x7e>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <enableClock+0x130>)
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <enableClock+0x130>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	6313      	str	r3, [r2, #48]	; 0x30
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <enableClock+0x130>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
}
 800134c:	e04e      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOC)
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <enableClock+0x128>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2d      	ldr	r2, [pc, #180]	; (8001408 <enableClock+0x138>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d10e      	bne.n	8001376 <enableClock+0xa6>
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <enableClock+0x130>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a27      	ldr	r2, [pc, #156]	; (8001400 <enableClock+0x130>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b25      	ldr	r3, [pc, #148]	; (8001400 <enableClock+0x130>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
}
 8001374:	e03a      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOD)
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <enableClock+0x128>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a24      	ldr	r2, [pc, #144]	; (800140c <enableClock+0x13c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d10e      	bne.n	800139e <enableClock+0xce>
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <enableClock+0x130>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <enableClock+0x130>)
 800138a:	f043 0308 	orr.w	r3, r3, #8
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <enableClock+0x130>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0308 	and.w	r3, r3, #8
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	e026      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOE)
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <enableClock+0x128>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <enableClock+0x140>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d10e      	bne.n	80013c6 <enableClock+0xf6>
		__HAL_RCC_GPIOE_CLK_ENABLE();
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <enableClock+0x130>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	4a13      	ldr	r2, [pc, #76]	; (8001400 <enableClock+0x130>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6313      	str	r3, [r2, #48]	; 0x30
 80013b8:	4b11      	ldr	r3, [pc, #68]	; (8001400 <enableClock+0x130>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
}
 80013c4:	e012      	b.n	80013ec <enableClock+0x11c>
	else if(_port == GPIOF)
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <enableClock+0x128>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <enableClock+0x144>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d10d      	bne.n	80013ec <enableClock+0x11c>
		__HAL_RCC_GPIOF_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <enableClock+0x130>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	4a09      	ldr	r2, [pc, #36]	; (8001400 <enableClock+0x130>)
 80013da:	f043 0320 	orr.w	r3, r3, #32
 80013de:	6313      	str	r3, [r2, #48]	; 0x30
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <enableClock+0x130>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	f003 0320 	and.w	r3, r3, #32
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	bf00      	nop
 80013ee:	3724      	adds	r7, #36	; 0x24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	200002f4 	.word	0x200002f4
 80013fc:	40020000 	.word	0x40020000
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400
 8001408:	40020800 	.word	0x40020800
 800140c:	40020c00 	.word	0x40020c00
 8001410:	40021000 	.word	0x40021000
 8001414:	40021400 	.word	0x40021400

08001418 <setRowOffsets>:

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <setRowOffsets+0x3c>)
 800142c:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <setRowOffsets+0x3c>)
 8001434:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <setRowOffsets+0x3c>)
 800143c:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <setRowOffsets+0x3c>)
 8001444:	70da      	strb	r2, [r3, #3]
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	200002ec 	.word	0x200002ec

08001458 <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 800145c:	2001      	movs	r0, #1
 800145e:	f000 f8a1 	bl	80015a4 <command>
  HAL_Delay(2);  // this command takes a long time!
 8001462:	2002      	movs	r0, #2
 8001464:	f001 ff32 	bl	80032cc <HAL_Delay>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  HAL_Delay(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	460a      	mov	r2, r1
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 800147c:	2304      	movs	r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d803      	bhi.n	8001490 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	3b01      	subs	r3, #1
 800148e:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8001490:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <setCursor+0x5c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	79ba      	ldrb	r2, [r7, #6]
 8001496:	429a      	cmp	r2, r3
 8001498:	d303      	bcc.n	80014a2 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <setCursor+0x5c>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	3b01      	subs	r3, #1
 80014a0:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	4a09      	ldr	r2, [pc, #36]	; (80014cc <setCursor+0x60>)
 80014a6:	5cd2      	ldrb	r2, [r2, r3]
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4413      	add	r3, r2
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f873 	bl	80015a4 <command>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200002f9 	.word	0x200002f9
 80014cc:	200002ec 	.word	0x200002ec

080014d0 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <display+0x28>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <display+0x28>)
 80014e0:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <display+0x28>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f859 	bl	80015a4 <command>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002f8 	.word	0x200002f8

080014fc <print>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
size_t print(const char str[]) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <print+0x12>
 800150a:	2300      	movs	r3, #0
 800150c:	e01d      	b.n	800154a <print+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f7fe fe7c 	bl	8000210 <strlen>
 8001518:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]

  while (size--) {
 800151e:	e00c      	b.n	800153a <print+0x3e>
    if (write(*buffer++)) n++;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	617a      	str	r2, [r7, #20]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 f849 	bl	80015c0 <write>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <print+0x4a>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
  while (size--) {
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1e5a      	subs	r2, r3, #1
 800153e:	613a      	str	r2, [r7, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ed      	bne.n	8001520 <print+0x24>
 8001544:	e000      	b.n	8001548 <print+0x4c>
    else break;
 8001546:	bf00      	nop
  }
  return n;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <createChar>:

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void createChar(uint8_t location, uint8_t charmap[]) {
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	6039      	str	r1, [r7, #0]
 800155c:	71fb      	strb	r3, [r7, #7]
  location &= 0x7; // we only have 8 locations 0-7
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	71fb      	strb	r3, [r7, #7]
  command(LCD_SETCGRAMADDR | (location << 3));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	b25b      	sxtb	r3, r3
 800156c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001570:	b25b      	sxtb	r3, r3
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f000 f815 	bl	80015a4 <command>
  for (int i=0; i<8; i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e009      	b.n	8001594 <createChar+0x42>
    write(charmap[i]);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f819 	bl	80015c0 <write>
  for (int i=0; i<8; i++) {
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b07      	cmp	r3, #7
 8001598:	ddf2      	ble.n	8001580 <createChar+0x2e>
  }
}
 800159a:	bf00      	nop
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <command>:

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_RESET);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f814 	bl	80015e0 <send>
}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <write>:

inline size_t write(uint8_t value) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  send(value, GPIO_PIN_SET);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	2101      	movs	r1, #1
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f806 	bl	80015e0 <send>
  return 1; // assume success
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, GPIO_PinState mode) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
  HAL_GPIO_WritePin(_port, _rs_pin, mode);
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <send+0x6c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a16      	ldr	r2, [pc, #88]	; (8001650 <send+0x70>)
 80015f6:	8811      	ldrh	r1, [r2, #0]
 80015f8:	79ba      	ldrb	r2, [r7, #6]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fad6 	bl	8004bac <HAL_GPIO_WritePin>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) {
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <send+0x74>)
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	2bff      	cmp	r3, #255	; 0xff
 8001606:	d007      	beq.n	8001618 <send+0x38>
    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
 8001608:	4b10      	ldr	r3, [pc, #64]	; (800164c <send+0x6c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a11      	ldr	r2, [pc, #68]	; (8001654 <send+0x74>)
 800160e:	8811      	ldrh	r1, [r2, #0]
 8001610:	2200      	movs	r2, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f003 faca 	bl	8004bac <HAL_GPIO_WritePin>
  }

  if (_displayfunction & LCD_8BITMODE) {
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <send+0x78>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <send+0x4e>
    write8bits(value);
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f86c 	bl	8001704 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 800162c:	e009      	b.n	8001642 <send+0x62>
    write4bits(value>>4);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f83b 	bl	80016b0 <write4bits>
    write4bits(value);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f000 f837 	bl	80016b0 <write4bits>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200002f4 	.word	0x200002f4
 8001650:	20000310 	.word	0x20000310
 8001654:	200002f0 	.word	0x200002f0
 8001658:	2000030d 	.word	0x2000030d

0800165c <pulseEnable>:

void pulseEnable(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <pulseEnable+0x4c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a11      	ldr	r2, [pc, #68]	; (80016ac <pulseEnable+0x50>)
 8001666:	8811      	ldrh	r1, [r2, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f003 fa9e 	bl	8004bac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001670:	2001      	movs	r0, #1
 8001672:	f001 fe2b 	bl	80032cc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_SET);
 8001676:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <pulseEnable+0x4c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <pulseEnable+0x50>)
 800167c:	8811      	ldrh	r1, [r2, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fa93 	bl	8004bac <HAL_GPIO_WritePin>
  HAL_Delay(1);    // enable pulse must be >450ns
 8001686:	2001      	movs	r0, #1
 8001688:	f001 fe20 	bl	80032cc <HAL_Delay>
  HAL_GPIO_WritePin(_port, _enable_pin, GPIO_PIN_RESET);
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <pulseEnable+0x4c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a06      	ldr	r2, [pc, #24]	; (80016ac <pulseEnable+0x50>)
 8001692:	8811      	ldrh	r1, [r2, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fa88 	bl	8004bac <HAL_GPIO_WritePin>
  HAL_Delay(1);   // commands need > 37us to settle
 800169c:	2001      	movs	r0, #1
 800169e:	f001 fe15 	bl	80032cc <HAL_Delay>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002f4 	.word	0x200002f4
 80016ac:	2000030e 	.word	0x2000030e

080016b0 <write4bits>:

void write4bits(uint8_t value) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 4; i++) {
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e013      	b.n	80016e8 <write4bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <write4bits+0x4c>)
 80016c2:	6818      	ldr	r0, [r3, #0]
 80016c4:	4a0e      	ldr	r2, [pc, #56]	; (8001700 <write4bits+0x50>)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80016cc:	79fa      	ldrb	r2, [r7, #7]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	fa42 f303 	asr.w	r3, r2, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	f003 fa65 	bl	8004bac <HAL_GPIO_WritePin>
  for (int i = 0; i < 4; i++) {
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	dde8      	ble.n	80016c0 <write4bits+0x10>
  }

  pulseEnable();
 80016ee:	f7ff ffb5 	bl	800165c <pulseEnable>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200002f4 	.word	0x200002f4
 8001700:	200002fc 	.word	0x200002fc

08001704 <write8bits>:

void write8bits(uint8_t value) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  for (int i = 0; i < 8; i++) {
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	e013      	b.n	800173c <write8bits+0x38>
    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <write8bits+0x4c>)
 8001716:	6818      	ldr	r0, [r3, #0]
 8001718:	4a0e      	ldr	r2, [pc, #56]	; (8001754 <write8bits+0x50>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001720:	79fa      	ldrb	r2, [r7, #7]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	fa42 f303 	asr.w	r3, r2, r3
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	f003 fa3b 	bl	8004bac <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b07      	cmp	r3, #7
 8001740:	dde8      	ble.n	8001714 <write8bits+0x10>
  }

  pulseEnable();
 8001742:	f7ff ff8b 	bl	800165c <pulseEnable>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002f4 	.word	0x200002f4
 8001754:	200002fc 	.word	0x200002fc

08001758 <SELECT>:
 * SPI functions
 **************************************/

/* SPI chip select */
static void SELECT(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001762:	4804      	ldr	r0, [pc, #16]	; (8001774 <SELECT+0x1c>)
 8001764:	f003 fa22 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f001 fdaf 	bl	80032cc <HAL_Delay>
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40020800 	.word	0x40020800

08001778 <DESELECT>:

/* SPI chip deselect */
static void DESELECT(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <DESELECT+0x1c>)
 8001784:	f003 fa12 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001788:	2001      	movs	r0, #1
 800178a:	f001 fd9f 	bl	80032cc <HAL_Delay>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40020800 	.word	0x40020800

08001798 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017a2:	bf00      	nop
 80017a4:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <SPI_TxByte+0x30>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d1f8      	bne.n	80017a4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80017b2:	1df9      	adds	r1, r7, #7
 80017b4:	2364      	movs	r3, #100	; 0x64
 80017b6:	2201      	movs	r2, #1
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <SPI_TxByte+0x30>)
 80017ba:	f004 f81c 	bl	80057f6 <HAL_SPI_Transmit>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200018ac 	.word	0x200018ac

080017cc <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80017d8:	bf00      	nop
 80017da:	4b08      	ldr	r3, [pc, #32]	; (80017fc <SPI_TxBuffer+0x30>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d1f8      	bne.n	80017da <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	2364      	movs	r3, #100	; 0x64
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4803      	ldr	r0, [pc, #12]	; (80017fc <SPI_TxBuffer+0x30>)
 80017f0:	f004 f801 	bl	80057f6 <HAL_SPI_Transmit>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200018ac 	.word	0x200018ac

08001800 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800180a:	bf00      	nop
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <SPI_RxByte+0x34>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b02      	cmp	r3, #2
 8001818:	d1f8      	bne.n	800180c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800181a:	1dba      	adds	r2, r7, #6
 800181c:	1df9      	adds	r1, r7, #7
 800181e:	2364      	movs	r3, #100	; 0x64
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	4803      	ldr	r0, [pc, #12]	; (8001834 <SPI_RxByte+0x34>)
 8001826:	f004 f922 	bl	8005a6e <HAL_SPI_TransmitReceive>

	return data;
 800182a:	79bb      	ldrb	r3, [r7, #6]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200018ac 	.word	0x200018ac

08001838 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001840:	f7ff ffde 	bl	8001800 <SPI_RxByte>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	701a      	strb	r2, [r3, #0]
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <SD_ReadyWait+0x30>)
 800185c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001860:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001862:	f7ff ffcd 	bl	8001800 <SPI_RxByte>
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	2bff      	cmp	r3, #255	; 0xff
 800186e:	d004      	beq.n	800187a <SD_ReadyWait+0x26>
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SD_ReadyWait+0x30>)
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29b      	uxth	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f3      	bne.n	8001862 <SD_ReadyWait+0xe>

	return res;
 800187a:	79fb      	ldrb	r3, [r7, #7]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000297c 	.word	0x2000297c

08001888 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800188e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001892:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001894:	f7ff ff70 	bl	8001778 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	e005      	b.n	80018aa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800189e:	20ff      	movs	r0, #255	; 0xff
 80018a0:	f7ff ff7a 	bl	8001798 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	3301      	adds	r3, #1
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b09      	cmp	r3, #9
 80018ae:	ddf6      	ble.n	800189e <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80018b0:	f7ff ff52 	bl	8001758 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 80018c8:	2395      	movs	r3, #149	; 0x95
 80018ca:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 80018cc:	463b      	mov	r3, r7
 80018ce:	2106      	movs	r1, #6
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff7b 	bl	80017cc <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 80018d6:	e002      	b.n	80018de <SD_PowerOn+0x56>
	{
		cnt--;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3b01      	subs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80018de:	f7ff ff8f 	bl	8001800 <SPI_RxByte>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d002      	beq.n	80018ee <SD_PowerOn+0x66>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f4      	bne.n	80018d8 <SD_PowerOn+0x50>
	}

	DESELECT();
 80018ee:	f7ff ff43 	bl	8001778 <DESELECT>
	SPI_TxByte(0XFF);
 80018f2:	20ff      	movs	r0, #255	; 0xff
 80018f4:	f7ff ff50 	bl	8001798 <SPI_TxByte>

	PowerFlag = 1;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <SD_PowerOn+0x80>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000021e 	.word	0x2000021e

0800190c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <SD_PowerOff+0x14>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	2000021e 	.word	0x2000021e

08001924 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <SD_CheckPower+0x14>)
 800192a:	781b      	ldrb	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	2000021e 	.word	0x2000021e

0800193c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <SD_RxDataBlock+0x5c>)
 8001948:	22c8      	movs	r2, #200	; 0xc8
 800194a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 800194c:	f7ff ff58 	bl	8001800 <SPI_RxByte>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	2bff      	cmp	r3, #255	; 0xff
 8001958:	d104      	bne.n	8001964 <SD_RxDataBlock+0x28>
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <SD_RxDataBlock+0x5c>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f3      	bne.n	800194c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	2bfe      	cmp	r3, #254	; 0xfe
 8001968:	d001      	beq.n	800196e <SD_RxDataBlock+0x32>
 800196a:	2300      	movs	r3, #0
 800196c:	e00f      	b.n	800198e <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5f 	bl	8001838 <SPI_RxBytePtr>
	} while(len--);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	603a      	str	r2, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f4      	bne.n	800196e <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001984:	f7ff ff3c 	bl	8001800 <SPI_RxByte>
	SPI_RxByte();
 8001988:	f7ff ff3a 	bl	8001800 <SPI_RxByte>

	return TRUE;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000297d 	.word	0x2000297d

0800199c <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80019ac:	f7ff ff52 	bl	8001854 <SD_ReadyWait>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2bff      	cmp	r3, #255	; 0xff
 80019b4:	d001      	beq.n	80019ba <SD_TxDataBlock+0x1e>
 80019b6:	2300      	movs	r3, #0
 80019b8:	e02f      	b.n	8001a1a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80019ba:	78fb      	ldrb	r3, [r7, #3]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff feeb 	bl	8001798 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	2bfd      	cmp	r3, #253	; 0xfd
 80019c6:	d020      	beq.n	8001a0a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 80019c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fefd 	bl	80017cc <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 80019d2:	f7ff ff15 	bl	8001800 <SPI_RxByte>
		SPI_RxByte();
 80019d6:	f7ff ff13 	bl	8001800 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 80019da:	e00b      	b.n	80019f4 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80019dc:	f7ff ff10 	bl	8001800 <SPI_RxByte>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d006      	beq.n	80019fc <SD_TxDataBlock+0x60>
			i++;
 80019ee:	7bbb      	ldrb	r3, [r7, #14]
 80019f0:	3301      	adds	r3, #1
 80019f2:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80019f4:	7bbb      	ldrb	r3, [r7, #14]
 80019f6:	2b40      	cmp	r3, #64	; 0x40
 80019f8:	d9f0      	bls.n	80019dc <SD_TxDataBlock+0x40>
 80019fa:	e000      	b.n	80019fe <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80019fc:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80019fe:	bf00      	nop
 8001a00:	f7ff fefe 	bl	8001800 <SPI_RxByte>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0fa      	beq.n	8001a00 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d101      	bne.n	8001a18 <SD_TxDataBlock+0x7c>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	6039      	str	r1, [r7, #0]
 8001a2c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001a2e:	f7ff ff11 	bl	8001854 <SD_ReadyWait>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2bff      	cmp	r3, #255	; 0xff
 8001a36:	d001      	beq.n	8001a3c <SD_SendCmd+0x1a>
 8001a38:	23ff      	movs	r3, #255	; 0xff
 8001a3a:	e042      	b.n	8001ac2 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff feaa 	bl	8001798 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	0e1b      	lsrs	r3, r3, #24
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fea4 	bl	8001798 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	0c1b      	lsrs	r3, r3, #16
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fe9e 	bl	8001798 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	0a1b      	lsrs	r3, r3, #8
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fe98 	bl	8001798 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe93 	bl	8001798 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b40      	cmp	r3, #64	; 0x40
 8001a76:	d102      	bne.n	8001a7e <SD_SendCmd+0x5c>
 8001a78:	2395      	movs	r3, #149	; 0x95
 8001a7a:	73fb      	strb	r3, [r7, #15]
 8001a7c:	e007      	b.n	8001a8e <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b48      	cmp	r3, #72	; 0x48
 8001a82:	d102      	bne.n	8001a8a <SD_SendCmd+0x68>
 8001a84:	2387      	movs	r3, #135	; 0x87
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e001      	b.n	8001a8e <SD_SendCmd+0x6c>
	else crc = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fe81 	bl	8001798 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b4c      	cmp	r3, #76	; 0x4c
 8001a9a:	d101      	bne.n	8001aa0 <SD_SendCmd+0x7e>
 8001a9c:	f7ff feb0 	bl	8001800 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001aa4:	f7ff feac 	bl	8001800 <SPI_RxByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001aac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da05      	bge.n	8001ac0 <SD_SendCmd+0x9e>
 8001ab4:	7bbb      	ldrb	r3, [r7, #14]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	73bb      	strb	r3, [r7, #14]
 8001aba:	7bbb      	ldrb	r3, [r7, #14]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f1      	bne.n	8001aa4 <SD_SendCmd+0x82>

	return res;
 8001ac0:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001acc:	b590      	push	{r4, r7, lr}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SD_disk_initialize+0x14>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0d6      	b.n	8001c8e <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001ae0:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <SD_disk_initialize+0x2a>
 8001aee:	4b6a      	ldr	r3, [pc, #424]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	e0cb      	b.n	8001c8e <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001af6:	f7ff fec7 	bl	8001888 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001afa:	f7ff fe2d 	bl	8001758 <SELECT>

	/* check disk type */
	type = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001b02:	2100      	movs	r1, #0
 8001b04:	2040      	movs	r0, #64	; 0x40
 8001b06:	f7ff ff8c 	bl	8001a22 <SD_SendCmd>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	f040 80a6 	bne.w	8001c5e <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001b12:	4b62      	ldr	r3, [pc, #392]	; (8001c9c <SD_disk_initialize+0x1d0>)
 8001b14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b18:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b1a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001b1e:	2048      	movs	r0, #72	; 0x48
 8001b20:	f7ff ff7f 	bl	8001a22 <SD_SendCmd>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d158      	bne.n	8001bdc <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e00c      	b.n	8001b4a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001b30:	7bfc      	ldrb	r4, [r7, #15]
 8001b32:	f7ff fe65 	bl	8001800 <SPI_RxByte>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	f107 0310 	add.w	r3, r7, #16
 8001b3e:	4423      	add	r3, r4
 8001b40:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	3301      	adds	r3, #1
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d9ef      	bls.n	8001b30 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b50:	7abb      	ldrb	r3, [r7, #10]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	f040 8083 	bne.w	8001c5e <SD_disk_initialize+0x192>
 8001b58:	7afb      	ldrb	r3, [r7, #11]
 8001b5a:	2baa      	cmp	r3, #170	; 0xaa
 8001b5c:	d17f      	bne.n	8001c5e <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2077      	movs	r0, #119	; 0x77
 8001b62:	f7ff ff5e 	bl	8001a22 <SD_SendCmd>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d807      	bhi.n	8001b7c <SD_disk_initialize+0xb0>
 8001b6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b70:	2069      	movs	r0, #105	; 0x69
 8001b72:	f7ff ff56 	bl	8001a22 <SD_SendCmd>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <SD_disk_initialize+0x1d0>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1eb      	bne.n	8001b5e <SD_disk_initialize+0x92>
 8001b86:	e000      	b.n	8001b8a <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001b88:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <SD_disk_initialize+0x1d0>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d064      	beq.n	8001c5e <SD_disk_initialize+0x192>
 8001b94:	2100      	movs	r1, #0
 8001b96:	207a      	movs	r0, #122	; 0x7a
 8001b98:	f7ff ff43 	bl	8001a22 <SD_SendCmd>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d15d      	bne.n	8001c5e <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e00c      	b.n	8001bc2 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001ba8:	7bfc      	ldrb	r4, [r7, #15]
 8001baa:	f7ff fe29 	bl	8001800 <SPI_RxByte>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	4423      	add	r3, r4
 8001bb8:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d9ef      	bls.n	8001ba8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001bc8:	7a3b      	ldrb	r3, [r7, #8]
 8001bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <SD_disk_initialize+0x10a>
 8001bd2:	230c      	movs	r3, #12
 8001bd4:	e000      	b.n	8001bd8 <SD_disk_initialize+0x10c>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	73bb      	strb	r3, [r7, #14]
 8001bda:	e040      	b.n	8001c5e <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2077      	movs	r0, #119	; 0x77
 8001be0:	f7ff ff1f 	bl	8001a22 <SD_SendCmd>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d808      	bhi.n	8001bfc <SD_disk_initialize+0x130>
 8001bea:	2100      	movs	r1, #0
 8001bec:	2069      	movs	r0, #105	; 0x69
 8001bee:	f7ff ff18 	bl	8001a22 <SD_SendCmd>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d801      	bhi.n	8001bfc <SD_disk_initialize+0x130>
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	e000      	b.n	8001bfe <SD_disk_initialize+0x132>
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d10e      	bne.n	8001c24 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001c06:	2100      	movs	r1, #0
 8001c08:	2077      	movs	r0, #119	; 0x77
 8001c0a:	f7ff ff0a 	bl	8001a22 <SD_SendCmd>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d80e      	bhi.n	8001c32 <SD_disk_initialize+0x166>
 8001c14:	2100      	movs	r1, #0
 8001c16:	2069      	movs	r0, #105	; 0x69
 8001c18:	f7ff ff03 	bl	8001a22 <SD_SendCmd>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d107      	bne.n	8001c32 <SD_disk_initialize+0x166>
 8001c22:	e00d      	b.n	8001c40 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c24:	2100      	movs	r1, #0
 8001c26:	2041      	movs	r0, #65	; 0x41
 8001c28:	f7ff fefb 	bl	8001a22 <SD_SendCmd>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <SD_disk_initialize+0x1d0>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e1      	bne.n	8001c00 <SD_disk_initialize+0x134>
 8001c3c:	e000      	b.n	8001c40 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001c3e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <SD_disk_initialize+0x1d0>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <SD_disk_initialize+0x18e>
 8001c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c4e:	2050      	movs	r0, #80	; 0x50
 8001c50:	f7ff fee7 	bl	8001a22 <SD_SendCmd>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <SD_disk_initialize+0x192>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001c5e:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <SD_disk_initialize+0x1d4>)
 8001c60:	7bbb      	ldrb	r3, [r7, #14]
 8001c62:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001c64:	f7ff fd88 	bl	8001778 <DESELECT>
	SPI_RxByte();
 8001c68:	f7ff fdca 	bl	8001800 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001c6c:	7bbb      	ldrb	r3, [r7, #14]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f023 0301 	bic.w	r3, r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e001      	b.n	8001c88 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001c84:	f7ff fe42 	bl	800190c <SD_PowerOff>
	}

	return Stat;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <SD_disk_initialize+0x1cc>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000001 	.word	0x20000001
 8001c9c:	2000297d 	.word	0x2000297d
 8001ca0:	2000021d 	.word	0x2000021d

08001ca4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <SD_disk_status+0x14>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e002      	b.n	8001cbe <SD_disk_status+0x1a>
	return Stat;
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <SD_disk_status+0x28>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2db      	uxtb	r3, r3
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000001 	.word	0x20000001

08001cd0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <SD_disk_read+0x1c>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <SD_disk_read+0x20>
 8001cec:	2304      	movs	r3, #4
 8001cee:	e051      	b.n	8001d94 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001cf0:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <SD_disk_read+0xcc>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SD_disk_read+0x32>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e048      	b.n	8001d94 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001d02:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <SD_disk_read+0xd0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <SD_disk_read+0x44>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	025b      	lsls	r3, r3, #9
 8001d12:	607b      	str	r3, [r7, #4]

	SELECT();
 8001d14:	f7ff fd20 	bl	8001758 <SELECT>

	if (count == 1)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d111      	bne.n	8001d42 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	2051      	movs	r0, #81	; 0x51
 8001d22:	f7ff fe7e 	bl	8001a22 <SD_SendCmd>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d129      	bne.n	8001d80 <SD_disk_read+0xb0>
 8001d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d30:	68b8      	ldr	r0, [r7, #8]
 8001d32:	f7ff fe03 	bl	800193c <SD_RxDataBlock>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d021      	beq.n	8001d80 <SD_disk_read+0xb0>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
 8001d40:	e01e      	b.n	8001d80 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	2052      	movs	r0, #82	; 0x52
 8001d46:	f7ff fe6c 	bl	8001a22 <SD_SendCmd>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d117      	bne.n	8001d80 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fdf1 	bl	800193c <SD_RxDataBlock>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <SD_disk_read+0xa6>
				buff += 512;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d66:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ed      	bne.n	8001d50 <SD_disk_read+0x80>
 8001d74:	e000      	b.n	8001d78 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001d76:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	204c      	movs	r0, #76	; 0x4c
 8001d7c:	f7ff fe51 	bl	8001a22 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001d80:	f7ff fcfa 	bl	8001778 <DESELECT>
	SPI_RxByte();
 8001d84:	f7ff fd3c 	bl	8001800 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	bf14      	ite	ne
 8001d8e:	2301      	movne	r3, #1
 8001d90:	2300      	moveq	r3, #0
 8001d92:	b2db      	uxtb	r3, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000001 	.word	0x20000001
 8001da0:	2000021d 	.word	0x2000021d

08001da4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d102      	bne.n	8001dc0 <SD_disk_write+0x1c>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <SD_disk_write+0x20>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e06b      	b.n	8001e9c <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001dc4:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <SD_disk_write+0x100>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SD_disk_write+0x32>
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e062      	b.n	8001e9c <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001dd6:	4b33      	ldr	r3, [pc, #204]	; (8001ea4 <SD_disk_write+0x100>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SD_disk_write+0x44>
 8001de4:	2302      	movs	r3, #2
 8001de6:	e059      	b.n	8001e9c <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <SD_disk_write+0x104>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <SD_disk_write+0x56>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	025b      	lsls	r3, r3, #9
 8001df8:	607b      	str	r3, [r7, #4]

	SELECT();
 8001dfa:	f7ff fcad 	bl	8001758 <SELECT>

	if (count == 1)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d110      	bne.n	8001e26 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	2058      	movs	r0, #88	; 0x58
 8001e08:	f7ff fe0b 	bl	8001a22 <SD_SendCmd>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d13a      	bne.n	8001e88 <SD_disk_write+0xe4>
 8001e12:	21fe      	movs	r1, #254	; 0xfe
 8001e14:	68b8      	ldr	r0, [r7, #8]
 8001e16:	f7ff fdc1 	bl	800199c <SD_TxDataBlock>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d033      	beq.n	8001e88 <SD_disk_write+0xe4>
			count = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	e030      	b.n	8001e88 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <SD_disk_write+0x104>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001e32:	2100      	movs	r1, #0
 8001e34:	2077      	movs	r0, #119	; 0x77
 8001e36:	f7ff fdf4 	bl	8001a22 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e3a:	6839      	ldr	r1, [r7, #0]
 8001e3c:	2057      	movs	r0, #87	; 0x57
 8001e3e:	f7ff fdf0 	bl	8001a22 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	2059      	movs	r0, #89	; 0x59
 8001e46:	f7ff fdec 	bl	8001a22 <SD_SendCmd>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d11b      	bne.n	8001e88 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e50:	21fc      	movs	r1, #252	; 0xfc
 8001e52:	68b8      	ldr	r0, [r7, #8]
 8001e54:	f7ff fda2 	bl	800199c <SD_TxDataBlock>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00a      	beq.n	8001e74 <SD_disk_write+0xd0>
				buff += 512;
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001e64:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1ee      	bne.n	8001e50 <SD_disk_write+0xac>
 8001e72:	e000      	b.n	8001e76 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001e74:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001e76:	21fd      	movs	r1, #253	; 0xfd
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fd8f 	bl	800199c <SD_TxDataBlock>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <SD_disk_write+0xe4>
			{
				count = 1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001e88:	f7ff fc76 	bl	8001778 <DESELECT>
	SPI_RxByte();
 8001e8c:	f7ff fcb8 	bl	8001800 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000001 	.word	0x20000001
 8001ea8:	2000021d 	.word	0x2000021d

08001eac <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b08b      	sub	sp, #44	; 0x2c
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	603a      	str	r2, [r7, #0]
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <SD_disk_ioctl+0x1e>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e115      	b.n	80020f6 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001ed0:	79bb      	ldrb	r3, [r7, #6]
 8001ed2:	2b05      	cmp	r3, #5
 8001ed4:	d124      	bne.n	8001f20 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d012      	beq.n	8001f04 <SD_disk_ioctl+0x58>
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	dc1a      	bgt.n	8001f18 <SD_disk_ioctl+0x6c>
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <SD_disk_ioctl+0x40>
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d006      	beq.n	8001ef8 <SD_disk_ioctl+0x4c>
 8001eea:	e015      	b.n	8001f18 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001eec:	f7ff fd0e 	bl	800190c <SD_PowerOff>
			res = RES_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ef6:	e0fc      	b.n	80020f2 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001ef8:	f7ff fcc6 	bl	8001888 <SD_PowerOn>
			res = RES_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f02:	e0f6      	b.n	80020f2 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	1c5c      	adds	r4, r3, #1
 8001f08:	f7ff fd0c 	bl	8001924 <SD_CheckPower>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001f10:	2300      	movs	r3, #0
 8001f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f16:	e0ec      	b.n	80020f2 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f1e:	e0e8      	b.n	80020f2 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f20:	4b77      	ldr	r3, [pc, #476]	; (8002100 <SD_disk_ioctl+0x254>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <SD_disk_ioctl+0x86>
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e0e1      	b.n	80020f6 <SD_disk_ioctl+0x24a>

		SELECT();
 8001f32:	f7ff fc11 	bl	8001758 <SELECT>

		switch (ctrl)
 8001f36:	79bb      	ldrb	r3, [r7, #6]
 8001f38:	2b0d      	cmp	r3, #13
 8001f3a:	f200 80cb 	bhi.w	80020d4 <SD_disk_ioctl+0x228>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <SD_disk_ioctl+0x98>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	0800203f 	.word	0x0800203f
 8001f48:	08001f7d 	.word	0x08001f7d
 8001f4c:	0800202f 	.word	0x0800202f
 8001f50:	080020d5 	.word	0x080020d5
 8001f54:	080020d5 	.word	0x080020d5
 8001f58:	080020d5 	.word	0x080020d5
 8001f5c:	080020d5 	.word	0x080020d5
 8001f60:	080020d5 	.word	0x080020d5
 8001f64:	080020d5 	.word	0x080020d5
 8001f68:	080020d5 	.word	0x080020d5
 8001f6c:	080020d5 	.word	0x080020d5
 8001f70:	08002051 	.word	0x08002051
 8001f74:	08002075 	.word	0x08002075
 8001f78:	08002099 	.word	0x08002099
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2049      	movs	r0, #73	; 0x49
 8001f80:	f7ff fd4f 	bl	8001a22 <SD_SendCmd>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80a8 	bne.w	80020dc <SD_disk_ioctl+0x230>
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2110      	movs	r1, #16
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fcd2 	bl	800193c <SD_RxDataBlock>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 809e 	beq.w	80020dc <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001fa0:	7b3b      	ldrb	r3, [r7, #12]
 8001fa2:	099b      	lsrs	r3, r3, #6
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d10e      	bne.n	8001fc8 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001faa:	7d7b      	ldrb	r3, [r7, #21]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	7d3b      	ldrb	r3, [r7, #20]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001fbe:	8bfb      	ldrh	r3, [r7, #30]
 8001fc0:	029a      	lsls	r2, r3, #10
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e02e      	b.n	8002026 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fc8:	7c7b      	ldrb	r3, [r7, #17]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	7dbb      	ldrb	r3, [r7, #22]
 8001fd2:	09db      	lsrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	7d7b      	ldrb	r3, [r7, #21]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f003 0306 	and.w	r3, r3, #6
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	3302      	adds	r3, #2
 8001fec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001ff0:	7d3b      	ldrb	r3, [r7, #20]
 8001ff2:	099b      	lsrs	r3, r3, #6
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	4413      	add	r3, r2
 8002002:	b29a      	uxth	r2, r3
 8002004:	7cbb      	ldrb	r3, [r7, #18]
 8002006:	029b      	lsls	r3, r3, #10
 8002008:	b29b      	uxth	r3, r3
 800200a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800200e:	b29b      	uxth	r3, r3
 8002010:	4413      	add	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	3301      	adds	r3, #1
 8002016:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002018:	8bfa      	ldrh	r2, [r7, #30]
 800201a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800201e:	3b09      	subs	r3, #9
 8002020:	409a      	lsls	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 800202c:	e056      	b.n	80020dc <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002034:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800203c:	e055      	b.n	80020ea <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800203e:	f7ff fc09 	bl	8001854 <SD_ReadyWait>
 8002042:	4603      	mov	r3, r0
 8002044:	2bff      	cmp	r3, #255	; 0xff
 8002046:	d14b      	bne.n	80020e0 <SD_disk_ioctl+0x234>
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800204e:	e047      	b.n	80020e0 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002050:	2100      	movs	r1, #0
 8002052:	2049      	movs	r0, #73	; 0x49
 8002054:	f7ff fce5 	bl	8001a22 <SD_SendCmd>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d142      	bne.n	80020e4 <SD_disk_ioctl+0x238>
 800205e:	2110      	movs	r1, #16
 8002060:	6a38      	ldr	r0, [r7, #32]
 8002062:	f7ff fc6b 	bl	800193c <SD_RxDataBlock>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d03b      	beq.n	80020e4 <SD_disk_ioctl+0x238>
 800206c:	2300      	movs	r3, #0
 800206e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002072:	e037      	b.n	80020e4 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8002074:	2100      	movs	r1, #0
 8002076:	204a      	movs	r0, #74	; 0x4a
 8002078:	f7ff fcd3 	bl	8001a22 <SD_SendCmd>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d132      	bne.n	80020e8 <SD_disk_ioctl+0x23c>
 8002082:	2110      	movs	r1, #16
 8002084:	6a38      	ldr	r0, [r7, #32]
 8002086:	f7ff fc59 	bl	800193c <SD_RxDataBlock>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02b      	beq.n	80020e8 <SD_disk_ioctl+0x23c>
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002096:	e027      	b.n	80020e8 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002098:	2100      	movs	r1, #0
 800209a:	207a      	movs	r0, #122	; 0x7a
 800209c:	f7ff fcc1 	bl	8001a22 <SD_SendCmd>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020ac:	e00b      	b.n	80020c6 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80020ae:	6a3c      	ldr	r4, [r7, #32]
 80020b0:	1c63      	adds	r3, r4, #1
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	f7ff fba4 	bl	8001800 <SPI_RxByte>
 80020b8:	4603      	mov	r3, r0
 80020ba:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80020bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020c0:	3301      	adds	r3, #1
 80020c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80020c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d9ef      	bls.n	80020ae <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 80020d4:	2304      	movs	r3, #4
 80020d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80020da:	e006      	b.n	80020ea <SD_disk_ioctl+0x23e>
			break;
 80020dc:	bf00      	nop
 80020de:	e004      	b.n	80020ea <SD_disk_ioctl+0x23e>
			break;
 80020e0:	bf00      	nop
 80020e2:	e002      	b.n	80020ea <SD_disk_ioctl+0x23e>
			break;
 80020e4:	bf00      	nop
 80020e6:	e000      	b.n	80020ea <SD_disk_ioctl+0x23e>
			break;
 80020e8:	bf00      	nop
		}

		DESELECT();
 80020ea:	f7ff fb45 	bl	8001778 <DESELECT>
		SPI_RxByte();
 80020ee:	f7ff fb87 	bl	8001800 <SPI_RxByte>
	}

	return res;
 80020f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	372c      	adds	r7, #44	; 0x2c
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd90      	pop	{r4, r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000001 	.word	0x20000001

08002104 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800210c:	2100      	movs	r1, #0
 800210e:	4815      	ldr	r0, [pc, #84]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002110:	f001 ff13 	bl	8003f3a <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, values[i]);
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	4b14      	ldr	r3, [pc, #80]	; (800216c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800211c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002120:	2200      	movs	r2, #0
 8002122:	2100      	movs	r1, #0
 8002124:	480f      	ldr	r0, [pc, #60]	; (8002164 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002126:	f001 ffb4 	bl	8004092 <HAL_DAC_SetValue>
	i++;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002134:	801a      	strh	r2, [r3, #0]
	if(i>=2)
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d90e      	bls.n	800215c <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		i = 0;
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8002144:	480a      	ldr	r0, [pc, #40]	; (8002170 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002146:	f001 f929 	bl	800339c <HAL_ADC_Start>
		adcVal = value_adc[0];
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	ee07 3a90 	vmov	s15, r3
 8002152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002158:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	200013b4 	.word	0x200013b4
 8002168:	20000220 	.word	0x20000220
 800216c:	20000004 	.word	0x20000004
 8002170:	20001368 	.word	0x20001368
 8002174:	200017c8 	.word	0x200017c8
 8002178:	20000288 	.word	0x20000288

0800217c <bufsize>:
	HAL_UART_Transmit(&huart2, (uint8_t *)string, len, 2000); // transmit in blocking mode
}

/* to find the size of data in the buffer */
int bufsize(char *buf)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
	int i = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8002188:	e002      	b.n	8002190 <bufsize+0x14>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f6      	bne.n	800218a <bufsize+0xe>
	return i;
 800219c:	68fb      	ldr	r3, [r7, #12]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <bufclear>:

/* clear buffer */
void bufclear(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 1024; i++)
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
 80021b6:	e007      	b.n	80021c8 <bufclear+0x1c>
	{
		buffer[i] = '\0';
 80021b8:	4a09      	ldr	r2, [pc, #36]	; (80021e0 <bufclear+0x34>)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3301      	adds	r3, #1
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	dbf3      	blt.n	80021b8 <bufclear+0xc>
	}
}
 80021d0:	bf00      	nop
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200013c8 	.word	0x200013c8
 80021e4:	00000000 	.word	0x00000000

080021e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021ee:	f000 fffb 	bl	80031e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021f2:	f000 fa29 	bl	8002648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021f6:	f000 fbc5 	bl	8002984 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021fa:	f000 fb79 	bl	80028f0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80021fe:	f004 fbd9 	bl	80069b4 <MX_FATFS_Init>
  MX_SPI1_Init();
 8002202:	f000 fb09 	bl	8002818 <MX_SPI1_Init>
  MX_DAC_Init();
 8002206:	f000 fadd 	bl	80027c4 <MX_DAC_Init>
  MX_DMA_Init();
 800220a:	f000 fb9b 	bl	8002944 <MX_DMA_Init>
  MX_ADC1_Init();
 800220e:	f000 fa87 	bl	8002720 <MX_ADC1_Init>
  MX_TIM6_Init();
 8002212:	f000 fb37 	bl	8002884 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);
 8002216:	4849      	ldr	r0, [pc, #292]	; (800233c <main+0x154>)
 8002218:	f003 fee6 	bl	8005fe8 <HAL_TIM_Base_Start_IT>

	/* Mount SD Card */
	fresult = f_mount(&fs, "", 0);
 800221c:	2200      	movs	r2, #0
 800221e:	4948      	ldr	r1, [pc, #288]	; (8002340 <main+0x158>)
 8002220:	4848      	ldr	r0, [pc, #288]	; (8002344 <main+0x15c>)
 8002222:	f006 fa95 	bl	8008750 <f_mount>
 8002226:	4603      	mov	r3, r0
 8002228:	461a      	mov	r2, r3
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <main+0x160>)
 800222c:	701a      	strb	r2, [r3, #0]


	/************* The following operation is using f_write and f_read *************/

	/* Create second file with read write access and open it */
	fresult = f_open(&fil, "Results.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800222e:	2213      	movs	r2, #19
 8002230:	4946      	ldr	r1, [pc, #280]	; (800234c <main+0x164>)
 8002232:	4847      	ldr	r0, [pc, #284]	; (8002350 <main+0x168>)
 8002234:	f006 fad2 	bl	80087dc <f_open>
 8002238:	4603      	mov	r3, r0
 800223a:	461a      	mov	r2, r3
 800223c:	4b42      	ldr	r3, [pc, #264]	; (8002348 <main+0x160>)
 800223e:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	strcpy(buffer, "Measurement, Voltage, Resistance \n");
 8002240:	4b44      	ldr	r3, [pc, #272]	; (8002354 <main+0x16c>)
 8002242:	4a45      	ldr	r2, [pc, #276]	; (8002358 <main+0x170>)
 8002244:	4614      	mov	r4, r2
 8002246:	469c      	mov	ip, r3
 8002248:	f104 0e20 	add.w	lr, r4, #32
 800224c:	4665      	mov	r5, ip
 800224e:	4626      	mov	r6, r4
 8002250:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002252:	6028      	str	r0, [r5, #0]
 8002254:	6069      	str	r1, [r5, #4]
 8002256:	60aa      	str	r2, [r5, #8]
 8002258:	60eb      	str	r3, [r5, #12]
 800225a:	3410      	adds	r4, #16
 800225c:	f10c 0c10 	add.w	ip, ip, #16
 8002260:	4574      	cmp	r4, lr
 8002262:	d1f3      	bne.n	800224c <main+0x64>
 8002264:	4663      	mov	r3, ip
 8002266:	4622      	mov	r2, r4
 8002268:	8811      	ldrh	r1, [r2, #0]
 800226a:	7892      	ldrb	r2, [r2, #2]
 800226c:	8019      	strh	r1, [r3, #0]
 800226e:	709a      	strb	r2, [r3, #2]

	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 8002270:	4838      	ldr	r0, [pc, #224]	; (8002354 <main+0x16c>)
 8002272:	f7ff ff83 	bl	800217c <bufsize>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	4b38      	ldr	r3, [pc, #224]	; (800235c <main+0x174>)
 800227c:	4935      	ldr	r1, [pc, #212]	; (8002354 <main+0x16c>)
 800227e:	4834      	ldr	r0, [pc, #208]	; (8002350 <main+0x168>)
 8002280:	f006 fdd7 	bl	8008e32 <f_write>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <main+0x160>)
 800228a:	701a      	strb	r2, [r3, #0]
	//bw is the pointer to the counter for the number of bytes written
	//send_uart("Results.txt created and data is written\n");
	/* Close file */
	f_close(&fil);
 800228c:	4830      	ldr	r0, [pc, #192]	; (8002350 <main+0x168>)
 800228e:	f006 ffe2 	bl	8009256 <f_close>
	// clearing buffer to show that result obtained is from the file
	bufclear();
 8002292:	f7ff ff8b 	bl	80021ac <bufclear>
	/* Open second file to read */
	fresult = f_open(&fil, "Results.txt", FA_READ);
 8002296:	2201      	movs	r2, #1
 8002298:	492c      	ldr	r1, [pc, #176]	; (800234c <main+0x164>)
 800229a:	482d      	ldr	r0, [pc, #180]	; (8002350 <main+0x168>)
 800229c:	f006 fa9e 	bl	80087dc <f_open>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4b28      	ldr	r3, [pc, #160]	; (8002348 <main+0x160>)
 80022a6:	701a      	strb	r2, [r3, #0]
	/* Read file info so we can get the file size */
	fresult = f_stat("Results.txt", &filinfo);
 80022a8:	492d      	ldr	r1, [pc, #180]	; (8002360 <main+0x178>)
 80022aa:	4828      	ldr	r0, [pc, #160]	; (800234c <main+0x164>)
 80022ac:	f007 fa21 	bl	80096f2 <f_stat>
 80022b0:	4603      	mov	r3, r0
 80022b2:	461a      	mov	r2, r3
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <main+0x160>)
 80022b6:	701a      	strb	r2, [r3, #0]
	f_read (&fil, buffer, filinfo.fsize, &br);
 80022b8:	4b29      	ldr	r3, [pc, #164]	; (8002360 <main+0x178>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b29      	ldr	r3, [pc, #164]	; (8002364 <main+0x17c>)
 80022be:	4925      	ldr	r1, [pc, #148]	; (8002354 <main+0x16c>)
 80022c0:	4823      	ldr	r0, [pc, #140]	; (8002350 <main+0x168>)
 80022c2:	f006 fc57 	bl	8008b74 <f_read>
	//br is the pointer to the count variable for the number of bytes to read from the file
	//send_uart(buffer);
	/* Close file */
	f_close(&fil);
 80022c6:	4822      	ldr	r0, [pc, #136]	; (8002350 <main+0x168>)
 80022c8:	f006 ffc5 	bl	8009256 <f_close>
	bufclear();
 80022cc:	f7ff ff6e 	bl	80021ac <bufclear>

	// initialize the library by associating any needed LCD interface pin
	LiquidCrystal(GPIOB, GPIO_PIN_12, GPIO_PIN_2, GPIO_PIN_1, GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_3);
 80022d0:	2308      	movs	r3, #8
 80022d2:	9303      	str	r3, [sp, #12]
 80022d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022d8:	9302      	str	r3, [sp, #8]
 80022da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2302      	movs	r3, #2
 80022e8:	2204      	movs	r2, #4
 80022ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ee:	481e      	ldr	r0, [pc, #120]	; (8002368 <main+0x180>)
 80022f0:	f7fe fe46 	bl	8000f80 <LiquidCrystal>

	// create a new character
	createChar(0, ohm);
 80022f4:	491d      	ldr	r1, [pc, #116]	; (800236c <main+0x184>)
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff f92b 	bl	8001552 <createChar>

	setCursor(0, 0);
 80022fc:	2100      	movs	r1, #0
 80022fe:	2000      	movs	r0, #0
 8002300:	f7ff f8b4 	bl	800146c <setCursor>
	print("POWER ON");
 8002304:	481a      	ldr	r0, [pc, #104]	; (8002370 <main+0x188>)
 8002306:	f7ff f8f9 	bl	80014fc <print>
	HAL_Delay(5000);
 800230a:	f241 3088 	movw	r0, #5000	; 0x1388
 800230e:	f000 ffdd 	bl	80032cc <HAL_Delay>
	setCursor(0, 0);
 8002312:	2100      	movs	r1, #0
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff f8a9 	bl	800146c <setCursor>
	print("PRESS TO");
 800231a:	4816      	ldr	r0, [pc, #88]	; (8002374 <main+0x18c>)
 800231c:	f7ff f8ee 	bl	80014fc <print>
	setCursor(0, 1);
 8002320:	2101      	movs	r1, #1
 8002322:	2000      	movs	r0, #0
 8002324:	f7ff f8a2 	bl	800146c <setCursor>
	print(" START  ");
 8002328:	4813      	ldr	r0, [pc, #76]	; (8002378 <main+0x190>)
 800232a:	f7ff f8e7 	bl	80014fc <print>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&value_adc, 20);
 800232e:	2214      	movs	r2, #20
 8002330:	4912      	ldr	r1, [pc, #72]	; (800237c <main+0x194>)
 8002332:	4813      	ldr	r0, [pc, #76]	; (8002380 <main+0x198>)
 8002334:	f001 f904 	bl	8003540 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		while(counter >= 1)
 8002338:	e141      	b.n	80025be <main+0x3d6>
 800233a:	bf00      	nop
 800233c:	20001858 	.word	0x20001858
 8002340:	0800c718 	.word	0x0800c718
 8002344:	20000330 	.word	0x20000330
 8002348:	200018a8 	.word	0x200018a8
 800234c:	0800c71c 	.word	0x0800c71c
 8002350:	2000194c 	.word	0x2000194c
 8002354:	200013c8 	.word	0x200013c8
 8002358:	0800c728 	.word	0x0800c728
 800235c:	200018a0 	.word	0x200018a0
 8002360:	20000318 	.word	0x20000318
 8002364:	20001364 	.word	0x20001364
 8002368:	40020400 	.word	0x40020400
 800236c:	20000008 	.word	0x20000008
 8002370:	0800c74c 	.word	0x0800c74c
 8002374:	0800c758 	.word	0x0800c758
 8002378:	0800c764 	.word	0x0800c764
 800237c:	200017c8 	.word	0x200017c8
 8002380:	20001368 	.word	0x20001368
		{

			voltage = adcVal * 3.3 / 4095;
 8002384:	4b98      	ldr	r3, [pc, #608]	; (80025e8 <main+0x400>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f8fd 	bl	8000588 <__aeabi_f2d>
 800238e:	a390      	add	r3, pc, #576	; (adr r3, 80025d0 <main+0x3e8>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	f7fe f950 	bl	8000638 <__aeabi_dmul>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	a38d      	add	r3, pc, #564	; (adr r3, 80025d8 <main+0x3f0>)
 80023a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a6:	f7fe fa71 	bl	800088c <__aeabi_ddiv>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f7fe fc19 	bl	8000be8 <__aeabi_d2f>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4a8c      	ldr	r2, [pc, #560]	; (80025ec <main+0x404>)
 80023ba:	6013      	str	r3, [r2, #0]
			resistance = (voltage / 0.00001) / 30.5; //gain van +-30.5
 80023bc:	4b8b      	ldr	r3, [pc, #556]	; (80025ec <main+0x404>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe f8e1 	bl	8000588 <__aeabi_f2d>
 80023c6:	a386      	add	r3, pc, #536	; (adr r3, 80025e0 <main+0x3f8>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe fa5e 	bl	800088c <__aeabi_ddiv>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4610      	mov	r0, r2
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b84      	ldr	r3, [pc, #528]	; (80025f0 <main+0x408>)
 80023de:	f7fe fa55 	bl	800088c <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	f7fe fbfd 	bl	8000be8 <__aeabi_d2f>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a80      	ldr	r2, [pc, #512]	; (80025f4 <main+0x40c>)
 80023f2:	6013      	str	r3, [r2, #0]

			if(button_state == 1)
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <main+0x410>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d11c      	bne.n	8002436 <main+0x24e>
			{
				// set the cursor to column 0, line 0
				setCursor(0, 0);
 80023fc:	2100      	movs	r1, #0
 80023fe:	2000      	movs	r0, #0
 8002400:	f7ff f834 	bl	800146c <setCursor>
				sprintf(str, "%.0f     ", resistance);
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <main+0x40c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f8bd 	bl	8000588 <__aeabi_f2d>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	1d38      	adds	r0, r7, #4
 8002414:	4979      	ldr	r1, [pc, #484]	; (80025fc <main+0x414>)
 8002416:	f007 ff39 	bl	800a28c <siprintf>
				print(str);
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f86d 	bl	80014fc <print>
				setCursor(0, 1);
 8002422:	2101      	movs	r1, #1
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff f821 	bl	800146c <setCursor>
				write((0));
 800242a:	2000      	movs	r0, #0
 800242c:	f7ff f8c8 	bl	80015c0 <write>
				print("      ");
 8002430:	4873      	ldr	r0, [pc, #460]	; (8002600 <main+0x418>)
 8002432:	f7ff f863 	bl	80014fc <print>
			}

			if(button_state == 2)
 8002436:	4b70      	ldr	r3, [pc, #448]	; (80025f8 <main+0x410>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	f040 80bf 	bne.w	80025be <main+0x3d6>
			{
				storedVal = resistance;
 8002440:	4b6c      	ldr	r3, [pc, #432]	; (80025f4 <main+0x40c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <main+0x41c>)
 8002446:	6013      	str	r3, [r2, #0]
				setCursor(0, 0);
 8002448:	2100      	movs	r1, #0
 800244a:	2000      	movs	r0, #0
 800244c:	f7ff f80e 	bl	800146c <setCursor>
				sprintf(str, "%lu:", measurement);
 8002450:	4b6d      	ldr	r3, [pc, #436]	; (8002608 <main+0x420>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	496d      	ldr	r1, [pc, #436]	; (800260c <main+0x424>)
 8002458:	4618      	mov	r0, r3
 800245a:	f007 ff17 	bl	800a28c <siprintf>
				print(str);
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff f84b 	bl	80014fc <print>
				sprintf(str, "%.0f", storedVal);
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <main+0x41c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe f88c 	bl	8000588 <__aeabi_f2d>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	1d38      	adds	r0, r7, #4
 8002476:	4966      	ldr	r1, [pc, #408]	; (8002610 <main+0x428>)
 8002478:	f007 ff08 	bl	800a28c <siprintf>
				print(str);
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff f83c 	bl	80014fc <print>
				setCursor(0, 1);
 8002484:	2101      	movs	r1, #1
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fff0 	bl	800146c <setCursor>
				write((0));
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff f897 	bl	80015c0 <write>

				/************* Updating an existing file *************/

				dataStr[0] = 0;
 8002492:	4b60      	ldr	r3, [pc, #384]	; (8002614 <main+0x42c>)
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]

				sprintf(data, "%lu", measurement);
 8002498:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <main+0x420>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	495e      	ldr	r1, [pc, #376]	; (8002618 <main+0x430>)
 80024a0:	485e      	ldr	r0, [pc, #376]	; (800261c <main+0x434>)
 80024a2:	f007 fef3 	bl	800a28c <siprintf>
				strcat(dataStr, data);
 80024a6:	495d      	ldr	r1, [pc, #372]	; (800261c <main+0x434>)
 80024a8:	485a      	ldr	r0, [pc, #360]	; (8002614 <main+0x42c>)
 80024aa:	f007 ff0f 	bl	800a2cc <strcat>
				strcat(dataStr, ", ");
 80024ae:	4859      	ldr	r0, [pc, #356]	; (8002614 <main+0x42c>)
 80024b0:	f7fd feae 	bl	8000210 <strlen>
 80024b4:	4603      	mov	r3, r0
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b56      	ldr	r3, [pc, #344]	; (8002614 <main+0x42c>)
 80024ba:	4413      	add	r3, r2
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <main+0x438>)
 80024be:	8811      	ldrh	r1, [r2, #0]
 80024c0:	7892      	ldrb	r2, [r2, #2]
 80024c2:	8019      	strh	r1, [r3, #0]
 80024c4:	709a      	strb	r2, [r3, #2]

				sprintf(data, "%0.3f", voltage);
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <main+0x404>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fe f85c 	bl	8000588 <__aeabi_f2d>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4953      	ldr	r1, [pc, #332]	; (8002624 <main+0x43c>)
 80024d6:	4851      	ldr	r0, [pc, #324]	; (800261c <main+0x434>)
 80024d8:	f007 fed8 	bl	800a28c <siprintf>
				strcat(dataStr, data);
 80024dc:	494f      	ldr	r1, [pc, #316]	; (800261c <main+0x434>)
 80024de:	484d      	ldr	r0, [pc, #308]	; (8002614 <main+0x42c>)
 80024e0:	f007 fef4 	bl	800a2cc <strcat>
				strcat(dataStr, ", ");
 80024e4:	484b      	ldr	r0, [pc, #300]	; (8002614 <main+0x42c>)
 80024e6:	f7fd fe93 	bl	8000210 <strlen>
 80024ea:	4603      	mov	r3, r0
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b49      	ldr	r3, [pc, #292]	; (8002614 <main+0x42c>)
 80024f0:	4413      	add	r3, r2
 80024f2:	4a4b      	ldr	r2, [pc, #300]	; (8002620 <main+0x438>)
 80024f4:	8811      	ldrh	r1, [r2, #0]
 80024f6:	7892      	ldrb	r2, [r2, #2]
 80024f8:	8019      	strh	r1, [r3, #0]
 80024fa:	709a      	strb	r2, [r3, #2]

				sprintf(data, "%0.3f", resistance);
 80024fc:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <main+0x40c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f841 	bl	8000588 <__aeabi_f2d>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4946      	ldr	r1, [pc, #280]	; (8002624 <main+0x43c>)
 800250c:	4843      	ldr	r0, [pc, #268]	; (800261c <main+0x434>)
 800250e:	f007 febd 	bl	800a28c <siprintf>
				strcat(dataStr, data);
 8002512:	4942      	ldr	r1, [pc, #264]	; (800261c <main+0x434>)
 8002514:	483f      	ldr	r0, [pc, #252]	; (8002614 <main+0x42c>)
 8002516:	f007 fed9 	bl	800a2cc <strcat>
				strcat(dataStr, "\n");
 800251a:	483e      	ldr	r0, [pc, #248]	; (8002614 <main+0x42c>)
 800251c:	f7fd fe78 	bl	8000210 <strlen>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <main+0x42c>)
 8002526:	4413      	add	r3, r2
 8002528:	493f      	ldr	r1, [pc, #252]	; (8002628 <main+0x440>)
 800252a:	461a      	mov	r2, r3
 800252c:	460b      	mov	r3, r1
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	8013      	strh	r3, [r2, #0]

				/* Open the file with write access */
				fresult = f_open(&fil, "Results.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8002532:	2212      	movs	r2, #18
 8002534:	493d      	ldr	r1, [pc, #244]	; (800262c <main+0x444>)
 8002536:	483e      	ldr	r0, [pc, #248]	; (8002630 <main+0x448>)
 8002538:	f006 f950 	bl	80087dc <f_open>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b3c      	ldr	r3, [pc, #240]	; (8002634 <main+0x44c>)
 8002542:	701a      	strb	r2, [r3, #0]
				/* Read file info so we can get the file size */
				fresult = f_stat("Results.txt", &filinfo);
 8002544:	493c      	ldr	r1, [pc, #240]	; (8002638 <main+0x450>)
 8002546:	4839      	ldr	r0, [pc, #228]	; (800262c <main+0x444>)
 8002548:	f007 f8d3 	bl	80096f2 <f_stat>
 800254c:	4603      	mov	r3, r0
 800254e:	461a      	mov	r2, r3
 8002550:	4b38      	ldr	r3, [pc, #224]	; (8002634 <main+0x44c>)
 8002552:	701a      	strb	r2, [r3, #0]
				/* Move to offset to the end of the file */
				fresult = f_lseek(&fil, filinfo.fsize);
 8002554:	4b38      	ldr	r3, [pc, #224]	; (8002638 <main+0x450>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4619      	mov	r1, r3
 800255a:	4835      	ldr	r0, [pc, #212]	; (8002630 <main+0x448>)
 800255c:	f006 fea5 	bl	80092aa <f_lseek>
 8002560:	4603      	mov	r3, r0
 8002562:	461a      	mov	r2, r3
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <main+0x44c>)
 8002566:	701a      	strb	r2, [r3, #0]
				/* Write the string to the file */
				fresult = f_puts(dataStr, &fil);
 8002568:	4931      	ldr	r1, [pc, #196]	; (8002630 <main+0x448>)
 800256a:	482a      	ldr	r0, [pc, #168]	; (8002614 <main+0x42c>)
 800256c:	f007 f971 	bl	8009852 <f_puts>
 8002570:	4603      	mov	r3, r0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <main+0x44c>)
 8002576:	701a      	strb	r2, [r3, #0]
				/* Close file */
				f_close(&fil);
 8002578:	482d      	ldr	r0, [pc, #180]	; (8002630 <main+0x448>)
 800257a:	f006 fe6c 	bl	8009256 <f_close>
				/* Open to read the file */
				fresult = f_open(&fil, "Results.txt", FA_READ);
 800257e:	2201      	movs	r2, #1
 8002580:	492a      	ldr	r1, [pc, #168]	; (800262c <main+0x444>)
 8002582:	482b      	ldr	r0, [pc, #172]	; (8002630 <main+0x448>)
 8002584:	f006 f92a 	bl	80087dc <f_open>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b29      	ldr	r3, [pc, #164]	; (8002634 <main+0x44c>)
 800258e:	701a      	strb	r2, [r3, #0]
				/* Read file info so we can get the file size */
				fresult = f_stat("Results.txt", &filinfo);
 8002590:	4929      	ldr	r1, [pc, #164]	; (8002638 <main+0x450>)
 8002592:	4826      	ldr	r0, [pc, #152]	; (800262c <main+0x444>)
 8002594:	f007 f8ad 	bl	80096f2 <f_stat>
 8002598:	4603      	mov	r3, r0
 800259a:	461a      	mov	r2, r3
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <main+0x44c>)
 800259e:	701a      	strb	r2, [r3, #0]
				/* Read string from the file */
				f_read(&fil, buffer, filinfo.fsize, &br);
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <main+0x450>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b25      	ldr	r3, [pc, #148]	; (800263c <main+0x454>)
 80025a6:	4926      	ldr	r1, [pc, #152]	; (8002640 <main+0x458>)
 80025a8:	4821      	ldr	r0, [pc, #132]	; (8002630 <main+0x448>)
 80025aa:	f006 fae3 	bl	8008b74 <f_read>
				//send_uart(buffer);
				/* Close file */
				f_close(&fil);
 80025ae:	4820      	ldr	r0, [pc, #128]	; (8002630 <main+0x448>)
 80025b0:	f006 fe51 	bl	8009256 <f_close>
				bufclear();
 80025b4:	f7ff fdfa 	bl	80021ac <bufclear>

				button_state = 0;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <main+0x410>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	701a      	strb	r2, [r3, #0]
		while(counter >= 1)
 80025be:	4b21      	ldr	r3, [pc, #132]	; (8002644 <main+0x45c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f47f aede 	bne.w	8002384 <main+0x19c>
 80025c8:	e7f9      	b.n	80025be <main+0x3d6>
 80025ca:	bf00      	nop
 80025cc:	f3af 8000 	nop.w
 80025d0:	66666666 	.word	0x66666666
 80025d4:	400a6666 	.word	0x400a6666
 80025d8:	00000000 	.word	0x00000000
 80025dc:	40affe00 	.word	0x40affe00
 80025e0:	88e368f1 	.word	0x88e368f1
 80025e4:	3ee4f8b5 	.word	0x3ee4f8b5
 80025e8:	20000288 	.word	0x20000288
 80025ec:	2000028c 	.word	0x2000028c
 80025f0:	403e8000 	.word	0x403e8000
 80025f4:	20000290 	.word	0x20000290
 80025f8:	200002a9 	.word	0x200002a9
 80025fc:	0800c770 	.word	0x0800c770
 8002600:	0800c77c 	.word	0x0800c77c
 8002604:	20000294 	.word	0x20000294
 8002608:	200002a4 	.word	0x200002a4
 800260c:	0800c784 	.word	0x0800c784
 8002610:	0800c78c 	.word	0x0800c78c
 8002614:	20000224 	.word	0x20000224
 8002618:	0800c794 	.word	0x0800c794
 800261c:	20001850 	.word	0x20001850
 8002620:	0800c798 	.word	0x0800c798
 8002624:	0800c79c 	.word	0x0800c79c
 8002628:	0800c7a4 	.word	0x0800c7a4
 800262c:	0800c71c 	.word	0x0800c71c
 8002630:	2000194c 	.word	0x2000194c
 8002634:	200018a8 	.word	0x200018a8
 8002638:	20000318 	.word	0x20000318
 800263c:	20001364 	.word	0x20001364
 8002640:	200013c8 	.word	0x200013c8
 8002644:	200002a0 	.word	0x200002a0

08002648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b094      	sub	sp, #80	; 0x50
 800264c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800264e:	f107 031c 	add.w	r3, r7, #28
 8002652:	2234      	movs	r2, #52	; 0x34
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f007 f9a6 	bl	80099a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800265c:	f107 0308 	add.w	r3, r7, #8
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <SystemClock_Config+0xd0>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	4a28      	ldr	r2, [pc, #160]	; (8002718 <SystemClock_Config+0xd0>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6413      	str	r3, [r2, #64]	; 0x40
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <SystemClock_Config+0xd0>)
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002688:	2300      	movs	r3, #0
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <SystemClock_Config+0xd4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002694:	4a21      	ldr	r2, [pc, #132]	; (800271c <SystemClock_Config+0xd4>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b1f      	ldr	r3, [pc, #124]	; (800271c <SystemClock_Config+0xd4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026a8:	2302      	movs	r3, #2
 80026aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ac:	2301      	movs	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026b0:	2310      	movs	r3, #16
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b4:	2302      	movs	r3, #2
 80026b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026bc:	2308      	movs	r3, #8
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80026c0:	2354      	movs	r3, #84	; 0x54
 80026c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026c4:	2302      	movs	r3, #2
 80026c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80026c8:	2302      	movs	r3, #2
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80026cc:	2302      	movs	r3, #2
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4618      	mov	r0, r3
 80026d6:	f002 fd67 	bl	80051a8 <HAL_RCC_OscConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80026e0:	f000 fa54 	bl	8002b8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026e4:	230f      	movs	r3, #15
 80026e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026e8:	2302      	movs	r3, #2
 80026ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	2102      	movs	r1, #2
 8002700:	4618      	mov	r0, r3
 8002702:	f002 fa85 	bl	8004c10 <HAL_RCC_ClockConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800270c:	f000 fa3e 	bl	8002b8c <Error_Handler>
  }
}
 8002710:	bf00      	nop
 8002712:	3750      	adds	r7, #80	; 0x50
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	40007000 	.word	0x40007000

08002720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002726:	463b      	mov	r3, r7
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002734:	4a21      	ldr	r2, [pc, #132]	; (80027bc <MX_ADC1_Init+0x9c>)
 8002736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002738:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <MX_ADC1_Init+0x98>)
 800273a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800273e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002748:	2200      	movs	r2, #0
 800274a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <MX_ADC1_Init+0x98>)
 800274e:	2200      	movs	r2, #0
 8002750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002752:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <MX_ADC1_Init+0x98>)
 800275c:	2200      	movs	r2, #0
 800275e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002760:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <MX_ADC1_Init+0xa0>)
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002766:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002768:	2200      	movs	r2, #0
 800276a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <MX_ADC1_Init+0x98>)
 800276e:	2201      	movs	r2, #1
 8002770:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002772:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002774:	2201      	movs	r2, #1
 8002776:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <MX_ADC1_Init+0x98>)
 800277c:	2201      	movs	r2, #1
 800277e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002780:	480d      	ldr	r0, [pc, #52]	; (80027b8 <MX_ADC1_Init+0x98>)
 8002782:	f000 fdc7 	bl	8003314 <HAL_ADC_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800278c:	f000 f9fe 	bl	8002b8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002790:	2300      	movs	r3, #0
 8002792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002794:	2301      	movs	r3, #1
 8002796:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8002798:	2304      	movs	r3, #4
 800279a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800279c:	463b      	mov	r3, r7
 800279e:	4619      	mov	r1, r3
 80027a0:	4805      	ldr	r0, [pc, #20]	; (80027b8 <MX_ADC1_Init+0x98>)
 80027a2:	f000 ffe7 	bl	8003774 <HAL_ADC_ConfigChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80027ac:	f000 f9ee 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027b0:	bf00      	nop
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20001368 	.word	0x20001368
 80027bc:	40012000 	.word	0x40012000
 80027c0:	0f000001 	.word	0x0f000001

080027c4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80027ca:	463b      	mov	r3, r7
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <MX_DAC_Init+0x4c>)
 80027d4:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <MX_DAC_Init+0x50>)
 80027d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80027d8:	480d      	ldr	r0, [pc, #52]	; (8002810 <MX_DAC_Init+0x4c>)
 80027da:	f001 fb8c 	bl	8003ef6 <HAL_DAC_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80027e4:	f000 f9d2 	bl	8002b8c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80027e8:	2304      	movs	r3, #4
 80027ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80027f0:	463b      	mov	r3, r7
 80027f2:	2200      	movs	r2, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	4806      	ldr	r0, [pc, #24]	; (8002810 <MX_DAC_Init+0x4c>)
 80027f8:	f001 fc7a 	bl	80040f0 <HAL_DAC_ConfigChannel>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002802:	f000 f9c3 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200013b4 	.word	0x200013b4
 8002814:	40007400 	.word	0x40007400

08002818 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800281c:	4b17      	ldr	r3, [pc, #92]	; (800287c <MX_SPI1_Init+0x64>)
 800281e:	4a18      	ldr	r2, [pc, #96]	; (8002880 <MX_SPI1_Init+0x68>)
 8002820:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <MX_SPI1_Init+0x64>)
 8002824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002828:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <MX_SPI1_Init+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002830:	4b12      	ldr	r3, [pc, #72]	; (800287c <MX_SPI1_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <MX_SPI1_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800283c:	4b0f      	ldr	r3, [pc, #60]	; (800287c <MX_SPI1_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002842:	4b0e      	ldr	r3, [pc, #56]	; (800287c <MX_SPI1_Init+0x64>)
 8002844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002848:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <MX_SPI1_Init+0x64>)
 800284c:	2218      	movs	r2, #24
 800284e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <MX_SPI1_Init+0x64>)
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <MX_SPI1_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <MX_SPI1_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <MX_SPI1_Init+0x64>)
 8002864:	220a      	movs	r2, #10
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002868:	4804      	ldr	r0, [pc, #16]	; (800287c <MX_SPI1_Init+0x64>)
 800286a:	f002 ff3b 	bl	80056e4 <HAL_SPI_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002874:	f000 f98a 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}
 800287c:	200018ac 	.word	0x200018ac
 8002880:	40013000 	.word	0x40013000

08002884 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800288a:	463b      	mov	r3, r7
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <MX_TIM6_Init+0x64>)
 8002894:	4a15      	ldr	r2, [pc, #84]	; (80028ec <MX_TIM6_Init+0x68>)
 8002896:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 20000;
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <MX_TIM6_Init+0x64>)
 800289a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800289e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_TIM6_Init+0x64>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 167;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <MX_TIM6_Init+0x64>)
 80028a8:	22a7      	movs	r2, #167	; 0xa7
 80028aa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_TIM6_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028b2:	480d      	ldr	r0, [pc, #52]	; (80028e8 <MX_TIM6_Init+0x64>)
 80028b4:	f003 fb48 	bl	8005f48 <HAL_TIM_Base_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80028be:	f000 f965 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028c2:	2320      	movs	r3, #32
 80028c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028ca:	463b      	mov	r3, r7
 80028cc:	4619      	mov	r1, r3
 80028ce:	4806      	ldr	r0, [pc, #24]	; (80028e8 <MX_TIM6_Init+0x64>)
 80028d0:	f003 fdca 	bl	8006468 <HAL_TIMEx_MasterConfigSynchronization>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80028da:	f000 f957 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20001858 	.word	0x20001858
 80028ec:	40001000 	.word	0x40001000

080028f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_USART2_UART_Init+0x4c>)
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <MX_USART2_UART_Init+0x50>)
 80028f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <MX_USART2_UART_Init+0x4c>)
 80028fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002900:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_USART2_UART_Init+0x4c>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_USART2_UART_Init+0x4c>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_USART2_UART_Init+0x4c>)
 8002910:	2200      	movs	r2, #0
 8002912:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_USART2_UART_Init+0x4c>)
 8002916:	220c      	movs	r2, #12
 8002918:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_USART2_UART_Init+0x4c>)
 800291c:	2200      	movs	r2, #0
 800291e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_USART2_UART_Init+0x4c>)
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_USART2_UART_Init+0x4c>)
 8002928:	f003 fe2e 	bl	8006588 <HAL_UART_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002932:	f000 f92b 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20001904 	.word	0x20001904
 8002940:	40004400 	.word	0x40004400

08002944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <MX_DMA_Init+0x3c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <MX_DMA_Init+0x3c>)
 8002954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <MX_DMA_Init+0x3c>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	2038      	movs	r0, #56	; 0x38
 800296c:	f001 fa8d 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002970:	2038      	movs	r0, #56	; 0x38
 8002972:	f001 faa6 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800

08002984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b08a      	sub	sp, #40	; 0x28
 8002988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <MX_GPIO_Init+0x128>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a42      	ldr	r2, [pc, #264]	; (8002aac <MX_GPIO_Init+0x128>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <MX_GPIO_Init+0x128>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <MX_GPIO_Init+0x128>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a3b      	ldr	r2, [pc, #236]	; (8002aac <MX_GPIO_Init+0x128>)
 80029c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b39      	ldr	r3, [pc, #228]	; (8002aac <MX_GPIO_Init+0x128>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	4b35      	ldr	r3, [pc, #212]	; (8002aac <MX_GPIO_Init+0x128>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <MX_GPIO_Init+0x128>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <MX_GPIO_Init+0x128>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60bb      	str	r3, [r7, #8]
 80029ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <MX_GPIO_Init+0x128>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <MX_GPIO_Init+0x128>)
 80029f8:	f043 0302 	orr.w	r3, r3, #2
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <MX_GPIO_Init+0x128>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RNW_Pin|EN_Pin|RS_Pin|DB6_Pin
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f24f 010e 	movw	r1, #61454	; 0xf00e
 8002a10:	4827      	ldr	r0, [pc, #156]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 8002a12:	f002 f8cb 	bl	8004bac <HAL_GPIO_WritePin>
                          |DB5_Pin|DB4_Pin|DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a1c:	4825      	ldr	r0, [pc, #148]	; (8002ab4 <MX_GPIO_Init+0x130>)
 8002a1e:	f002 f8c5 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	481e      	ldr	r0, [pc, #120]	; (8002ab4 <MX_GPIO_Init+0x130>)
 8002a3a:	f001 ff23 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4819      	ldr	r0, [pc, #100]	; (8002ab8 <MX_GPIO_Init+0x134>)
 8002a52:	f001 ff17 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RNW_Pin EN_Pin RS_Pin DB6_Pin
                           DB5_Pin DB4_Pin DB7_Pin */
  GPIO_InitStruct.Pin = RNW_Pin|EN_Pin|RS_Pin|DB6_Pin
 8002a56:	f24f 030e 	movw	r3, #61454	; 0xf00e
 8002a5a:	617b      	str	r3, [r7, #20]
                          |DB5_Pin|DB4_Pin|DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4810      	ldr	r0, [pc, #64]	; (8002ab0 <MX_GPIO_Init+0x12c>)
 8002a70:	f001 ff08 	bl	8004884 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4809      	ldr	r0, [pc, #36]	; (8002ab4 <MX_GPIO_Init+0x130>)
 8002a8e:	f001 fef9 	bl	8004884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2028      	movs	r0, #40	; 0x28
 8002a98:	f001 f9f7 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a9c:	2028      	movs	r0, #40	; 0x28
 8002a9e:	f001 fa10 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	40020000 	.word	0x40020000

08002abc <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
	__NOP();
 8002ac4:	bf00      	nop
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_ADC_ConvCpltCallback>:
//conversion complete callback in non-blocking mode
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	__NOP();
 8002ada:	bf00      	nop
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	80fb      	strh	r3, [r7, #6]
	current_millis = HAL_GetTick();
 8002af2:	f000 fbdf 	bl	80032b4 <HAL_GetTick>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a1e      	ldr	r2, [pc, #120]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002afa:	6013      	str	r3, [r2, #0]
	if (GPIO_Pin == GPIO_PIN_13 && (current_millis - previous_millis > 10))
 8002afc:	88fb      	ldrh	r3, [r7, #6]
 8002afe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b02:	d133      	bne.n	8002b6c <HAL_GPIO_EXTI_Callback+0x84>
 8002b04:	4b1b      	ldr	r3, [pc, #108]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x90>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b0a      	cmp	r3, #10
 8002b10:	d92c      	bls.n	8002b6c <HAL_GPIO_EXTI_Callback+0x84>
	{
		counter++;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x94>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3301      	adds	r3, #1
 8002b18:	4a18      	ldr	r2, [pc, #96]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x94>)
 8002b1a:	6013      	str	r3, [r2, #0]
		button_pressed = 1;
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
		previous_millis = current_millis;
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x8c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a14      	ldr	r2, [pc, #80]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x90>)
 8002b28:	6013      	str	r3, [r2, #0]

		if(button_pressed == 1 && button_state == 0)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d109      	bne.n	8002b46 <HAL_GPIO_EXTI_Callback+0x5e>
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_GPIO_EXTI_Callback+0x5e>
		{
			button_state = 1;
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
			button_pressed = 0;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
		}

		if(button_pressed == 1 && button_state == 1)
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d10e      	bne.n	8002b6c <HAL_GPIO_EXTI_Callback+0x84>
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10a      	bne.n	8002b6c <HAL_GPIO_EXTI_Callback+0x84>
		{
			measurement++;
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_GPIO_EXTI_Callback+0xa0>)
 8002b5e:	6013      	str	r3, [r2, #0]
			button_state = 2;
 8002b60:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_GPIO_EXTI_Callback+0x9c>)
 8002b62:	2202      	movs	r2, #2
 8002b64:	701a      	strb	r2, [r3, #0]
			button_pressed = 0;
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_GPIO_EXTI_Callback+0x98>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000029c 	.word	0x2000029c
 8002b78:	20000298 	.word	0x20000298
 8002b7c:	200002a0 	.word	0x200002a0
 8002b80:	200002a8 	.word	0x200002a8
 8002b84:	200002a9 	.word	0x200002a9
 8002b88:	200002a4 	.word	0x200002a4

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
}
 8002b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002b94:	e7fe      	b.n	8002b94 <Error_Handler+0x8>
	...

08002b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_MspInit+0x4c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	; 0x44
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_MspInit+0x4c>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bd6:	2007      	movs	r0, #7
 8002bd8:	f001 f94c 	bl	8003e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2f      	ldr	r2, [pc, #188]	; (8002cc4 <HAL_ADC_MspInit+0xdc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d157      	bne.n	8002cba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_ADC_MspInit+0xe0>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_ADC_MspInit+0xe0>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_ADC_MspInit+0xe0>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b27      	ldr	r3, [pc, #156]	; (8002cc8 <HAL_ADC_MspInit+0xe0>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_ADC_MspInit+0xe0>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_ADC_MspInit+0xe0>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c42:	2301      	movs	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c46:	2303      	movs	r3, #3
 8002c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	481d      	ldr	r0, [pc, #116]	; (8002ccc <HAL_ADC_MspInit+0xe4>)
 8002c56:	f001 fe15 	bl	8004884 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c5a:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_ADC_MspInit+0xec>)
 8002c5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c66:	4b1a      	ldr	r3, [pc, #104]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c6c:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c7a:	4b15      	ldr	r3, [pc, #84]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c82:	4b13      	ldr	r3, [pc, #76]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c90:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c9e:	480c      	ldr	r0, [pc, #48]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002ca0:	f001 fa80 	bl	80041a4 <HAL_DMA_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002caa:	f7ff ff6f 	bl	8002b8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <HAL_ADC_MspInit+0xe8>)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002cba:	bf00      	nop
 8002cbc:	3728      	adds	r7, #40	; 0x28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40012000 	.word	0x40012000
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	200017f0 	.word	0x200017f0
 8002cd4:	40026410 	.word	0x40026410

08002cd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	; 0x28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 0314 	add.w	r3, r7, #20
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <HAL_DAC_MspInit+0x8c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d12f      	bne.n	8002d5a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_DAC_MspInit+0x90>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a19      	ldr	r2, [pc, #100]	; (8002d68 <HAL_DAC_MspInit+0x90>)
 8002d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_DAC_MspInit+0x90>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b13      	ldr	r3, [pc, #76]	; (8002d68 <HAL_DAC_MspInit+0x90>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_DAC_MspInit+0x90>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b10      	ldr	r3, [pc, #64]	; (8002d68 <HAL_DAC_MspInit+0x90>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002d32:	2310      	movs	r3, #16
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d36:	2303      	movs	r3, #3
 8002d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	4619      	mov	r1, r3
 8002d44:	4809      	ldr	r0, [pc, #36]	; (8002d6c <HAL_DAC_MspInit+0x94>)
 8002d46:	f001 fd9d 	bl	8004884 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	2036      	movs	r0, #54	; 0x36
 8002d50:	f001 f89b 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d54:	2036      	movs	r0, #54	; 0x36
 8002d56:	f001 f8b4 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002d5a:	bf00      	nop
 8002d5c:	3728      	adds	r7, #40	; 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40007400 	.word	0x40007400
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40020000 	.word	0x40020000

08002d70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08a      	sub	sp, #40	; 0x28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]
 8002d82:	609a      	str	r2, [r3, #8]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a19      	ldr	r2, [pc, #100]	; (8002df4 <HAL_SPI_MspInit+0x84>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12b      	bne.n	8002dea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d92:	2300      	movs	r3, #0
 8002d94:	613b      	str	r3, [r7, #16]
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002d9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b15      	ldr	r3, [pc, #84]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <HAL_SPI_MspInit+0x88>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	60fb      	str	r3, [r7, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002dca:	23e0      	movs	r3, #224	; 0xe0
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002dda:	2305      	movs	r3, #5
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dde:	f107 0314 	add.w	r3, r7, #20
 8002de2:	4619      	mov	r1, r3
 8002de4:	4805      	ldr	r0, [pc, #20]	; (8002dfc <HAL_SPI_MspInit+0x8c>)
 8002de6:	f001 fd4d 	bl	8004884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002dea:	bf00      	nop
 8002dec:	3728      	adds	r7, #40	; 0x28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40013000 	.word	0x40013000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000

08002e00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	; (8002e48 <HAL_TIM_Base_MspInit+0x48>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d115      	bne.n	8002e3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <HAL_TIM_Base_MspInit+0x4c>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <HAL_TIM_Base_MspInit+0x4c>)
 8002e1c:	f043 0310 	orr.w	r3, r3, #16
 8002e20:	6413      	str	r3, [r2, #64]	; 0x40
 8002e22:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_TIM_Base_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	2036      	movs	r0, #54	; 0x36
 8002e34:	f001 f829 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e38:	2036      	movs	r0, #54	; 0x36
 8002e3a:	f001 f842 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40001000 	.word	0x40001000
 8002e4c:	40023800 	.word	0x40023800

08002e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a19      	ldr	r2, [pc, #100]	; (8002ed4 <HAL_UART_MspInit+0x84>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d12b      	bne.n	8002eca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	613b      	str	r3, [r7, #16]
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_UART_MspInit+0x88>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a17      	ldr	r2, [pc, #92]	; (8002ed8 <HAL_UART_MspInit+0x88>)
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <HAL_UART_MspInit+0x88>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	613b      	str	r3, [r7, #16]
 8002e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_UART_MspInit+0x88>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	4a10      	ldr	r2, [pc, #64]	; (8002ed8 <HAL_UART_MspInit+0x88>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_UART_MspInit+0x88>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002eaa:	230c      	movs	r3, #12
 8002eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eba:	2307      	movs	r3, #7
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebe:	f107 0314 	add.w	r3, r7, #20
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <HAL_UART_MspInit+0x8c>)
 8002ec6:	f001 fcdd 	bl	8004884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	; 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40004400 	.word	0x40004400
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020000 	.word	0x40020000

08002ee0 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
	if(Timer1 > 0)
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <SDTimer_Handler+0x40>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d006      	beq.n	8002efc <SDTimer_Handler+0x1c>
		Timer1--;
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <SDTimer_Handler+0x40>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <SDTimer_Handler+0x40>)
 8002efa:	701a      	strb	r2, [r3, #0]

	if(Timer2 > 0)
 8002efc:	4b09      	ldr	r3, [pc, #36]	; (8002f24 <SDTimer_Handler+0x44>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <SDTimer_Handler+0x34>
		Timer2--;
 8002f06:	4b07      	ldr	r3, [pc, #28]	; (8002f24 <SDTimer_Handler+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SDTimer_Handler+0x44>)
 8002f12:	701a      	strb	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	2000297d 	.word	0x2000297d
 8002f24:	2000297c 	.word	0x2000297c

08002f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <NMI_Handler+0x4>

08002f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f32:	e7fe      	b.n	8002f32 <HardFault_Handler+0x4>

08002f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f38:	e7fe      	b.n	8002f38 <MemManage_Handler+0x4>

08002f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f3e:	e7fe      	b.n	8002f3e <BusFault_Handler+0x4>

08002f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f44:	e7fe      	b.n	8002f44 <UsageFault_Handler+0x4>

08002f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	/* SD */
	FatFsCnt++;
 8002f74:	4b0a      	ldr	r3, [pc, #40]	; (8002fa0 <SysTick_Handler+0x30>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <SysTick_Handler+0x30>)
 8002f80:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <SysTick_Handler+0x30>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b09      	cmp	r3, #9
 8002f8a:	d904      	bls.n	8002f96 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <SysTick_Handler+0x30>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002f92:	f7ff ffa5 	bl	8002ee0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f96:	f000 f979 	bl	800328c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200002aa 	.word	0x200002aa

08002fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fac:	f001 fe18 	bl	8004be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8002fb8:	4803      	ldr	r0, [pc, #12]	; (8002fc8 <TIM6_DAC_IRQHandler+0x14>)
 8002fba:	f001 f810 	bl	8003fde <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8002fbe:	4803      	ldr	r0, [pc, #12]	; (8002fcc <TIM6_DAC_IRQHandler+0x18>)
 8002fc0:	f003 f882 	bl	80060c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200013b4 	.word	0x200013b4
 8002fcc:	20001858 	.word	0x20001858

08002fd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <DMA2_Stream0_IRQHandler+0x10>)
 8002fd6:	f001 f9eb 	bl	80043b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200017f0 	.word	0x200017f0

08002fe4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
	return 1;
 8002fe8:	2301      	movs	r3, #1
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <_kill>:

int _kill(int pid, int sig)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ffe:	f006 fca9 	bl	8009954 <__errno>
 8003002:	4603      	mov	r3, r0
 8003004:	2216      	movs	r2, #22
 8003006:	601a      	str	r2, [r3, #0]
	return -1;
 8003008:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_exit>:

void _exit (int status)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800301c:	f04f 31ff 	mov.w	r1, #4294967295
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ffe7 	bl	8002ff4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003026:	e7fe      	b.n	8003026 <_exit+0x12>

08003028 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	2300      	movs	r3, #0
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	e00a      	b.n	8003050 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800303a:	f3af 8000 	nop.w
 800303e:	4601      	mov	r1, r0
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	60ba      	str	r2, [r7, #8]
 8003046:	b2ca      	uxtb	r2, r1
 8003048:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	3301      	adds	r3, #1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	dbf0      	blt.n	800303a <_read+0x12>
	}

return len;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e009      	b.n	8003088 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	60ba      	str	r2, [r7, #8]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	3301      	adds	r3, #1
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	dbf1      	blt.n	8003074 <_write+0x12>
	}
	return len;
 8003090:	687b      	ldr	r3, [r7, #4]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <_close>:

int _close(int file)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
	return -1;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c2:	605a      	str	r2, [r3, #4]
	return 0;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <_isatty>:

int _isatty(int file)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
	return 1;
 80030da:	2301      	movs	r3, #1
}
 80030dc:	4618      	mov	r0, r3
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
	return 0;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
	...

08003104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800310c:	4a14      	ldr	r2, [pc, #80]	; (8003160 <_sbrk+0x5c>)
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <_sbrk+0x60>)
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <_sbrk+0x64>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d102      	bne.n	8003126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <_sbrk+0x64>)
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <_sbrk+0x68>)
 8003124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <_sbrk+0x64>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	429a      	cmp	r2, r3
 8003132:	d207      	bcs.n	8003144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003134:	f006 fc0e 	bl	8009954 <__errno>
 8003138:	4603      	mov	r3, r0
 800313a:	220c      	movs	r2, #12
 800313c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313e:	f04f 33ff 	mov.w	r3, #4294967295
 8003142:	e009      	b.n	8003158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <_sbrk+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <_sbrk+0x64>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
 8003152:	4a05      	ldr	r2, [pc, #20]	; (8003168 <_sbrk+0x64>)
 8003154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003156:	68fb      	ldr	r3, [r7, #12]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	20020000 	.word	0x20020000
 8003164:	00000400 	.word	0x00000400
 8003168:	200002ac 	.word	0x200002ac
 800316c:	20004a00 	.word	0x20004a00

08003170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <SystemInit+0x20>)
 8003176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317a:	4a05      	ldr	r2, [pc, #20]	; (8003190 <SystemInit+0x20>)
 800317c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003184:	bf00      	nop
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800319a:	490e      	ldr	r1, [pc, #56]	; (80031d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800319c:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031a0:	e002      	b.n	80031a8 <LoopCopyDataInit>

080031a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031a6:	3304      	adds	r3, #4

080031a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031ac:	d3f9      	bcc.n	80031a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ae:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80031b0:	4c0b      	ldr	r4, [pc, #44]	; (80031e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80031b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031b4:	e001      	b.n	80031ba <LoopFillZerobss>

080031b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031b8:	3204      	adds	r2, #4

080031ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031bc:	d3fb      	bcc.n	80031b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80031be:	f7ff ffd7 	bl	8003170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031c2:	f006 fbcd 	bl	8009960 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031c6:	f7ff f80f 	bl	80021e8 <main>
  bx  lr    
 80031ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031d4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80031d8:	0800cc7c 	.word	0x0800cc7c
  ldr r2, =_sbss
 80031dc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80031e0:	20004a00 	.word	0x20004a00

080031e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e4:	e7fe      	b.n	80031e4 <ADC_IRQHandler>
	...

080031e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031ec:	4b0e      	ldr	r3, [pc, #56]	; (8003228 <HAL_Init+0x40>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0d      	ldr	r2, [pc, #52]	; (8003228 <HAL_Init+0x40>)
 80031f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_Init+0x40>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0a      	ldr	r2, [pc, #40]	; (8003228 <HAL_Init+0x40>)
 80031fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_Init+0x40>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a07      	ldr	r2, [pc, #28]	; (8003228 <HAL_Init+0x40>)
 800320a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003210:	2003      	movs	r0, #3
 8003212:	f000 fe2f 	bl	8003e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003216:	2000      	movs	r0, #0
 8003218:	f000 f808 	bl	800322c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800321c:	f7ff fcbc 	bl	8002b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00

0800322c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003234:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_InitTick+0x54>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_InitTick+0x58>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003242:	fbb3 f3f1 	udiv	r3, r3, r1
 8003246:	fbb2 f3f3 	udiv	r3, r2, r3
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe47 	bl	8003ede <HAL_SYSTICK_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e00e      	b.n	8003278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b0f      	cmp	r3, #15
 800325e:	d80a      	bhi.n	8003276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003260:	2200      	movs	r2, #0
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	f04f 30ff 	mov.w	r0, #4294967295
 8003268:	f000 fe0f 	bl	8003e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_InitTick+0x5c>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	e000      	b.n	8003278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000010 	.word	0x20000010
 8003284:	20000018 	.word	0x20000018
 8003288:	20000014 	.word	0x20000014

0800328c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003290:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_IncTick+0x20>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_IncTick+0x24>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4413      	add	r3, r2
 800329c:	4a04      	ldr	r2, [pc, #16]	; (80032b0 <HAL_IncTick+0x24>)
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000018 	.word	0x20000018
 80032b0:	20002980 	.word	0x20002980

080032b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return uwTick;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_GetTick+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20002980 	.word	0x20002980

080032cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d4:	f7ff ffee 	bl	80032b4 <HAL_GetTick>
 80032d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d005      	beq.n	80032f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032e6:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <HAL_Delay+0x44>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	461a      	mov	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f2:	bf00      	nop
 80032f4:	f7ff ffde 	bl	80032b4 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d8f7      	bhi.n	80032f4 <HAL_Delay+0x28>
  {
  }
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000018 	.word	0x20000018

08003314 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331c:	2300      	movs	r3, #0
 800331e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e033      	b.n	8003392 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff fc58 	bl	8002be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800335a:	f023 0302 	bic.w	r3, r3, #2
 800335e:	f043 0202 	orr.w	r2, r3, #2
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 fb36 	bl	80039d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f023 0303 	bic.w	r3, r3, #3
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
 8003382:	e001      	b.n	8003388 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003390:	7bfb      	ldrb	r3, [r7, #15]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_Start+0x1a>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e0b2      	b.n	800351c <HAL_ADC_Start+0x180>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d018      	beq.n	80033fe <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 0201 	orr.w	r2, r2, #1
 80033da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033dc:	4b52      	ldr	r3, [pc, #328]	; (8003528 <HAL_ADC_Start+0x18c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a52      	ldr	r2, [pc, #328]	; (800352c <HAL_ADC_Start+0x190>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0c9a      	lsrs	r2, r3, #18
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033f0:	e002      	b.n	80033f8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f9      	bne.n	80033f2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d17a      	bne.n	8003502 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003436:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	d106      	bne.n	800345a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f023 0206 	bic.w	r2, r3, #6
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
 8003458:	e002      	b.n	8003460 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_ADC_Start+0x194>)
 800346a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003474:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2b00      	cmp	r3, #0
 8003480:	d12a      	bne.n	80034d8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2b      	ldr	r2, [pc, #172]	; (8003534 <HAL_ADC_Start+0x198>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d015      	beq.n	80034b8 <HAL_ADC_Start+0x11c>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a29      	ldr	r2, [pc, #164]	; (8003538 <HAL_ADC_Start+0x19c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d105      	bne.n	80034a2 <HAL_ADC_Start+0x106>
 8003496:	4b26      	ldr	r3, [pc, #152]	; (8003530 <HAL_ADC_Start+0x194>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a25      	ldr	r2, [pc, #148]	; (800353c <HAL_ADC_Start+0x1a0>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d136      	bne.n	800351a <HAL_ADC_Start+0x17e>
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_ADC_Start+0x194>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d130      	bne.n	800351a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d129      	bne.n	800351a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034d4:	609a      	str	r2, [r3, #8]
 80034d6:	e020      	b.n	800351a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a15      	ldr	r2, [pc, #84]	; (8003534 <HAL_ADC_Start+0x198>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d11b      	bne.n	800351a <HAL_ADC_Start+0x17e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d114      	bne.n	800351a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	e00b      	b.n	800351a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0210 	orr.w	r2, r3, #16
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f043 0201 	orr.w	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000010 	.word	0x20000010
 800352c:	431bde83 	.word	0x431bde83
 8003530:	40012300 	.word	0x40012300
 8003534:	40012000 	.word	0x40012000
 8003538:	40012100 	.word	0x40012100
 800353c:	40012200 	.word	0x40012200

08003540 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ADC_Start_DMA+0x1e>
 800355a:	2302      	movs	r3, #2
 800355c:	e0e9      	b.n	8003732 <HAL_ADC_Start_DMA+0x1f2>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b01      	cmp	r3, #1
 8003572:	d018      	beq.n	80035a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003584:	4b6d      	ldr	r3, [pc, #436]	; (800373c <HAL_ADC_Start_DMA+0x1fc>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6d      	ldr	r2, [pc, #436]	; (8003740 <HAL_ADC_Start_DMA+0x200>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	0c9a      	lsrs	r2, r3, #18
 8003590:	4613      	mov	r3, r2
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4413      	add	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003598:	e002      	b.n	80035a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	3b01      	subs	r3, #1
 800359e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f9      	bne.n	800359a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035b4:	d107      	bne.n	80035c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	f040 80a1 	bne.w	8003718 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d007      	beq.n	8003608 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003600:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003610:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003614:	d106      	bne.n	8003624 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f023 0206 	bic.w	r2, r3, #6
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
 8003622:	e002      	b.n	800362a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003632:	4b44      	ldr	r3, [pc, #272]	; (8003744 <HAL_ADC_Start_DMA+0x204>)
 8003634:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	4a43      	ldr	r2, [pc, #268]	; (8003748 <HAL_ADC_Start_DMA+0x208>)
 800363c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	4a42      	ldr	r2, [pc, #264]	; (800374c <HAL_ADC_Start_DMA+0x20c>)
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	4a41      	ldr	r2, [pc, #260]	; (8003750 <HAL_ADC_Start_DMA+0x210>)
 800364c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003656:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003666:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003676:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	334c      	adds	r3, #76	; 0x4c
 8003682:	4619      	mov	r1, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f000 fe3a 	bl	8004300 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	2b00      	cmp	r3, #0
 8003696:	d12a      	bne.n	80036ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a2d      	ldr	r2, [pc, #180]	; (8003754 <HAL_ADC_Start_DMA+0x214>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d015      	beq.n	80036ce <HAL_ADC_Start_DMA+0x18e>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_ADC_Start_DMA+0x218>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d105      	bne.n	80036b8 <HAL_ADC_Start_DMA+0x178>
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <HAL_ADC_Start_DMA+0x204>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 031f 	and.w	r3, r3, #31
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <HAL_ADC_Start_DMA+0x21c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d136      	bne.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_ADC_Start_DMA+0x204>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d130      	bne.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d129      	bne.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e020      	b.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_ADC_Start_DMA+0x214>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d11b      	bne.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d114      	bne.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	e00b      	b.n	8003730 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f043 0201 	orr.w	r2, r3, #1
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	20000010 	.word	0x20000010
 8003740:	431bde83 	.word	0x431bde83
 8003744:	40012300 	.word	0x40012300
 8003748:	08003bd1 	.word	0x08003bd1
 800374c:	08003c8b 	.word	0x08003c8b
 8003750:	08003ca7 	.word	0x08003ca7
 8003754:	40012000 	.word	0x40012000
 8003758:	40012100 	.word	0x40012100
 800375c:	40012200 	.word	0x40012200

08003760 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x1c>
 800378c:	2302      	movs	r3, #2
 800378e:	e113      	b.n	80039b8 <HAL_ADC_ConfigChannel+0x244>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b09      	cmp	r3, #9
 800379e:	d925      	bls.n	80037ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68d9      	ldr	r1, [r3, #12]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	3b1e      	subs	r3, #30
 80037b6:	2207      	movs	r2, #7
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	43da      	mvns	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	400a      	ands	r2, r1
 80037c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	4618      	mov	r0, r3
 80037d8:	4603      	mov	r3, r0
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	4403      	add	r3, r0
 80037de:	3b1e      	subs	r3, #30
 80037e0:	409a      	lsls	r2, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	60da      	str	r2, [r3, #12]
 80037ea:	e022      	b.n	8003832 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6919      	ldr	r1, [r3, #16]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	2207      	movs	r2, #7
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	400a      	ands	r2, r1
 800380e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6919      	ldr	r1, [r3, #16]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	b29b      	uxth	r3, r3
 8003820:	4618      	mov	r0, r3
 8003822:	4603      	mov	r3, r0
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4403      	add	r3, r0
 8003828:	409a      	lsls	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b06      	cmp	r3, #6
 8003838:	d824      	bhi.n	8003884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	4413      	add	r3, r2
 800384a:	3b05      	subs	r3, #5
 800384c:	221f      	movs	r2, #31
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	400a      	ands	r2, r1
 800385a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	b29b      	uxth	r3, r3
 8003868:	4618      	mov	r0, r3
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	3b05      	subs	r3, #5
 8003876:	fa00 f203 	lsl.w	r2, r0, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	635a      	str	r2, [r3, #52]	; 0x34
 8003882:	e04c      	b.n	800391e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b0c      	cmp	r3, #12
 800388a:	d824      	bhi.n	80038d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	3b23      	subs	r3, #35	; 0x23
 800389e:	221f      	movs	r2, #31
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43da      	mvns	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	400a      	ands	r2, r1
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	3b23      	subs	r3, #35	; 0x23
 80038c8:	fa00 f203 	lsl.w	r2, r0, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
 80038d4:	e023      	b.n	800391e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	3b41      	subs	r3, #65	; 0x41
 80038e8:	221f      	movs	r2, #31
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43da      	mvns	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	400a      	ands	r2, r1
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	b29b      	uxth	r3, r3
 8003904:	4618      	mov	r0, r3
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	3b41      	subs	r3, #65	; 0x41
 8003912:	fa00 f203 	lsl.w	r2, r0, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800391e:	4b29      	ldr	r3, [pc, #164]	; (80039c4 <HAL_ADC_ConfigChannel+0x250>)
 8003920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_ADC_ConfigChannel+0x254>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d10f      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1d8>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b12      	cmp	r3, #18
 8003932:	d10b      	bne.n	800394c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <HAL_ADC_ConfigChannel+0x254>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d12b      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x23a>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <HAL_ADC_ConfigChannel+0x258>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d003      	beq.n	8003968 <HAL_ADC_ConfigChannel+0x1f4>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b11      	cmp	r3, #17
 8003966:	d122      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a11      	ldr	r2, [pc, #68]	; (80039cc <HAL_ADC_ConfigChannel+0x258>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <HAL_ADC_ConfigChannel+0x25c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a11      	ldr	r2, [pc, #68]	; (80039d4 <HAL_ADC_ConfigChannel+0x260>)
 8003990:	fba2 2303 	umull	r2, r3, r2, r3
 8003994:	0c9a      	lsrs	r2, r3, #18
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039a0:	e002      	b.n	80039a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f9      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3714      	adds	r7, #20
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	40012300 	.word	0x40012300
 80039c8:	40012000 	.word	0x40012000
 80039cc:	10000012 	.word	0x10000012
 80039d0:	20000010 	.word	0x20000010
 80039d4:	431bde83 	.word	0x431bde83

080039d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039e0:	4b79      	ldr	r3, [pc, #484]	; (8003bc8 <ADC_Init+0x1f0>)
 80039e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685a      	ldr	r2, [r3, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	021a      	lsls	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6859      	ldr	r1, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689a      	ldr	r2, [r3, #8]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6899      	ldr	r1, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6a:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <ADC_Init+0x1f4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d022      	beq.n	8003ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6899      	ldr	r1, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6899      	ldr	r1, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	e00f      	b.n	8003ad6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0202 	bic.w	r2, r2, #2
 8003ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6899      	ldr	r1, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	7e1b      	ldrb	r3, [r3, #24]
 8003af0:	005a      	lsls	r2, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d01b      	beq.n	8003b3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6859      	ldr	r1, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	035a      	lsls	r2, r3, #13
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	e007      	b.n	8003b4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	051a      	lsls	r2, r3, #20
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6899      	ldr	r1, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b8e:	025a      	lsls	r2, r3, #9
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6899      	ldr	r1, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	029a      	lsls	r2, r3, #10
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	40012300 	.word	0x40012300
 8003bcc:	0f000001 	.word	0x0f000001

08003bd0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13c      	bne.n	8003c64 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d12b      	bne.n	8003c5c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d127      	bne.n	8003c5c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d006      	beq.n	8003c28 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d119      	bne.n	8003c5c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0220 	bic.w	r2, r2, #32
 8003c36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	f043 0201 	orr.w	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7fe ff38 	bl	8002ad2 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c62:	e00e      	b.n	8003c82 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fd75 	bl	8003760 <HAL_ADC_ErrorCallback>
}
 8003c76:	e004      	b.n	8003c82 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	4798      	blx	r3
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7fe ff0f 	bl	8002abc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbe:	f043 0204 	orr.w	r2, r3, #4
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f7ff fd4a 	bl	8003760 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d06:	4a04      	ldr	r2, [pc, #16]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	60d3      	str	r3, [r2, #12]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <__NVIC_EnableIRQ+0x38>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e100 	.word	0xe000e100

08003d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db0a      	blt.n	8003d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	490c      	ldr	r1, [pc, #48]	; (8003dc0 <__NVIC_SetPriority+0x4c>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d9c:	e00a      	b.n	8003db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4908      	ldr	r1, [pc, #32]	; (8003dc4 <__NVIC_SetPriority+0x50>)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3b04      	subs	r3, #4
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	440b      	add	r3, r1
 8003db2:	761a      	strb	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000e100 	.word	0xe000e100
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f1c3 0307 	rsb	r3, r3, #7
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	bf28      	it	cs
 8003de6:	2304      	movcs	r3, #4
 8003de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d902      	bls.n	8003df8 <NVIC_EncodePriority+0x30>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3b03      	subs	r3, #3
 8003df6:	e000      	b.n	8003dfa <NVIC_EncodePriority+0x32>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e10:	f04f 31ff 	mov.w	r1, #4294967295
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43d9      	mvns	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e20:	4313      	orrs	r3, r2
         );
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e40:	d301      	bcc.n	8003e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <SysTick_Config+0x40>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e4e:	210f      	movs	r1, #15
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f7ff ff8e 	bl	8003d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <SysTick_Config+0x40>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <SysTick_Config+0x40>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	e000e010 	.word	0xe000e010

08003e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff29 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9c:	f7ff ff3e 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff8e 	bl	8003dc8 <NVIC_EncodePriority>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff5d 	bl	8003d74 <__NVIC_SetPriority>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff31 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff ffa2 	bl	8003e30 <SysTick_Config>
 8003eec:	4603      	mov	r3, r0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e014      	b.n	8003f32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	791b      	ldrb	r3, [r3, #4]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fe fedd 	bl	8002cd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	795b      	ldrb	r3, [r3, #5]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_DAC_Start+0x16>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e040      	b.n	8003fd2 <HAL_DAC_Start+0x98>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6819      	ldr	r1, [r3, #0]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2201      	movs	r2, #1
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003f84:	2b3c      	cmp	r3, #60	; 0x3c
 8003f86:	d11d      	bne.n	8003fc4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	e014      	b.n	8003fc4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	213c      	movs	r1, #60	; 0x3c
 8003fac:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d107      	bne.n	8003fc4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0202 	orr.w	r2, r2, #2
 8003fc2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d120      	bne.n	8004038 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004004:	d118      	bne.n	8004038 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2204      	movs	r2, #4
 800400a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004030:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 f852 	bl	80040dc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004046:	d120      	bne.n	800408a <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004056:	d118      	bne.n	800408a <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2204      	movs	r2, #4
 800405c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f882 	bl	800418e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800408a:	bf00      	nop
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004092:	b480      	push	{r7}
 8004094:	b087      	sub	sp, #28
 8004096:	af00      	add	r7, sp, #0
 8004098:	60f8      	str	r0, [r7, #12]
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d105      	bne.n	80040bc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	3308      	adds	r3, #8
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e004      	b.n	80040c6 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4413      	add	r3, r2
 80040c2:	3314      	adds	r3, #20
 80040c4:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	461a      	mov	r2, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b087      	sub	sp, #28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	795b      	ldrb	r3, [r3, #5]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_DAC_ConfigChannel+0x18>
 8004104:	2302      	movs	r3, #2
 8004106:	e03c      	b.n	8004182 <HAL_DAC_ConfigChannel+0x92>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2202      	movs	r2, #2
 8004112:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	43db      	mvns	r3, r3
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4013      	ands	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4313      	orrs	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	22c0      	movs	r2, #192	; 0xc0
 8004166:	fa02 f303 	lsl.w	r3, r2, r3
 800416a:	43da      	mvns	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	400a      	ands	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2201      	movs	r2, #1
 8004178:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7ff f880 	bl	80032b4 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e099      	b.n	80042f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0201 	bic.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041e0:	e00f      	b.n	8004202 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e2:	f7ff f867 	bl	80032b4 <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d908      	bls.n	8004202 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2203      	movs	r2, #3
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e078      	b.n	80042f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e8      	bne.n	80041e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4b38      	ldr	r3, [pc, #224]	; (80042fc <HAL_DMA_Init+0x158>)
 800421c:	4013      	ands	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800422e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800423a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004246:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	2b04      	cmp	r3, #4
 800425a:	d107      	bne.n	800426c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	4313      	orrs	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0307 	bic.w	r3, r3, #7
 8004282:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	2b04      	cmp	r3, #4
 8004294:	d117      	bne.n	80042c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00e      	beq.n	80042c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fa6f 	bl	800478c <DMA_CheckFifoParam>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2240      	movs	r2, #64	; 0x40
 80042b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042c2:	2301      	movs	r3, #1
 80042c4:	e016      	b.n	80042f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 fa26 	bl	8004720 <DMA_CalcBaseAndBitshift>
 80042d4:	4603      	mov	r3, r0
 80042d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	223f      	movs	r2, #63	; 0x3f
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	f010803f 	.word	0xf010803f

08004300 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800431e:	2b01      	cmp	r3, #1
 8004320:	d101      	bne.n	8004326 <HAL_DMA_Start_IT+0x26>
 8004322:	2302      	movs	r3, #2
 8004324:	e040      	b.n	80043a8 <HAL_DMA_Start_IT+0xa8>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b01      	cmp	r3, #1
 8004338:	d12f      	bne.n	800439a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f9b8 	bl	80046c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	223f      	movs	r2, #63	; 0x3f
 800435a:	409a      	lsls	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0216 	orr.w	r2, r2, #22
 800436e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	2b00      	cmp	r3, #0
 8004376:	d007      	beq.n	8004388 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0208 	orr.w	r2, r2, #8
 8004386:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	e005      	b.n	80043a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
 80043a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043bc:	4b92      	ldr	r3, [pc, #584]	; (8004608 <HAL_DMA_IRQHandler+0x258>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a92      	ldr	r2, [pc, #584]	; (800460c <HAL_DMA_IRQHandler+0x25c>)
 80043c2:	fba2 2303 	umull	r2, r3, r2, r3
 80043c6:	0a9b      	lsrs	r3, r3, #10
 80043c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	2208      	movs	r2, #8
 80043dc:	409a      	lsls	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d01a      	beq.n	800441c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d013      	beq.n	800441c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004408:	2208      	movs	r2, #8
 800440a:	409a      	lsls	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	f043 0201 	orr.w	r2, r3, #1
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	2201      	movs	r2, #1
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d012      	beq.n	8004452 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00b      	beq.n	8004452 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004456:	2204      	movs	r2, #4
 8004458:	409a      	lsls	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d012      	beq.n	8004488 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0302 	and.w	r3, r3, #2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	2204      	movs	r2, #4
 8004476:	409a      	lsls	r2, r3
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f043 0204 	orr.w	r2, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	2210      	movs	r2, #16
 800448e:	409a      	lsls	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4013      	ands	r3, r2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d043      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d03c      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044aa:	2210      	movs	r2, #16
 80044ac:	409a      	lsls	r2, r3
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d018      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d108      	bne.n	80044e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d024      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
 80044de:	e01f      	b.n	8004520 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e016      	b.n	8004520 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0208 	bic.w	r2, r2, #8
 800450e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004524:	2220      	movs	r2, #32
 8004526:	409a      	lsls	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 808e 	beq.w	800464e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0310 	and.w	r3, r3, #16
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8086 	beq.w	800464e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	2220      	movs	r2, #32
 8004548:	409a      	lsls	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b05      	cmp	r3, #5
 8004558:	d136      	bne.n	80045c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0216 	bic.w	r2, r2, #22
 8004568:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004578:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d103      	bne.n	800458a <HAL_DMA_IRQHandler+0x1da>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0208 	bic.w	r2, r2, #8
 8004598:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459e:	223f      	movs	r2, #63	; 0x3f
 80045a0:	409a      	lsls	r2, r3
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d07d      	beq.n	80046ba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
        }
        return;
 80045c6:	e078      	b.n	80046ba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01c      	beq.n	8004610 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d108      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d030      	beq.n	800464e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
 80045f4:	e02b      	b.n	800464e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d027      	beq.n	800464e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	4798      	blx	r3
 8004606:	e022      	b.n	800464e <HAL_DMA_IRQHandler+0x29e>
 8004608:	20000010 	.word	0x20000010
 800460c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 0210 	bic.w	r2, r2, #16
 800462c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	2b00      	cmp	r3, #0
 8004654:	d032      	beq.n	80046bc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d022      	beq.n	80046a8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2205      	movs	r2, #5
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f022 0201 	bic.w	r2, r2, #1
 8004678:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	3301      	adds	r3, #1
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	429a      	cmp	r2, r3
 8004684:	d307      	bcc.n	8004696 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f2      	bne.n	800467a <HAL_DMA_IRQHandler+0x2ca>
 8004694:	e000      	b.n	8004698 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004696:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
 80046b8:	e000      	b.n	80046bc <HAL_DMA_IRQHandler+0x30c>
        return;
 80046ba:	bf00      	nop
    }
  }
}
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop

080046c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d108      	bne.n	8004704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004702:	e007      	b.n	8004714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	3b10      	subs	r3, #16
 8004730:	4a14      	ldr	r2, [pc, #80]	; (8004784 <DMA_CalcBaseAndBitshift+0x64>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <DMA_CalcBaseAndBitshift+0x68>)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d909      	bls.n	8004762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004756:	f023 0303 	bic.w	r3, r3, #3
 800475a:	1d1a      	adds	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	659a      	str	r2, [r3, #88]	; 0x58
 8004760:	e007      	b.n	8004772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	aaaaaaab 	.word	0xaaaaaaab
 8004788:	0800c804 	.word	0x0800c804

0800478c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11f      	bne.n	80047e6 <DMA_CheckFifoParam+0x5a>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d856      	bhi.n	800485a <DMA_CheckFifoParam+0xce>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <DMA_CheckFifoParam+0x28>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	080047c5 	.word	0x080047c5
 80047b8:	080047d7 	.word	0x080047d7
 80047bc:	080047c5 	.word	0x080047c5
 80047c0:	0800485b 	.word	0x0800485b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d046      	beq.n	800485e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047d4:	e043      	b.n	800485e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047de:	d140      	bne.n	8004862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047e4:	e03d      	b.n	8004862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ee:	d121      	bne.n	8004834 <DMA_CheckFifoParam+0xa8>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d837      	bhi.n	8004866 <DMA_CheckFifoParam+0xda>
 80047f6:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <DMA_CheckFifoParam+0x70>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	0800480d 	.word	0x0800480d
 8004800:	08004813 	.word	0x08004813
 8004804:	0800480d 	.word	0x0800480d
 8004808:	08004825 	.word	0x08004825
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
      break;
 8004810:	e030      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d025      	beq.n	800486a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004822:	e022      	b.n	800486a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800482c:	d11f      	bne.n	800486e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004832:	e01c      	b.n	800486e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d903      	bls.n	8004842 <DMA_CheckFifoParam+0xb6>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b03      	cmp	r3, #3
 800483e:	d003      	beq.n	8004848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004840:	e018      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
      break;
 8004846:	e015      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00e      	beq.n	8004872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	e00b      	b.n	8004872 <DMA_CheckFifoParam+0xe6>
      break;
 800485a:	bf00      	nop
 800485c:	e00a      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 800485e:	bf00      	nop
 8004860:	e008      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004862:	bf00      	nop
 8004864:	e006      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004866:	bf00      	nop
 8004868:	e004      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;   
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <DMA_CheckFifoParam+0xe8>
      break;
 8004872:	bf00      	nop
    }
  } 
  
  return status; 
 8004874:	7bfb      	ldrb	r3, [r7, #15]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop

08004884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	; 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800488e:	2300      	movs	r3, #0
 8004890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
 800489e:	e165      	b.n	8004b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048a0:	2201      	movs	r2, #1
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	f040 8154 	bne.w	8004b66 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d005      	beq.n	80048d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d130      	bne.n	8004938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	2203      	movs	r2, #3
 80048e2:	fa02 f303 	lsl.w	r3, r2, r3
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	fa02 f303 	lsl.w	r3, r2, r3
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800490c:	2201      	movs	r2, #1
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0201 	and.w	r2, r3, #1
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0303 	and.w	r3, r3, #3
 8004940:	2b03      	cmp	r3, #3
 8004942:	d017      	beq.n	8004974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	2203      	movs	r2, #3
 8004950:	fa02 f303 	lsl.w	r3, r2, r3
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d123      	bne.n	80049c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	08da      	lsrs	r2, r3, #3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3208      	adds	r2, #8
 8004988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	220f      	movs	r2, #15
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43db      	mvns	r3, r3
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	4013      	ands	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	fa02 f303 	lsl.w	r3, r2, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	08da      	lsrs	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3208      	adds	r2, #8
 80049c2:	69b9      	ldr	r1, [r7, #24]
 80049c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	005b      	lsls	r3, r3, #1
 80049d2:	2203      	movs	r2, #3
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f003 0203 	and.w	r2, r3, #3
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 80ae 	beq.w	8004b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	4b5d      	ldr	r3, [pc, #372]	; (8004b84 <HAL_GPIO_Init+0x300>)
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	4a5c      	ldr	r2, [pc, #368]	; (8004b84 <HAL_GPIO_Init+0x300>)
 8004a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a18:	6453      	str	r3, [r2, #68]	; 0x44
 8004a1a:	4b5a      	ldr	r3, [pc, #360]	; (8004b84 <HAL_GPIO_Init+0x300>)
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a26:	4a58      	ldr	r2, [pc, #352]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4f      	ldr	r2, [pc, #316]	; (8004b8c <HAL_GPIO_Init+0x308>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d025      	beq.n	8004a9e <HAL_GPIO_Init+0x21a>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a4e      	ldr	r2, [pc, #312]	; (8004b90 <HAL_GPIO_Init+0x30c>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <HAL_GPIO_Init+0x216>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a4d      	ldr	r2, [pc, #308]	; (8004b94 <HAL_GPIO_Init+0x310>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d019      	beq.n	8004a96 <HAL_GPIO_Init+0x212>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a4c      	ldr	r2, [pc, #304]	; (8004b98 <HAL_GPIO_Init+0x314>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d013      	beq.n	8004a92 <HAL_GPIO_Init+0x20e>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a4b      	ldr	r2, [pc, #300]	; (8004b9c <HAL_GPIO_Init+0x318>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00d      	beq.n	8004a8e <HAL_GPIO_Init+0x20a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a4a      	ldr	r2, [pc, #296]	; (8004ba0 <HAL_GPIO_Init+0x31c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d007      	beq.n	8004a8a <HAL_GPIO_Init+0x206>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a49      	ldr	r2, [pc, #292]	; (8004ba4 <HAL_GPIO_Init+0x320>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d101      	bne.n	8004a86 <HAL_GPIO_Init+0x202>
 8004a82:	2306      	movs	r3, #6
 8004a84:	e00c      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a86:	2307      	movs	r3, #7
 8004a88:	e00a      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a8a:	2305      	movs	r3, #5
 8004a8c:	e008      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a8e:	2304      	movs	r3, #4
 8004a90:	e006      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a92:	2303      	movs	r3, #3
 8004a94:	e004      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a96:	2302      	movs	r3, #2
 8004a98:	e002      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_GPIO_Init+0x21c>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	f002 0203 	and.w	r2, r2, #3
 8004aa6:	0092      	lsls	r2, r2, #2
 8004aa8:	4093      	lsls	r3, r2
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ab0:	4935      	ldr	r1, [pc, #212]	; (8004b88 <HAL_GPIO_Init+0x304>)
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004abe:	4b3a      	ldr	r3, [pc, #232]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ae2:	4a31      	ldr	r2, [pc, #196]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ae8:	4b2f      	ldr	r3, [pc, #188]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	43db      	mvns	r3, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4013      	ands	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b0c:	4a26      	ldr	r2, [pc, #152]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b12:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b36:	4a1c      	ldr	r2, [pc, #112]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b60:	4a11      	ldr	r2, [pc, #68]	; (8004ba8 <HAL_GPIO_Init+0x324>)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	f67f ae96 	bls.w	80048a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	; 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40013800 	.word	0x40013800
 8004b8c:	40020000 	.word	0x40020000
 8004b90:	40020400 	.word	0x40020400
 8004b94:	40020800 	.word	0x40020800
 8004b98:	40020c00 	.word	0x40020c00
 8004b9c:	40021000 	.word	0x40021000
 8004ba0:	40021400 	.word	0x40021400
 8004ba4:	40021800 	.word	0x40021800
 8004ba8:	40013c00 	.word	0x40013c00

08004bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bbc:	787b      	ldrb	r3, [r7, #1]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc2:	887a      	ldrh	r2, [r7, #2]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc8:	e003      	b.n	8004bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	041a      	lsls	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	619a      	str	r2, [r3, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004bea:	4b08      	ldr	r3, [pc, #32]	; (8004c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bec:	695a      	ldr	r2, [r3, #20]
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d006      	beq.n	8004c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bf6:	4a05      	ldr	r2, [pc, #20]	; (8004c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bf8:	88fb      	ldrh	r3, [r7, #6]
 8004bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bfc:	88fb      	ldrh	r3, [r7, #6]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fd ff72 	bl	8002ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c04:	bf00      	nop
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40013c00 	.word	0x40013c00

08004c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e0cc      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c24:	4b68      	ldr	r3, [pc, #416]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d90c      	bls.n	8004c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c32:	4b65      	ldr	r3, [pc, #404]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3a:	4b63      	ldr	r3, [pc, #396]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d001      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e0b8      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c64:	4b59      	ldr	r3, [pc, #356]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a58      	ldr	r2, [pc, #352]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c7c:	4b53      	ldr	r3, [pc, #332]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a52      	ldr	r2, [pc, #328]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c88:	4b50      	ldr	r3, [pc, #320]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	494d      	ldr	r1, [pc, #308]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d044      	beq.n	8004d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d107      	bne.n	8004cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b47      	ldr	r3, [pc, #284]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d119      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e07f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d003      	beq.n	8004cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d107      	bne.n	8004cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b3f      	ldr	r3, [pc, #252]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e06f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cde:	4b3b      	ldr	r3, [pc, #236]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e067      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cee:	4b37      	ldr	r3, [pc, #220]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f023 0203 	bic.w	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4934      	ldr	r1, [pc, #208]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d00:	f7fe fad8 	bl	80032b4 <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	e00a      	b.n	8004d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d08:	f7fe fad4 	bl	80032b4 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e04f      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 020c 	and.w	r2, r3, #12
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d1eb      	bne.n	8004d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d30:	4b25      	ldr	r3, [pc, #148]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d20c      	bcs.n	8004d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3e:	4b22      	ldr	r3, [pc, #136]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	b2d2      	uxtb	r2, r2
 8004d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	683a      	ldr	r2, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d001      	beq.n	8004d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e032      	b.n	8004dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d64:	4b19      	ldr	r3, [pc, #100]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	4916      	ldr	r1, [pc, #88]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	490e      	ldr	r1, [pc, #56]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d96:	f000 f855 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	091b      	lsrs	r3, r3, #4
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	490a      	ldr	r1, [pc, #40]	; (8004dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004da8:	5ccb      	ldrb	r3, [r1, r3]
 8004daa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dae:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004db2:	4b09      	ldr	r3, [pc, #36]	; (8004dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fa38 	bl	800322c <HAL_InitTick>

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023c00 	.word	0x40023c00
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	0800c7ec 	.word	0x0800c7ec
 8004dd4:	20000010 	.word	0x20000010
 8004dd8:	20000014 	.word	0x20000014

08004ddc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de0:	4b03      	ldr	r3, [pc, #12]	; (8004df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de2:	681b      	ldr	r3, [r3, #0]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000010 	.word	0x20000010

08004df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df8:	f7ff fff0 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	0a9b      	lsrs	r3, r3, #10
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	4903      	ldr	r1, [pc, #12]	; (8004e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40023800 	.word	0x40023800
 8004e18:	0800c7fc 	.word	0x0800c7fc

08004e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e20:	f7ff ffdc 	bl	8004ddc <HAL_RCC_GetHCLKFreq>
 8004e24:	4602      	mov	r2, r0
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	0b5b      	lsrs	r3, r3, #13
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	4903      	ldr	r1, [pc, #12]	; (8004e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e32:	5ccb      	ldrb	r3, [r1, r3]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0800c7fc 	.word	0x0800c7fc

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e48:	b088      	sub	sp, #32
 8004e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e60:	4bce      	ldr	r3, [pc, #824]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030c 	and.w	r3, r3, #12
 8004e68:	2b0c      	cmp	r3, #12
 8004e6a:	f200 818d 	bhi.w	8005188 <HAL_RCC_GetSysClockFreq+0x344>
 8004e6e:	a201      	add	r2, pc, #4	; (adr r2, 8004e74 <HAL_RCC_GetSysClockFreq+0x30>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08005189 	.word	0x08005189
 8004e7c:	08005189 	.word	0x08005189
 8004e80:	08005189 	.word	0x08005189
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08005189 	.word	0x08005189
 8004e8c:	08005189 	.word	0x08005189
 8004e90:	08005189 	.word	0x08005189
 8004e94:	08004eb5 	.word	0x08004eb5
 8004e98:	08005189 	.word	0x08005189
 8004e9c:	08005189 	.word	0x08005189
 8004ea0:	08005189 	.word	0x08005189
 8004ea4:	08005029 	.word	0x08005029
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea8:	4bbd      	ldr	r3, [pc, #756]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004eaa:	61bb      	str	r3, [r7, #24]
       break;
 8004eac:	e16f      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eae:	4bbd      	ldr	r3, [pc, #756]	; (80051a4 <HAL_RCC_GetSysClockFreq+0x360>)
 8004eb0:	61bb      	str	r3, [r7, #24]
      break;
 8004eb2:	e16c      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb4:	4bb9      	ldr	r3, [pc, #740]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ebe:	4bb7      	ldr	r3, [pc, #732]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d053      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eca:	4bb4      	ldr	r3, [pc, #720]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	099b      	lsrs	r3, r3, #6
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	ea02 0400 	and.w	r4, r2, r0
 8004ee2:	603c      	str	r4, [r7, #0]
 8004ee4:	400b      	ands	r3, r1
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eec:	4620      	mov	r0, r4
 8004eee:	4629      	mov	r1, r5
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	014b      	lsls	r3, r1, #5
 8004efa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004efe:	0142      	lsls	r2, r0, #5
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	4623      	mov	r3, r4
 8004f06:	1ac0      	subs	r0, r0, r3
 8004f08:	462b      	mov	r3, r5
 8004f0a:	eb61 0103 	sbc.w	r1, r1, r3
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	018b      	lsls	r3, r1, #6
 8004f18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f1c:	0182      	lsls	r2, r0, #6
 8004f1e:	1a12      	subs	r2, r2, r0
 8004f20:	eb63 0301 	sbc.w	r3, r3, r1
 8004f24:	f04f 0000 	mov.w	r0, #0
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	00d9      	lsls	r1, r3, #3
 8004f2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f32:	00d0      	lsls	r0, r2, #3
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4621      	mov	r1, r4
 8004f3a:	1852      	adds	r2, r2, r1
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	eb43 0101 	adc.w	r1, r3, r1
 8004f42:	460b      	mov	r3, r1
 8004f44:	f04f 0000 	mov.w	r0, #0
 8004f48:	f04f 0100 	mov.w	r1, #0
 8004f4c:	0259      	lsls	r1, r3, #9
 8004f4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f52:	0250      	lsls	r0, r2, #9
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	f7fb fe90 	bl	8000c88 <__aeabi_uldivmod>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	e04c      	b.n	800500c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b8a      	ldr	r3, [pc, #552]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	461a      	mov	r2, r3
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	ea02 0a00 	and.w	sl, r2, r0
 8004f8a:	ea03 0b01 	and.w	fp, r3, r1
 8004f8e:	4650      	mov	r0, sl
 8004f90:	4659      	mov	r1, fp
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	014b      	lsls	r3, r1, #5
 8004f9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fa0:	0142      	lsls	r2, r0, #5
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	ebb0 000a 	subs.w	r0, r0, sl
 8004faa:	eb61 010b 	sbc.w	r1, r1, fp
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	018b      	lsls	r3, r1, #6
 8004fb8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004fbc:	0182      	lsls	r2, r0, #6
 8004fbe:	1a12      	subs	r2, r2, r0
 8004fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f04f 0100 	mov.w	r1, #0
 8004fcc:	00d9      	lsls	r1, r3, #3
 8004fce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004fd2:	00d0      	lsls	r0, r2, #3
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	eb12 020a 	adds.w	r2, r2, sl
 8004fdc:	eb43 030b 	adc.w	r3, r3, fp
 8004fe0:	f04f 0000 	mov.w	r0, #0
 8004fe4:	f04f 0100 	mov.w	r1, #0
 8004fe8:	0299      	lsls	r1, r3, #10
 8004fea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004fee:	0290      	lsls	r0, r2, #10
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	f7fb fe42 	bl	8000c88 <__aeabi_uldivmod>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4613      	mov	r3, r2
 800500a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800500c:	4b63      	ldr	r3, [pc, #396]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	0c1b      	lsrs	r3, r3, #16
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	3301      	adds	r3, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	61bb      	str	r3, [r7, #24]
      break;
 8005026:	e0b2      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005028:	4b5c      	ldr	r3, [pc, #368]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005030:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005032:	4b5a      	ldr	r3, [pc, #360]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d04d      	beq.n	80050da <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503e:	4b57      	ldr	r3, [pc, #348]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	099b      	lsrs	r3, r3, #6
 8005044:	461a      	mov	r2, r3
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800504e:	f04f 0100 	mov.w	r1, #0
 8005052:	ea02 0800 	and.w	r8, r2, r0
 8005056:	ea03 0901 	and.w	r9, r3, r1
 800505a:	4640      	mov	r0, r8
 800505c:	4649      	mov	r1, r9
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	014b      	lsls	r3, r1, #5
 8005068:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800506c:	0142      	lsls	r2, r0, #5
 800506e:	4610      	mov	r0, r2
 8005070:	4619      	mov	r1, r3
 8005072:	ebb0 0008 	subs.w	r0, r0, r8
 8005076:	eb61 0109 	sbc.w	r1, r1, r9
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	018b      	lsls	r3, r1, #6
 8005084:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005088:	0182      	lsls	r2, r0, #6
 800508a:	1a12      	subs	r2, r2, r0
 800508c:	eb63 0301 	sbc.w	r3, r3, r1
 8005090:	f04f 0000 	mov.w	r0, #0
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	00d9      	lsls	r1, r3, #3
 800509a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800509e:	00d0      	lsls	r0, r2, #3
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	eb12 0208 	adds.w	r2, r2, r8
 80050a8:	eb43 0309 	adc.w	r3, r3, r9
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	0259      	lsls	r1, r3, #9
 80050b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050ba:	0250      	lsls	r0, r2, #9
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f7fb fddc 	bl	8000c88 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e04a      	b.n	8005170 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050da:	4b30      	ldr	r3, [pc, #192]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	461a      	mov	r2, r3
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	ea02 0400 	and.w	r4, r2, r0
 80050f2:	ea03 0501 	and.w	r5, r3, r1
 80050f6:	4620      	mov	r0, r4
 80050f8:	4629      	mov	r1, r5
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	014b      	lsls	r3, r1, #5
 8005104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005108:	0142      	lsls	r2, r0, #5
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	1b00      	subs	r0, r0, r4
 8005110:	eb61 0105 	sbc.w	r1, r1, r5
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	018b      	lsls	r3, r1, #6
 800511e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005122:	0182      	lsls	r2, r0, #6
 8005124:	1a12      	subs	r2, r2, r0
 8005126:	eb63 0301 	sbc.w	r3, r3, r1
 800512a:	f04f 0000 	mov.w	r0, #0
 800512e:	f04f 0100 	mov.w	r1, #0
 8005132:	00d9      	lsls	r1, r3, #3
 8005134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005138:	00d0      	lsls	r0, r2, #3
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	1912      	adds	r2, r2, r4
 8005140:	eb45 0303 	adc.w	r3, r5, r3
 8005144:	f04f 0000 	mov.w	r0, #0
 8005148:	f04f 0100 	mov.w	r1, #0
 800514c:	0299      	lsls	r1, r3, #10
 800514e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005152:	0290      	lsls	r0, r2, #10
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4610      	mov	r0, r2
 800515a:	4619      	mov	r1, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	461a      	mov	r2, r3
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	f7fb fd90 	bl	8000c88 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4613      	mov	r3, r2
 800516e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <HAL_RCC_GetSysClockFreq+0x358>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	0f1b      	lsrs	r3, r3, #28
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800517c:	69fa      	ldr	r2, [r7, #28]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	fbb2 f3f3 	udiv	r3, r2, r3
 8005184:	61bb      	str	r3, [r7, #24]
      break;
 8005186:	e002      	b.n	800518e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005188:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800518a:	61bb      	str	r3, [r7, #24]
      break;
 800518c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800518e:	69bb      	ldr	r3, [r7, #24]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	007a1200 	.word	0x007a1200

080051a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d101      	bne.n	80051ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e28d      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8083 	beq.w	80052ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051c8:	4b94      	ldr	r3, [pc, #592]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 030c 	and.w	r3, r3, #12
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d019      	beq.n	8005208 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051d4:	4b91      	ldr	r3, [pc, #580]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d106      	bne.n	80051ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051e0:	4b8e      	ldr	r3, [pc, #568]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051ec:	d00c      	beq.n	8005208 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ee:	4b8b      	ldr	r3, [pc, #556]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d112      	bne.n	8005220 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051fa:	4b88      	ldr	r3, [pc, #544]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005206:	d10b      	bne.n	8005220 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005208:	4b84      	ldr	r3, [pc, #528]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d05b      	beq.n	80052cc <HAL_RCC_OscConfig+0x124>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d157      	bne.n	80052cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e25a      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005228:	d106      	bne.n	8005238 <HAL_RCC_OscConfig+0x90>
 800522a:	4b7c      	ldr	r3, [pc, #496]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a7b      	ldr	r2, [pc, #492]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005234:	6013      	str	r3, [r2, #0]
 8005236:	e01d      	b.n	8005274 <HAL_RCC_OscConfig+0xcc>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005240:	d10c      	bne.n	800525c <HAL_RCC_OscConfig+0xb4>
 8005242:	4b76      	ldr	r3, [pc, #472]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a75      	ldr	r2, [pc, #468]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b73      	ldr	r3, [pc, #460]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a72      	ldr	r2, [pc, #456]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	e00b      	b.n	8005274 <HAL_RCC_OscConfig+0xcc>
 800525c:	4b6f      	ldr	r3, [pc, #444]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a6e      	ldr	r2, [pc, #440]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	4b6c      	ldr	r3, [pc, #432]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a6b      	ldr	r2, [pc, #428]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800526e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d013      	beq.n	80052a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fe f81a 	bl	80032b4 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005284:	f7fe f816 	bl	80032b4 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b64      	cmp	r3, #100	; 0x64
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e21f      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005296:	4b61      	ldr	r3, [pc, #388]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f0      	beq.n	8005284 <HAL_RCC_OscConfig+0xdc>
 80052a2:	e014      	b.n	80052ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fe f806 	bl	80032b4 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ac:	f7fe f802 	bl	80032b4 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	; 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e20b      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052be:	4b57      	ldr	r3, [pc, #348]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1f0      	bne.n	80052ac <HAL_RCC_OscConfig+0x104>
 80052ca:	e000      	b.n	80052ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d06f      	beq.n	80053ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052da:	4b50      	ldr	r3, [pc, #320]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d017      	beq.n	8005316 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052e6:	4b4d      	ldr	r3, [pc, #308]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d105      	bne.n	80052fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80052f2:	4b4a      	ldr	r3, [pc, #296]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052fe:	4b47      	ldr	r3, [pc, #284]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005306:	2b0c      	cmp	r3, #12
 8005308:	d11c      	bne.n	8005344 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530a:	4b44      	ldr	r3, [pc, #272]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d116      	bne.n	8005344 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005316:	4b41      	ldr	r3, [pc, #260]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_RCC_OscConfig+0x186>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e1d3      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532e:	4b3b      	ldr	r3, [pc, #236]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4937      	ldr	r1, [pc, #220]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005342:	e03a      	b.n	80053ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800534c:	4b34      	ldr	r3, [pc, #208]	; (8005420 <HAL_RCC_OscConfig+0x278>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fd ffaf 	bl	80032b4 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535a:	f7fd ffab 	bl	80032b4 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e1b4      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536c:	4b2b      	ldr	r3, [pc, #172]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005378:	4b28      	ldr	r3, [pc, #160]	; (800541c <HAL_RCC_OscConfig+0x274>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4925      	ldr	r1, [pc, #148]	; (800541c <HAL_RCC_OscConfig+0x274>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
 800538c:	e015      	b.n	80053ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538e:	4b24      	ldr	r3, [pc, #144]	; (8005420 <HAL_RCC_OscConfig+0x278>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fd ff8e 	bl	80032b4 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800539c:	f7fd ff8a 	bl	80032b4 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e193      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	4b1b      	ldr	r3, [pc, #108]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d036      	beq.n	8005434 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ce:	4b15      	ldr	r3, [pc, #84]	; (8005424 <HAL_RCC_OscConfig+0x27c>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fd ff6e 	bl	80032b4 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053dc:	f7fd ff6a 	bl	80032b4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e173      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <HAL_RCC_OscConfig+0x274>)
 80053f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x234>
 80053fa:	e01b      	b.n	8005434 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053fc:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_RCC_OscConfig+0x27c>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fd ff57 	bl	80032b4 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005408:	e00e      	b.n	8005428 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800540a:	f7fd ff53 	bl	80032b4 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d907      	bls.n	8005428 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e15c      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
 800541c:	40023800 	.word	0x40023800
 8005420:	42470000 	.word	0x42470000
 8005424:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005428:	4b8a      	ldr	r3, [pc, #552]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 800542a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ea      	bne.n	800540a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8097 	beq.w	8005570 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005446:	4b83      	ldr	r3, [pc, #524]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10f      	bne.n	8005472 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	4b7f      	ldr	r3, [pc, #508]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a7e      	ldr	r2, [pc, #504]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 800545c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
 8005462:	4b7c      	ldr	r3, [pc, #496]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005472:	4b79      	ldr	r3, [pc, #484]	; (8005658 <HAL_RCC_OscConfig+0x4b0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d118      	bne.n	80054b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800547e:	4b76      	ldr	r3, [pc, #472]	; (8005658 <HAL_RCC_OscConfig+0x4b0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a75      	ldr	r2, [pc, #468]	; (8005658 <HAL_RCC_OscConfig+0x4b0>)
 8005484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800548a:	f7fd ff13 	bl	80032b4 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005490:	e008      	b.n	80054a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005492:	f7fd ff0f 	bl	80032b4 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	2b02      	cmp	r3, #2
 800549e:	d901      	bls.n	80054a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e118      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a4:	4b6c      	ldr	r3, [pc, #432]	; (8005658 <HAL_RCC_OscConfig+0x4b0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0f0      	beq.n	8005492 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d106      	bne.n	80054c6 <HAL_RCC_OscConfig+0x31e>
 80054b8:	4b66      	ldr	r3, [pc, #408]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054bc:	4a65      	ldr	r2, [pc, #404]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	6713      	str	r3, [r2, #112]	; 0x70
 80054c4:	e01c      	b.n	8005500 <HAL_RCC_OscConfig+0x358>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x340>
 80054ce:	4b61      	ldr	r3, [pc, #388]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d2:	4a60      	ldr	r2, [pc, #384]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054d4:	f043 0304 	orr.w	r3, r3, #4
 80054d8:	6713      	str	r3, [r2, #112]	; 0x70
 80054da:	4b5e      	ldr	r3, [pc, #376]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054e0:	f043 0301 	orr.w	r3, r3, #1
 80054e4:	6713      	str	r3, [r2, #112]	; 0x70
 80054e6:	e00b      	b.n	8005500 <HAL_RCC_OscConfig+0x358>
 80054e8:	4b5a      	ldr	r3, [pc, #360]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ec:	4a59      	ldr	r2, [pc, #356]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054ee:	f023 0301 	bic.w	r3, r3, #1
 80054f2:	6713      	str	r3, [r2, #112]	; 0x70
 80054f4:	4b57      	ldr	r3, [pc, #348]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f8:	4a56      	ldr	r2, [pc, #344]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80054fa:	f023 0304 	bic.w	r3, r3, #4
 80054fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d015      	beq.n	8005534 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fd fed4 	bl	80032b4 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800550e:	e00a      	b.n	8005526 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005510:	f7fd fed0 	bl	80032b4 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	f241 3288 	movw	r2, #5000	; 0x1388
 800551e:	4293      	cmp	r3, r2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e0d7      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005526:	4b4b      	ldr	r3, [pc, #300]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0ee      	beq.n	8005510 <HAL_RCC_OscConfig+0x368>
 8005532:	e014      	b.n	800555e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005534:	f7fd febe 	bl	80032b4 <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800553a:	e00a      	b.n	8005552 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800553c:	f7fd feba 	bl	80032b4 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	f241 3288 	movw	r2, #5000	; 0x1388
 800554a:	4293      	cmp	r3, r2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e0c1      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005552:	4b40      	ldr	r3, [pc, #256]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ee      	bne.n	800553c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800555e:	7dfb      	ldrb	r3, [r7, #23]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d105      	bne.n	8005570 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005564:	4b3b      	ldr	r3, [pc, #236]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	4a3a      	ldr	r2, [pc, #232]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 800556a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800556e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80ad 	beq.w	80056d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800557a:	4b36      	ldr	r3, [pc, #216]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b08      	cmp	r3, #8
 8005584:	d060      	beq.n	8005648 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	2b02      	cmp	r3, #2
 800558c:	d145      	bne.n	800561a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558e:	4b33      	ldr	r3, [pc, #204]	; (800565c <HAL_RCC_OscConfig+0x4b4>)
 8005590:	2200      	movs	r2, #0
 8005592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005594:	f7fd fe8e 	bl	80032b4 <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800559c:	f7fd fe8a 	bl	80032b4 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e093      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ae:	4b29      	ldr	r3, [pc, #164]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f0      	bne.n	800559c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	019b      	lsls	r3, r3, #6
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	085b      	lsrs	r3, r3, #1
 80055d2:	3b01      	subs	r3, #1
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	061b      	lsls	r3, r3, #24
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e4:	071b      	lsls	r3, r3, #28
 80055e6:	491b      	ldr	r1, [pc, #108]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ec:	4b1b      	ldr	r3, [pc, #108]	; (800565c <HAL_RCC_OscConfig+0x4b4>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f2:	f7fd fe5f 	bl	80032b4 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055fa:	f7fd fe5b 	bl	80032b4 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e064      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560c:	4b11      	ldr	r3, [pc, #68]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0f0      	beq.n	80055fa <HAL_RCC_OscConfig+0x452>
 8005618:	e05c      	b.n	80056d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <HAL_RCC_OscConfig+0x4b4>)
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fd fe48 	bl	80032b4 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005626:	e008      	b.n	800563a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005628:	f7fd fe44 	bl	80032b4 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e04d      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800563a:	4b06      	ldr	r3, [pc, #24]	; (8005654 <HAL_RCC_OscConfig+0x4ac>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x480>
 8005646:	e045      	b.n	80056d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d107      	bne.n	8005660 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e040      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
 8005654:	40023800 	.word	0x40023800
 8005658:	40007000 	.word	0x40007000
 800565c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005660:	4b1f      	ldr	r3, [pc, #124]	; (80056e0 <HAL_RCC_OscConfig+0x538>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d030      	beq.n	80056d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d129      	bne.n	80056d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005686:	429a      	cmp	r2, r3
 8005688:	d122      	bne.n	80056d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005690:	4013      	ands	r3, r2
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005696:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005698:	4293      	cmp	r3, r2
 800569a:	d119      	bne.n	80056d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	3b01      	subs	r3, #1
 80056aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d10f      	bne.n	80056d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056bc:	429a      	cmp	r2, r3
 80056be:	d107      	bne.n	80056d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e000      	b.n	80056d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40023800 	.word	0x40023800

080056e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e07b      	b.n	80057ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d108      	bne.n	8005710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d009      	beq.n	800571c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	61da      	str	r2, [r3, #28]
 800570e:	e005      	b.n	800571c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fd fb1a 	bl	8002d70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005752:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005764:	431a      	orrs	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	ea42 0103 	orr.w	r1, r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	f003 0104 	and.w	r1, r3, #4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	f003 0210 	and.w	r2, r3, #16
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	430a      	orrs	r2, r1
 80057cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b088      	sub	sp, #32
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_SPI_Transmit+0x22>
 8005814:	2302      	movs	r3, #2
 8005816:	e126      	b.n	8005a66 <HAL_SPI_Transmit+0x270>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005820:	f7fd fd48 	bl	80032b4 <HAL_GetTick>
 8005824:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005826:	88fb      	ldrh	r3, [r7, #6]
 8005828:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b01      	cmp	r3, #1
 8005834:	d002      	beq.n	800583c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005836:	2302      	movs	r3, #2
 8005838:	77fb      	strb	r3, [r7, #31]
    goto error;
 800583a:	e10b      	b.n	8005a54 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Transmit+0x52>
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d102      	bne.n	800584e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800584c:	e102      	b.n	8005a54 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2203      	movs	r2, #3
 8005852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005894:	d10f      	bne.n	80058b6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d007      	beq.n	80058d4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058dc:	d14b      	bne.n	8005976 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Transmit+0xf6>
 80058e6:	8afb      	ldrh	r3, [r7, #22]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d13e      	bne.n	800596a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	881a      	ldrh	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058fc:	1c9a      	adds	r2, r3, #2
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005906:	b29b      	uxth	r3, r3
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005910:	e02b      	b.n	800596a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b02      	cmp	r3, #2
 800591e:	d112      	bne.n	8005946 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	881a      	ldrh	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	1c9a      	adds	r2, r3, #2
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	86da      	strh	r2, [r3, #54]	; 0x36
 8005944:	e011      	b.n	800596a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005946:	f7fd fcb5 	bl	80032b4 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	429a      	cmp	r2, r3
 8005954:	d803      	bhi.n	800595e <HAL_SPI_Transmit+0x168>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d102      	bne.n	8005964 <HAL_SPI_Transmit+0x16e>
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d102      	bne.n	800596a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005968:	e074      	b.n	8005a54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800596e:	b29b      	uxth	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1ce      	bne.n	8005912 <HAL_SPI_Transmit+0x11c>
 8005974:	e04c      	b.n	8005a10 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <HAL_SPI_Transmit+0x18e>
 800597e:	8afb      	ldrh	r3, [r7, #22]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d140      	bne.n	8005a06 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b01      	subs	r3, #1
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059aa:	e02c      	b.n	8005a06 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d113      	bne.n	80059e2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	86da      	strh	r2, [r3, #54]	; 0x36
 80059e0:	e011      	b.n	8005a06 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059e2:	f7fd fc67 	bl	80032b4 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d803      	bhi.n	80059fa <HAL_SPI_Transmit+0x204>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f8:	d102      	bne.n	8005a00 <HAL_SPI_Transmit+0x20a>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d102      	bne.n	8005a06 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a04:	e026      	b.n	8005a54 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1cd      	bne.n	80059ac <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fa55 	bl	8005ec4 <SPI_EndRxTxTransaction>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e000      	b.n	8005a54 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005a52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3720      	adds	r7, #32
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08c      	sub	sp, #48	; 0x30
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x26>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e18a      	b.n	8005daa <HAL_SPI_TransmitReceive+0x33c>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a9c:	f7fd fc0a 	bl	80032b4 <HAL_GetTick>
 8005aa0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ab2:	887b      	ldrh	r3, [r7, #2]
 8005ab4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d00f      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x70>
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ac4:	d107      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x68>
 8005ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d003      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005adc:	e15b      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x82>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_SPI_TransmitReceive+0x82>
 8005aea:	887b      	ldrh	r3, [r7, #2]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d103      	bne.n	8005af8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005af6:	e14e      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b04      	cmp	r3, #4
 8005b02:	d003      	beq.n	8005b0c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2205      	movs	r2, #5
 8005b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	887a      	ldrh	r2, [r7, #2]
 8005b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	887a      	ldrh	r2, [r7, #2]
 8005b2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	887a      	ldrh	r2, [r7, #2]
 8005b34:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d007      	beq.n	8005b60 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b68:	d178      	bne.n	8005c5c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d002      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0x10a>
 8005b72:	8b7b      	ldrh	r3, [r7, #26]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d166      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	881a      	ldrh	r2, [r3, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	1c9a      	adds	r2, r3, #2
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b9c:	e053      	b.n	8005c46 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d11b      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x176>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x176>
 8005bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d113      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	881a      	ldrh	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bcc:	1c9a      	adds	r2, r3, #2
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d119      	bne.n	8005c26 <HAL_SPI_TransmitReceive+0x1b8>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d014      	beq.n	8005c26 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	b292      	uxth	r2, r2
 8005c08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c22:	2301      	movs	r3, #1
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c26:	f7fd fb45 	bl	80032b4 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d807      	bhi.n	8005c46 <HAL_SPI_TransmitReceive+0x1d8>
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d003      	beq.n	8005c46 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c44:	e0a7      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1a6      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x130>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1a1      	bne.n	8005b9e <HAL_SPI_TransmitReceive+0x130>
 8005c5a:	e07c      	b.n	8005d56 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <HAL_SPI_TransmitReceive+0x1fc>
 8005c64:	8b7b      	ldrh	r3, [r7, #26]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d16b      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	7812      	ldrb	r2, [r2, #0]
 8005c76:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c90:	e057      	b.n	8005d42 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d11c      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x26c>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d017      	beq.n	8005cda <HAL_SPI_TransmitReceive+0x26c>
 8005caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d114      	bne.n	8005cda <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	7812      	ldrb	r2, [r2, #0]
 8005cbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d119      	bne.n	8005d1c <HAL_SPI_TransmitReceive+0x2ae>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d014      	beq.n	8005d1c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d1c:	f7fd faca 	bl	80032b4 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d803      	bhi.n	8005d34 <HAL_SPI_TransmitReceive+0x2c6>
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d102      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x2cc>
 8005d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d103      	bne.n	8005d42 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d40:	e029      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1a2      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x224>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d19d      	bne.n	8005c92 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 f8b2 	bl	8005ec4 <SPI_EndRxTxTransaction>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d006      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d72:	e010      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	e000      	b.n	8005d96 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d94:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005da6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005dc4:	f7fd fa76 	bl	80032b4 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	1a9b      	subs	r3, r3, r2
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dd4:	f7fd fa6e 	bl	80032b4 <HAL_GetTick>
 8005dd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dda:	4b39      	ldr	r3, [pc, #228]	; (8005ec0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	0d1b      	lsrs	r3, r3, #20
 8005de2:	69fa      	ldr	r2, [r7, #28]
 8005de4:	fb02 f303 	mul.w	r3, r2, r3
 8005de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dea:	e054      	b.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d050      	beq.n	8005e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005df4:	f7fd fa5e 	bl	80032b4 <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d902      	bls.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d13d      	bne.n	8005e86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e22:	d111      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e2c:	d004      	beq.n	8005e38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e36:	d107      	bne.n	8005e48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e50:	d10f      	bne.n	8005e72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e017      	b.n	8005eb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	bf0c      	ite	eq
 8005ea6:	2301      	moveq	r3, #1
 8005ea8:	2300      	movne	r3, #0
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d19b      	bne.n	8005dec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3720      	adds	r7, #32
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000010 	.word	0x20000010

08005ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b088      	sub	sp, #32
 8005ec8:	af02      	add	r7, sp, #8
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <SPI_EndRxTxTransaction+0x7c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <SPI_EndRxTxTransaction+0x80>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	0d5b      	lsrs	r3, r3, #21
 8005edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ee0:	fb02 f303 	mul.w	r3, r2, r3
 8005ee4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eee:	d112      	bne.n	8005f16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	2180      	movs	r1, #128	; 0x80
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff ff5a 	bl	8005db4 <SPI_WaitFlagStateUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f0a:	f043 0220 	orr.w	r2, r3, #32
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e00f      	b.n	8005f36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f2c:	2b80      	cmp	r3, #128	; 0x80
 8005f2e:	d0f2      	beq.n	8005f16 <SPI_EndRxTxTransaction+0x52>
 8005f30:	e000      	b.n	8005f34 <SPI_EndRxTxTransaction+0x70>
        break;
 8005f32:	bf00      	nop
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000010 	.word	0x20000010
 8005f44:	165e9f81 	.word	0x165e9f81

08005f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e041      	b.n	8005fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fc ff46 	bl	8002e00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f000 f9ce 	bl	8006328 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e04e      	b.n	800609e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a23      	ldr	r2, [pc, #140]	; (80060ac <HAL_TIM_Base_Start_IT+0xc4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d022      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602a:	d01d      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d018      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a1e      	ldr	r2, [pc, #120]	; (80060b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d013      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1b      	ldr	r2, [pc, #108]	; (80060bc <HAL_TIM_Base_Start_IT+0xd4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d009      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIM_Base_Start_IT+0x80>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d111      	bne.n	800608c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b06      	cmp	r3, #6
 8006078:	d010      	beq.n	800609c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f042 0201 	orr.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800608a:	e007      	b.n	800609c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40000400 	.word	0x40000400
 80060b4:	40000800 	.word	0x40000800
 80060b8:	40000c00 	.word	0x40000c00
 80060bc:	40010400 	.word	0x40010400
 80060c0:	40014000 	.word	0x40014000
 80060c4:	40001800 	.word	0x40001800

080060c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d122      	bne.n	8006124 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d11b      	bne.n	8006124 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0202 	mvn.w	r2, #2
 80060f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f8ee 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8006110:	e005      	b.n	800611e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f8e0 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f8f1 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b04      	cmp	r3, #4
 8006130:	d122      	bne.n	8006178 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b04      	cmp	r3, #4
 800613e:	d11b      	bne.n	8006178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0204 	mvn.w	r2, #4
 8006148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f8c4 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 8006164:	e005      	b.n	8006172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8b6 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8c7 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b08      	cmp	r3, #8
 8006184:	d122      	bne.n	80061cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0308 	and.w	r3, r3, #8
 8006190:	2b08      	cmp	r3, #8
 8006192:	d11b      	bne.n	80061cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0208 	mvn.w	r2, #8
 800619c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2204      	movs	r2, #4
 80061a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f89a 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 80061b8:	e005      	b.n	80061c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f88c 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f89d 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	f003 0310 	and.w	r3, r3, #16
 80061d6:	2b10      	cmp	r3, #16
 80061d8:	d122      	bne.n	8006220 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	f003 0310 	and.w	r3, r3, #16
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d11b      	bne.n	8006220 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0210 	mvn.w	r2, #16
 80061f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2208      	movs	r2, #8
 80061f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f870 	bl	80062ec <HAL_TIM_IC_CaptureCallback>
 800620c:	e005      	b.n	800621a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f862 	bl	80062d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 f873 	bl	8006300 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	2b01      	cmp	r3, #1
 800622c:	d10e      	bne.n	800624c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b01      	cmp	r3, #1
 800623a:	d107      	bne.n	800624c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f06f 0201 	mvn.w	r2, #1
 8006244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb ff5c 	bl	8002104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	d10e      	bne.n	8006278 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006264:	2b80      	cmp	r3, #128	; 0x80
 8006266:	d107      	bne.n	8006278 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f97e 	bl	8006574 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d10e      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d107      	bne.n	80062a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800629c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f838 	bl	8006314 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d10e      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f003 0320 	and.w	r3, r3, #32
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d107      	bne.n	80062d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f06f 0220 	mvn.w	r2, #32
 80062c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f948 	bl	8006560 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a40      	ldr	r2, [pc, #256]	; (800643c <TIM_Base_SetConfig+0x114>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d013      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d00f      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a3d      	ldr	r2, [pc, #244]	; (8006440 <TIM_Base_SetConfig+0x118>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3c      	ldr	r2, [pc, #240]	; (8006444 <TIM_Base_SetConfig+0x11c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3b      	ldr	r2, [pc, #236]	; (8006448 <TIM_Base_SetConfig+0x120>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3a      	ldr	r2, [pc, #232]	; (800644c <TIM_Base_SetConfig+0x124>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d108      	bne.n	800637a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a2f      	ldr	r2, [pc, #188]	; (800643c <TIM_Base_SetConfig+0x114>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d02b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006388:	d027      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2c      	ldr	r2, [pc, #176]	; (8006440 <TIM_Base_SetConfig+0x118>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d023      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2b      	ldr	r2, [pc, #172]	; (8006444 <TIM_Base_SetConfig+0x11c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d01f      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <TIM_Base_SetConfig+0x120>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a29      	ldr	r2, [pc, #164]	; (800644c <TIM_Base_SetConfig+0x124>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d017      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a28      	ldr	r2, [pc, #160]	; (8006450 <TIM_Base_SetConfig+0x128>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d013      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a27      	ldr	r2, [pc, #156]	; (8006454 <TIM_Base_SetConfig+0x12c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00f      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a26      	ldr	r2, [pc, #152]	; (8006458 <TIM_Base_SetConfig+0x130>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00b      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a25      	ldr	r2, [pc, #148]	; (800645c <TIM_Base_SetConfig+0x134>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d007      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a24      	ldr	r2, [pc, #144]	; (8006460 <TIM_Base_SetConfig+0x138>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d003      	beq.n	80063da <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <TIM_Base_SetConfig+0x13c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d108      	bne.n	80063ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a0a      	ldr	r2, [pc, #40]	; (800643c <TIM_Base_SetConfig+0x114>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0xf8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a0c      	ldr	r2, [pc, #48]	; (800644c <TIM_Base_SetConfig+0x124>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d103      	bne.n	8006428 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	615a      	str	r2, [r3, #20]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40010000 	.word	0x40010000
 8006440:	40000400 	.word	0x40000400
 8006444:	40000800 	.word	0x40000800
 8006448:	40000c00 	.word	0x40000c00
 800644c:	40010400 	.word	0x40010400
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800
 800645c:	40001800 	.word	0x40001800
 8006460:	40001c00 	.word	0x40001c00
 8006464:	40002000 	.word	0x40002000

08006468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800647c:	2302      	movs	r3, #2
 800647e:	e05a      	b.n	8006536 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68fa      	ldr	r2, [r7, #12]
 80064b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a21      	ldr	r2, [pc, #132]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d022      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064cc:	d01d      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1d      	ldr	r2, [pc, #116]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1b      	ldr	r2, [pc, #108]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d013      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a17      	ldr	r2, [pc, #92]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a15      	ldr	r2, [pc, #84]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d10c      	bne.n	8006524 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4313      	orrs	r3, r2
 800651a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40010400 	.word	0x40010400
 8006558:	40014000 	.word	0x40014000
 800655c:	40001800 	.word	0x40001800

08006560 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e03f      	b.n	800661a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f7fc fc4e 	bl	8002e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2224      	movs	r2, #36	; 0x24
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f829 	bl	8006624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691a      	ldr	r2, [r3, #16]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695a      	ldr	r2, [r3, #20]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006600:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	b09f      	sub	sp, #124	; 0x7c
 800662a:	af00      	add	r7, sp, #0
 800662c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800662e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006638:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663a:	68d9      	ldr	r1, [r3, #12]
 800663c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	ea40 0301 	orr.w	r3, r0, r1
 8006644:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	431a      	orrs	r2, r3
 8006650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	431a      	orrs	r2, r3
 8006656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	4313      	orrs	r3, r2
 800665c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800665e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006668:	f021 010c 	bic.w	r1, r1, #12
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006672:	430b      	orrs	r3, r1
 8006674:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006682:	6999      	ldr	r1, [r3, #24]
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	ea40 0301 	orr.w	r3, r0, r1
 800668c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800668e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4bc5      	ldr	r3, [pc, #788]	; (80069a8 <UART_SetConfig+0x384>)
 8006694:	429a      	cmp	r2, r3
 8006696:	d004      	beq.n	80066a2 <UART_SetConfig+0x7e>
 8006698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	4bc3      	ldr	r3, [pc, #780]	; (80069ac <UART_SetConfig+0x388>)
 800669e:	429a      	cmp	r2, r3
 80066a0:	d103      	bne.n	80066aa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066a2:	f7fe fbbb 	bl	8004e1c <HAL_RCC_GetPCLK2Freq>
 80066a6:	6778      	str	r0, [r7, #116]	; 0x74
 80066a8:	e002      	b.n	80066b0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066aa:	f7fe fba3 	bl	8004df4 <HAL_RCC_GetPCLK1Freq>
 80066ae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066b8:	f040 80b6 	bne.w	8006828 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066be:	461c      	mov	r4, r3
 80066c0:	f04f 0500 	mov.w	r5, #0
 80066c4:	4622      	mov	r2, r4
 80066c6:	462b      	mov	r3, r5
 80066c8:	1891      	adds	r1, r2, r2
 80066ca:	6439      	str	r1, [r7, #64]	; 0x40
 80066cc:	415b      	adcs	r3, r3
 80066ce:	647b      	str	r3, [r7, #68]	; 0x44
 80066d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066d4:	1912      	adds	r2, r2, r4
 80066d6:	eb45 0303 	adc.w	r3, r5, r3
 80066da:	f04f 0000 	mov.w	r0, #0
 80066de:	f04f 0100 	mov.w	r1, #0
 80066e2:	00d9      	lsls	r1, r3, #3
 80066e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066e8:	00d0      	lsls	r0, r2, #3
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	1911      	adds	r1, r2, r4
 80066f0:	6639      	str	r1, [r7, #96]	; 0x60
 80066f2:	416b      	adcs	r3, r5
 80066f4:	667b      	str	r3, [r7, #100]	; 0x64
 80066f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	1891      	adds	r1, r2, r2
 8006702:	63b9      	str	r1, [r7, #56]	; 0x38
 8006704:	415b      	adcs	r3, r3
 8006706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800670c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006710:	f7fa faba 	bl	8000c88 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4ba5      	ldr	r3, [pc, #660]	; (80069b0 <UART_SetConfig+0x38c>)
 800671a:	fba3 2302 	umull	r2, r3, r3, r2
 800671e:	095b      	lsrs	r3, r3, #5
 8006720:	011e      	lsls	r6, r3, #4
 8006722:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006724:	461c      	mov	r4, r3
 8006726:	f04f 0500 	mov.w	r5, #0
 800672a:	4622      	mov	r2, r4
 800672c:	462b      	mov	r3, r5
 800672e:	1891      	adds	r1, r2, r2
 8006730:	6339      	str	r1, [r7, #48]	; 0x30
 8006732:	415b      	adcs	r3, r3
 8006734:	637b      	str	r3, [r7, #52]	; 0x34
 8006736:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800673a:	1912      	adds	r2, r2, r4
 800673c:	eb45 0303 	adc.w	r3, r5, r3
 8006740:	f04f 0000 	mov.w	r0, #0
 8006744:	f04f 0100 	mov.w	r1, #0
 8006748:	00d9      	lsls	r1, r3, #3
 800674a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800674e:	00d0      	lsls	r0, r2, #3
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	1911      	adds	r1, r2, r4
 8006756:	65b9      	str	r1, [r7, #88]	; 0x58
 8006758:	416b      	adcs	r3, r5
 800675a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800675c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	461a      	mov	r2, r3
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	1891      	adds	r1, r2, r2
 8006768:	62b9      	str	r1, [r7, #40]	; 0x28
 800676a:	415b      	adcs	r3, r3
 800676c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800676e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006772:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006776:	f7fa fa87 	bl	8000c88 <__aeabi_uldivmod>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4b8c      	ldr	r3, [pc, #560]	; (80069b0 <UART_SetConfig+0x38c>)
 8006780:	fba3 1302 	umull	r1, r3, r3, r2
 8006784:	095b      	lsrs	r3, r3, #5
 8006786:	2164      	movs	r1, #100	; 0x64
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	3332      	adds	r3, #50	; 0x32
 8006792:	4a87      	ldr	r2, [pc, #540]	; (80069b0 <UART_SetConfig+0x38c>)
 8006794:	fba2 2303 	umull	r2, r3, r2, r3
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067a0:	441e      	add	r6, r3
 80067a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067a4:	4618      	mov	r0, r3
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	1894      	adds	r4, r2, r2
 80067b0:	623c      	str	r4, [r7, #32]
 80067b2:	415b      	adcs	r3, r3
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
 80067b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ba:	1812      	adds	r2, r2, r0
 80067bc:	eb41 0303 	adc.w	r3, r1, r3
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	f04f 0500 	mov.w	r5, #0
 80067c8:	00dd      	lsls	r5, r3, #3
 80067ca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067ce:	00d4      	lsls	r4, r2, #3
 80067d0:	4622      	mov	r2, r4
 80067d2:	462b      	mov	r3, r5
 80067d4:	1814      	adds	r4, r2, r0
 80067d6:	653c      	str	r4, [r7, #80]	; 0x50
 80067d8:	414b      	adcs	r3, r1
 80067da:	657b      	str	r3, [r7, #84]	; 0x54
 80067dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	1891      	adds	r1, r2, r2
 80067e8:	61b9      	str	r1, [r7, #24]
 80067ea:	415b      	adcs	r3, r3
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067f2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80067f6:	f7fa fa47 	bl	8000c88 <__aeabi_uldivmod>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	4b6c      	ldr	r3, [pc, #432]	; (80069b0 <UART_SetConfig+0x38c>)
 8006800:	fba3 1302 	umull	r1, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	2164      	movs	r1, #100	; 0x64
 8006808:	fb01 f303 	mul.w	r3, r1, r3
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	3332      	adds	r3, #50	; 0x32
 8006812:	4a67      	ldr	r2, [pc, #412]	; (80069b0 <UART_SetConfig+0x38c>)
 8006814:	fba2 2303 	umull	r2, r3, r2, r3
 8006818:	095b      	lsrs	r3, r3, #5
 800681a:	f003 0207 	and.w	r2, r3, #7
 800681e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4432      	add	r2, r6
 8006824:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006826:	e0b9      	b.n	800699c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800682a:	461c      	mov	r4, r3
 800682c:	f04f 0500 	mov.w	r5, #0
 8006830:	4622      	mov	r2, r4
 8006832:	462b      	mov	r3, r5
 8006834:	1891      	adds	r1, r2, r2
 8006836:	6139      	str	r1, [r7, #16]
 8006838:	415b      	adcs	r3, r3
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006840:	1912      	adds	r2, r2, r4
 8006842:	eb45 0303 	adc.w	r3, r5, r3
 8006846:	f04f 0000 	mov.w	r0, #0
 800684a:	f04f 0100 	mov.w	r1, #0
 800684e:	00d9      	lsls	r1, r3, #3
 8006850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006854:	00d0      	lsls	r0, r2, #3
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	eb12 0804 	adds.w	r8, r2, r4
 800685e:	eb43 0905 	adc.w	r9, r3, r5
 8006862:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4618      	mov	r0, r3
 8006868:	f04f 0100 	mov.w	r1, #0
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	008b      	lsls	r3, r1, #2
 8006876:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800687a:	0082      	lsls	r2, r0, #2
 800687c:	4640      	mov	r0, r8
 800687e:	4649      	mov	r1, r9
 8006880:	f7fa fa02 	bl	8000c88 <__aeabi_uldivmod>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	4b49      	ldr	r3, [pc, #292]	; (80069b0 <UART_SetConfig+0x38c>)
 800688a:	fba3 2302 	umull	r2, r3, r3, r2
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	011e      	lsls	r6, r3, #4
 8006892:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006894:	4618      	mov	r0, r3
 8006896:	f04f 0100 	mov.w	r1, #0
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	1894      	adds	r4, r2, r2
 80068a0:	60bc      	str	r4, [r7, #8]
 80068a2:	415b      	adcs	r3, r3
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068aa:	1812      	adds	r2, r2, r0
 80068ac:	eb41 0303 	adc.w	r3, r1, r3
 80068b0:	f04f 0400 	mov.w	r4, #0
 80068b4:	f04f 0500 	mov.w	r5, #0
 80068b8:	00dd      	lsls	r5, r3, #3
 80068ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068be:	00d4      	lsls	r4, r2, #3
 80068c0:	4622      	mov	r2, r4
 80068c2:	462b      	mov	r3, r5
 80068c4:	1814      	adds	r4, r2, r0
 80068c6:	64bc      	str	r4, [r7, #72]	; 0x48
 80068c8:	414b      	adcs	r3, r1
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f04f 0100 	mov.w	r1, #0
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	008b      	lsls	r3, r1, #2
 80068e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068e4:	0082      	lsls	r2, r0, #2
 80068e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80068ea:	f7fa f9cd 	bl	8000c88 <__aeabi_uldivmod>
 80068ee:	4602      	mov	r2, r0
 80068f0:	460b      	mov	r3, r1
 80068f2:	4b2f      	ldr	r3, [pc, #188]	; (80069b0 <UART_SetConfig+0x38c>)
 80068f4:	fba3 1302 	umull	r1, r3, r3, r2
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	2164      	movs	r1, #100	; 0x64
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	3332      	adds	r3, #50	; 0x32
 8006906:	4a2a      	ldr	r2, [pc, #168]	; (80069b0 <UART_SetConfig+0x38c>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006912:	441e      	add	r6, r3
 8006914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006916:	4618      	mov	r0, r3
 8006918:	f04f 0100 	mov.w	r1, #0
 800691c:	4602      	mov	r2, r0
 800691e:	460b      	mov	r3, r1
 8006920:	1894      	adds	r4, r2, r2
 8006922:	603c      	str	r4, [r7, #0]
 8006924:	415b      	adcs	r3, r3
 8006926:	607b      	str	r3, [r7, #4]
 8006928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692c:	1812      	adds	r2, r2, r0
 800692e:	eb41 0303 	adc.w	r3, r1, r3
 8006932:	f04f 0400 	mov.w	r4, #0
 8006936:	f04f 0500 	mov.w	r5, #0
 800693a:	00dd      	lsls	r5, r3, #3
 800693c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006940:	00d4      	lsls	r4, r2, #3
 8006942:	4622      	mov	r2, r4
 8006944:	462b      	mov	r3, r5
 8006946:	eb12 0a00 	adds.w	sl, r2, r0
 800694a:	eb43 0b01 	adc.w	fp, r3, r1
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	4618      	mov	r0, r3
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	008b      	lsls	r3, r1, #2
 8006962:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006966:	0082      	lsls	r2, r0, #2
 8006968:	4650      	mov	r0, sl
 800696a:	4659      	mov	r1, fp
 800696c:	f7fa f98c 	bl	8000c88 <__aeabi_uldivmod>
 8006970:	4602      	mov	r2, r0
 8006972:	460b      	mov	r3, r1
 8006974:	4b0e      	ldr	r3, [pc, #56]	; (80069b0 <UART_SetConfig+0x38c>)
 8006976:	fba3 1302 	umull	r1, r3, r3, r2
 800697a:	095b      	lsrs	r3, r3, #5
 800697c:	2164      	movs	r1, #100	; 0x64
 800697e:	fb01 f303 	mul.w	r3, r1, r3
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	3332      	adds	r3, #50	; 0x32
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <UART_SetConfig+0x38c>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	095b      	lsrs	r3, r3, #5
 8006990:	f003 020f 	and.w	r2, r3, #15
 8006994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4432      	add	r2, r6
 800699a:	609a      	str	r2, [r3, #8]
}
 800699c:	bf00      	nop
 800699e:	377c      	adds	r7, #124	; 0x7c
 80069a0:	46bd      	mov	sp, r7
 80069a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a6:	bf00      	nop
 80069a8:	40011000 	.word	0x40011000
 80069ac:	40011400 	.word	0x40011400
 80069b0:	51eb851f 	.word	0x51eb851f

080069b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80069b8:	4904      	ldr	r1, [pc, #16]	; (80069cc <MX_FATFS_Init+0x18>)
 80069ba:	4805      	ldr	r0, [pc, #20]	; (80069d0 <MX_FATFS_Init+0x1c>)
 80069bc:	f002 ffba 	bl	8009934 <FATFS_LinkDriver>
 80069c0:	4603      	mov	r3, r0
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b03      	ldr	r3, [pc, #12]	; (80069d4 <MX_FATFS_Init+0x20>)
 80069c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80069c8:	bf00      	nop
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20002984 	.word	0x20002984
 80069d0:	2000001c 	.word	0x2000001c
 80069d4:	20002988 	.word	0x20002988

080069d8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80069dc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 80069f2:	79fb      	ldrb	r3, [r7, #7]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fb f869 	bl	8001acc <SD_disk_initialize>
 80069fa:	4603      	mov	r3, r0
 80069fc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8006a10:	79fb      	ldrb	r3, [r7, #7]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fb f946 	bl	8001ca4 <SD_disk_status>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8006a34:	7bf8      	ldrb	r0, [r7, #15]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	f7fb f948 	bl	8001cd0 <SD_disk_read>
 8006a40:	4603      	mov	r3, r0
 8006a42:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60b9      	str	r1, [r7, #8]
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4603      	mov	r3, r0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8006a5c:	7bf8      	ldrb	r0, [r7, #15]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	68b9      	ldr	r1, [r7, #8]
 8006a64:	f7fb f99e 	bl	8001da4 <SD_disk_write>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	603a      	str	r2, [r7, #0]
 8006a7e:	71fb      	strb	r3, [r7, #7]
 8006a80:	460b      	mov	r3, r1
 8006a82:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8006a84:	79fb      	ldrb	r3, [r7, #7]
 8006a86:	79b9      	ldrb	r1, [r7, #6]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fb fa0e 	bl	8001eac <SD_disk_ioctl>
 8006a90:	4603      	mov	r3, r0
 8006a92:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006aa6:	79fb      	ldrb	r3, [r7, #7]
 8006aa8:	4a08      	ldr	r2, [pc, #32]	; (8006acc <disk_status+0x30>)
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	79fa      	ldrb	r2, [r7, #7]
 8006ab4:	4905      	ldr	r1, [pc, #20]	; (8006acc <disk_status+0x30>)
 8006ab6:	440a      	add	r2, r1
 8006ab8:	7a12      	ldrb	r2, [r2, #8]
 8006aba:	4610      	mov	r0, r2
 8006abc:	4798      	blx	r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	200002d8 	.word	0x200002d8

08006ad0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	4a0d      	ldr	r2, [pc, #52]	; (8006b18 <disk_initialize+0x48>)
 8006ae2:	5cd3      	ldrb	r3, [r2, r3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d111      	bne.n	8006b0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
 8006aea:	4a0b      	ldr	r2, [pc, #44]	; (8006b18 <disk_initialize+0x48>)
 8006aec:	2101      	movs	r1, #1
 8006aee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <disk_initialize+0x48>)
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	79fa      	ldrb	r2, [r7, #7]
 8006afe:	4906      	ldr	r1, [pc, #24]	; (8006b18 <disk_initialize+0x48>)
 8006b00:	440a      	add	r2, r1
 8006b02:	7a12      	ldrb	r2, [r2, #8]
 8006b04:	4610      	mov	r0, r2
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	200002d8 	.word	0x200002d8

08006b1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006b1c:	b590      	push	{r4, r7, lr}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
 8006b26:	603b      	str	r3, [r7, #0]
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
 8006b2e:	4a0a      	ldr	r2, [pc, #40]	; (8006b58 <disk_read+0x3c>)
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	689c      	ldr	r4, [r3, #8]
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	4a07      	ldr	r2, [pc, #28]	; (8006b58 <disk_read+0x3c>)
 8006b3c:	4413      	add	r3, r2
 8006b3e:	7a18      	ldrb	r0, [r3, #8]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	47a0      	blx	r4
 8006b48:	4603      	mov	r3, r0
 8006b4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd90      	pop	{r4, r7, pc}
 8006b56:	bf00      	nop
 8006b58:	200002d8 	.word	0x200002d8

08006b5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
 8006b68:	4603      	mov	r3, r0
 8006b6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	4a0a      	ldr	r2, [pc, #40]	; (8006b98 <disk_write+0x3c>)
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4413      	add	r3, r2
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68dc      	ldr	r4, [r3, #12]
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
 8006b7a:	4a07      	ldr	r2, [pc, #28]	; (8006b98 <disk_write+0x3c>)
 8006b7c:	4413      	add	r3, r2
 8006b7e:	7a18      	ldrb	r0, [r3, #8]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	68b9      	ldr	r1, [r7, #8]
 8006b86:	47a0      	blx	r4
 8006b88:	4603      	mov	r3, r0
 8006b8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd90      	pop	{r4, r7, pc}
 8006b96:	bf00      	nop
 8006b98:	200002d8 	.word	0x200002d8

08006b9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	603a      	str	r2, [r7, #0]
 8006ba6:	71fb      	strb	r3, [r7, #7]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	4a09      	ldr	r2, [pc, #36]	; (8006bd4 <disk_ioctl+0x38>)
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	79fa      	ldrb	r2, [r7, #7]
 8006bba:	4906      	ldr	r1, [pc, #24]	; (8006bd4 <disk_ioctl+0x38>)
 8006bbc:	440a      	add	r2, r1
 8006bbe:	7a10      	ldrb	r0, [r2, #8]
 8006bc0:	79b9      	ldrb	r1, [r7, #6]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200002d8 	.word	0x200002d8

08006bd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3301      	adds	r3, #1
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006be8:	89fb      	ldrh	r3, [r7, #14]
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	b21a      	sxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	b21b      	sxth	r3, r3
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006bfa:	89fb      	ldrh	r3, [r7, #14]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	3303      	adds	r3, #3
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	3202      	adds	r2, #2
 8006c20:	7812      	ldrb	r2, [r2, #0]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	3201      	adds	r2, #1
 8006c2e:	7812      	ldrb	r2, [r2, #0]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006c40:	68fb      	ldr	r3, [r7, #12]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	887a      	ldrh	r2, [r7, #2]
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]
 8006c66:	887b      	ldrh	r3, [r7, #2]
 8006c68:	0a1b      	lsrs	r3, r3, #8
 8006c6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	607a      	str	r2, [r7, #4]
 8006c72:	887a      	ldrh	r2, [r7, #2]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	0a1b      	lsrs	r3, r3, #8
 8006c9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	683a      	ldr	r2, [r7, #0]
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	0a1b      	lsrs	r3, r3, #8
 8006cc2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	607a      	str	r2, [r7, #4]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
}
 8006cd0:	bf00      	nop
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	1c53      	adds	r3, r2, #1
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	1c59      	adds	r1, r3, #1
 8006d00:	6179      	str	r1, [r7, #20]
 8006d02:	7812      	ldrb	r2, [r2, #0]
 8006d04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f1      	bne.n	8006cf6 <mem_cpy+0x1a>
	}
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006d1e:	b480      	push	{r7}
 8006d20:	b087      	sub	sp, #28
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	60f8      	str	r0, [r7, #12]
 8006d26:	60b9      	str	r1, [r7, #8]
 8006d28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	617a      	str	r2, [r7, #20]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f3      	bne.n	8006d2e <mem_set+0x10>
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	61fa      	str	r2, [r7, #28]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	4619      	mov	r1, r3
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	1c5a      	adds	r2, r3, #1
 8006d7a:	61ba      	str	r2, [r7, #24]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	1acb      	subs	r3, r1, r3
 8006d80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3b01      	subs	r3, #1
 8006d86:	607b      	str	r3, [r7, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <mem_cmp+0x40>
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0eb      	beq.n	8006d6c <mem_cmp+0x18>

	return r;
 8006d94:	697b      	ldr	r3, [r7, #20]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006dac:	e002      	b.n	8006db4 <chk_chr+0x12>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3301      	adds	r3, #1
 8006db2:	607b      	str	r3, [r7, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <chk_chr+0x26>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d1f2      	bne.n	8006dae <chk_chr+0xc>
	return *str;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	781b      	ldrb	r3, [r3, #0]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006de2:	2300      	movs	r3, #0
 8006de4:	60bb      	str	r3, [r7, #8]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e029      	b.n	8006e40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006dec:	4a27      	ldr	r2, [pc, #156]	; (8006e8c <chk_lock+0xb4>)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	011b      	lsls	r3, r3, #4
 8006df2:	4413      	add	r3, r2
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01d      	beq.n	8006e36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006dfa:	4a24      	ldr	r2, [pc, #144]	; (8006e8c <chk_lock+0xb4>)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	4413      	add	r3, r2
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d116      	bne.n	8006e3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006e0c:	4a1f      	ldr	r2, [pc, #124]	; (8006e8c <chk_lock+0xb4>)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	011b      	lsls	r3, r3, #4
 8006e12:	4413      	add	r3, r2
 8006e14:	3304      	adds	r3, #4
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d10c      	bne.n	8006e3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e20:	4a1a      	ldr	r2, [pc, #104]	; (8006e8c <chk_lock+0xb4>)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	011b      	lsls	r3, r3, #4
 8006e26:	4413      	add	r3, r2
 8006e28:	3308      	adds	r3, #8
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d102      	bne.n	8006e3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006e34:	e007      	b.n	8006e46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006e36:	2301      	movs	r3, #1
 8006e38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d9d2      	bls.n	8006dec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d109      	bne.n	8006e60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d102      	bne.n	8006e58 <chk_lock+0x80>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d101      	bne.n	8006e5c <chk_lock+0x84>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e010      	b.n	8006e7e <chk_lock+0xa6>
 8006e5c:	2312      	movs	r3, #18
 8006e5e:	e00e      	b.n	8006e7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d108      	bne.n	8006e78 <chk_lock+0xa0>
 8006e66:	4a09      	ldr	r2, [pc, #36]	; (8006e8c <chk_lock+0xb4>)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	4413      	add	r3, r2
 8006e6e:	330c      	adds	r3, #12
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e76:	d101      	bne.n	8006e7c <chk_lock+0xa4>
 8006e78:	2310      	movs	r3, #16
 8006e7a:	e000      	b.n	8006e7e <chk_lock+0xa6>
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	200002b8 	.word	0x200002b8

08006e90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
 8006e9a:	e002      	b.n	8006ea2 <enq_lock+0x12>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	607b      	str	r3, [r7, #4]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d806      	bhi.n	8006eb6 <enq_lock+0x26>
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <enq_lock+0x40>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	011b      	lsls	r3, r3, #4
 8006eae:	4413      	add	r3, r2
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f2      	bne.n	8006e9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	200002b8 	.word	0x200002b8

08006ed4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	e01f      	b.n	8006f24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ee4:	4a41      	ldr	r2, [pc, #260]	; (8006fec <inc_lock+0x118>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	4413      	add	r3, r2
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d113      	bne.n	8006f1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ef6:	4a3d      	ldr	r2, [pc, #244]	; (8006fec <inc_lock+0x118>)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	4413      	add	r3, r2
 8006efe:	3304      	adds	r3, #4
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d109      	bne.n	8006f1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006f0a:	4a38      	ldr	r2, [pc, #224]	; (8006fec <inc_lock+0x118>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	011b      	lsls	r3, r3, #4
 8006f10:	4413      	add	r3, r2
 8006f12:	3308      	adds	r3, #8
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d006      	beq.n	8006f2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d9dc      	bls.n	8006ee4 <inc_lock+0x10>
 8006f2a:	e000      	b.n	8006f2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006f2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d132      	bne.n	8006f9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e002      	b.n	8006f40 <inc_lock+0x6c>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d806      	bhi.n	8006f54 <inc_lock+0x80>
 8006f46:	4a29      	ldr	r2, [pc, #164]	; (8006fec <inc_lock+0x118>)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	4413      	add	r3, r2
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f2      	bne.n	8006f3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d101      	bne.n	8006f5e <inc_lock+0x8a>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e040      	b.n	8006fe0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4922      	ldr	r1, [pc, #136]	; (8006fec <inc_lock+0x118>)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	011b      	lsls	r3, r3, #4
 8006f68:	440b      	add	r3, r1
 8006f6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	491e      	ldr	r1, [pc, #120]	; (8006fec <inc_lock+0x118>)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	440b      	add	r3, r1
 8006f78:	3304      	adds	r3, #4
 8006f7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	695a      	ldr	r2, [r3, #20]
 8006f80:	491a      	ldr	r1, [pc, #104]	; (8006fec <inc_lock+0x118>)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	440b      	add	r3, r1
 8006f88:	3308      	adds	r3, #8
 8006f8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006f8c:	4a17      	ldr	r2, [pc, #92]	; (8006fec <inc_lock+0x118>)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	4413      	add	r3, r2
 8006f94:	330c      	adds	r3, #12
 8006f96:	2200      	movs	r2, #0
 8006f98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <inc_lock+0xe0>
 8006fa0:	4a12      	ldr	r2, [pc, #72]	; (8006fec <inc_lock+0x118>)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	4413      	add	r3, r2
 8006fa8:	330c      	adds	r3, #12
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <inc_lock+0xe0>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e015      	b.n	8006fe0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d108      	bne.n	8006fcc <inc_lock+0xf8>
 8006fba:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <inc_lock+0x118>)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	011b      	lsls	r3, r3, #4
 8006fc0:	4413      	add	r3, r2
 8006fc2:	330c      	adds	r3, #12
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	e001      	b.n	8006fd0 <inc_lock+0xfc>
 8006fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fd0:	4906      	ldr	r1, [pc, #24]	; (8006fec <inc_lock+0x118>)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	011b      	lsls	r3, r3, #4
 8006fd6:	440b      	add	r3, r1
 8006fd8:	330c      	adds	r3, #12
 8006fda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	200002b8 	.word	0x200002b8

08006ff0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	607b      	str	r3, [r7, #4]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d825      	bhi.n	8007050 <dec_lock+0x60>
		n = Files[i].ctr;
 8007004:	4a17      	ldr	r2, [pc, #92]	; (8007064 <dec_lock+0x74>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	011b      	lsls	r3, r3, #4
 800700a:	4413      	add	r3, r2
 800700c:	330c      	adds	r3, #12
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007012:	89fb      	ldrh	r3, [r7, #14]
 8007014:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007018:	d101      	bne.n	800701e <dec_lock+0x2e>
 800701a:	2300      	movs	r3, #0
 800701c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800701e:	89fb      	ldrh	r3, [r7, #14]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <dec_lock+0x3a>
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	3b01      	subs	r3, #1
 8007028:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800702a:	4a0e      	ldr	r2, [pc, #56]	; (8007064 <dec_lock+0x74>)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	4413      	add	r3, r2
 8007032:	330c      	adds	r3, #12
 8007034:	89fa      	ldrh	r2, [r7, #14]
 8007036:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d105      	bne.n	800704a <dec_lock+0x5a>
 800703e:	4a09      	ldr	r2, [pc, #36]	; (8007064 <dec_lock+0x74>)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	4413      	add	r3, r2
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	737b      	strb	r3, [r7, #13]
 800704e:	e001      	b.n	8007054 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007050:	2302      	movs	r3, #2
 8007052:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007054:	7b7b      	ldrb	r3, [r7, #13]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	200002b8 	.word	0x200002b8

08007068 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	e010      	b.n	8007098 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007076:	4a0d      	ldr	r2, [pc, #52]	; (80070ac <clear_lock+0x44>)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	011b      	lsls	r3, r3, #4
 800707c:	4413      	add	r3, r2
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	429a      	cmp	r2, r3
 8007084:	d105      	bne.n	8007092 <clear_lock+0x2a>
 8007086:	4a09      	ldr	r2, [pc, #36]	; (80070ac <clear_lock+0x44>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	4413      	add	r3, r2
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d9eb      	bls.n	8007076 <clear_lock+0xe>
	}
}
 800709e:	bf00      	nop
 80070a0:	bf00      	nop
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr
 80070ac:	200002b8 	.word	0x200002b8

080070b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	78db      	ldrb	r3, [r3, #3]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d034      	beq.n	800712e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	7858      	ldrb	r0, [r3, #1]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80070d4:	2301      	movs	r3, #1
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	f7ff fd40 	bl	8006b5c <disk_write>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
 80070e6:	e022      	b.n	800712e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	1ad2      	subs	r2, r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d217      	bcs.n	800712e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	789b      	ldrb	r3, [r3, #2]
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	e010      	b.n	8007128 <sync_window+0x78>
					wsect += fs->fsize;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4413      	add	r3, r2
 800710e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7858      	ldrb	r0, [r3, #1]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800711a:	2301      	movs	r3, #1
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	f7ff fd1d 	bl	8006b5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	3b01      	subs	r3, #1
 8007126:	613b      	str	r3, [r7, #16]
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d8eb      	bhi.n	8007106 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d01b      	beq.n	8007188 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff ffad 	bl	80070b0 <sync_window>
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800715a:	7bfb      	ldrb	r3, [r7, #15]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d113      	bne.n	8007188 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7858      	ldrb	r0, [r3, #1]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800716a:	2301      	movs	r3, #1
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	f7ff fcd5 	bl	8006b1c <disk_read>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d004      	beq.n	8007182 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007178:	f04f 33ff 	mov.w	r3, #4294967295
 800717c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800717e:	2301      	movs	r3, #1
 8007180:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
	...

08007194 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff ff87 	bl	80070b0 <sync_window>
 80071a2:	4603      	mov	r3, r0
 80071a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80071a6:	7bfb      	ldrb	r3, [r7, #15]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d159      	bne.n	8007260 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b03      	cmp	r3, #3
 80071b2:	d149      	bne.n	8007248 <sync_fs+0xb4>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	791b      	ldrb	r3, [r3, #4]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d145      	bne.n	8007248 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	899b      	ldrh	r3, [r3, #12]
 80071c6:	461a      	mov	r2, r3
 80071c8:	2100      	movs	r1, #0
 80071ca:	f7ff fda8 	bl	8006d1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	3334      	adds	r3, #52	; 0x34
 80071d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80071d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fd37 	bl	8006c4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3334      	adds	r3, #52	; 0x34
 80071e4:	4921      	ldr	r1, [pc, #132]	; (800726c <sync_fs+0xd8>)
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fd4c 	bl	8006c84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3334      	adds	r3, #52	; 0x34
 80071f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80071f4:	491e      	ldr	r1, [pc, #120]	; (8007270 <sync_fs+0xdc>)
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fd44 	bl	8006c84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	3334      	adds	r3, #52	; 0x34
 8007200:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	4619      	mov	r1, r3
 800720a:	4610      	mov	r0, r2
 800720c:	f7ff fd3a 	bl	8006c84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3334      	adds	r3, #52	; 0x34
 8007214:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	691b      	ldr	r3, [r3, #16]
 800721c:	4619      	mov	r1, r3
 800721e:	4610      	mov	r0, r2
 8007220:	f7ff fd30 	bl	8006c84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	7858      	ldrb	r0, [r3, #1]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723c:	2301      	movs	r3, #1
 800723e:	f7ff fc8d 	bl	8006b5c <disk_write>
			fs->fsi_flag = 0;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	2200      	movs	r2, #0
 800724e:	2100      	movs	r1, #0
 8007250:	4618      	mov	r0, r3
 8007252:	f7ff fca3 	bl	8006b9c <disk_ioctl>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <sync_fs+0xcc>
 800725c:	2301      	movs	r3, #1
 800725e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	41615252 	.word	0x41615252
 8007270:	61417272 	.word	0x61417272

08007274 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	3b02      	subs	r3, #2
 8007282:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	3b02      	subs	r3, #2
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d301      	bcc.n	8007294 <clust2sect+0x20>
 8007290:	2300      	movs	r3, #0
 8007292:	e008      	b.n	80072a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	895b      	ldrh	r3, [r3, #10]
 8007298:	461a      	mov	r2, r3
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	fb03 f202 	mul.w	r2, r3, r2
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a4:	4413      	add	r3, r2
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d904      	bls.n	80072d2 <get_fat+0x20>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	e0bb      	b.n	8007450 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80072d8:	f04f 33ff 	mov.w	r3, #4294967295
 80072dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	f000 8083 	beq.w	80073ee <get_fat+0x13c>
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	f300 80a7 	bgt.w	800743c <get_fat+0x18a>
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d002      	beq.n	80072f8 <get_fat+0x46>
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d056      	beq.n	80073a4 <get_fat+0xf2>
 80072f6:	e0a1      	b.n	800743c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	085b      	lsrs	r3, r3, #1
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	899b      	ldrh	r3, [r3, #12]
 800730e:	4619      	mov	r1, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	fbb3 f3f1 	udiv	r3, r3, r1
 8007316:	4413      	add	r3, r2
 8007318:	4619      	mov	r1, r3
 800731a:	6938      	ldr	r0, [r7, #16]
 800731c:	f7ff ff0c 	bl	8007138 <move_window>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	f040 808d 	bne.w	8007442 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1c5a      	adds	r2, r3, #1
 800732c:	60fa      	str	r2, [r7, #12]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	8992      	ldrh	r2, [r2, #12]
 8007332:	fbb3 f1f2 	udiv	r1, r3, r2
 8007336:	fb02 f201 	mul.w	r2, r2, r1
 800733a:	1a9b      	subs	r3, r3, r2
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	4413      	add	r3, r2
 8007340:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007344:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	899b      	ldrh	r3, [r3, #12]
 800734e:	4619      	mov	r1, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	fbb3 f3f1 	udiv	r3, r3, r1
 8007356:	4413      	add	r3, r2
 8007358:	4619      	mov	r1, r3
 800735a:	6938      	ldr	r0, [r7, #16]
 800735c:	f7ff feec 	bl	8007138 <move_window>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d16f      	bne.n	8007446 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	899b      	ldrh	r3, [r3, #12]
 800736a:	461a      	mov	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007372:	fb02 f201 	mul.w	r2, r2, r1
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4413      	add	r3, r2
 800737c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007380:	021b      	lsls	r3, r3, #8
 8007382:	461a      	mov	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4313      	orrs	r3, r2
 8007388:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d002      	beq.n	800739a <get_fat+0xe8>
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	091b      	lsrs	r3, r3, #4
 8007398:	e002      	b.n	80073a0 <get_fat+0xee>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a0:	617b      	str	r3, [r7, #20]
			break;
 80073a2:	e055      	b.n	8007450 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	899b      	ldrh	r3, [r3, #12]
 80073ac:	085b      	lsrs	r3, r3, #1
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4619      	mov	r1, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80073b8:	4413      	add	r3, r2
 80073ba:	4619      	mov	r1, r3
 80073bc:	6938      	ldr	r0, [r7, #16]
 80073be:	f7ff febb 	bl	8007138 <move_window>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d140      	bne.n	800744a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	8992      	ldrh	r2, [r2, #12]
 80073d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80073da:	fb02 f200 	mul.w	r2, r2, r0
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	440b      	add	r3, r1
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff fbf8 	bl	8006bd8 <ld_word>
 80073e8:	4603      	mov	r3, r0
 80073ea:	617b      	str	r3, [r7, #20]
			break;
 80073ec:	e030      	b.n	8007450 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	899b      	ldrh	r3, [r3, #12]
 80073f6:	089b      	lsrs	r3, r3, #2
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007402:	4413      	add	r3, r2
 8007404:	4619      	mov	r1, r3
 8007406:	6938      	ldr	r0, [r7, #16]
 8007408:	f7ff fe96 	bl	8007138 <move_window>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d11d      	bne.n	800744e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	8992      	ldrh	r2, [r2, #12]
 8007420:	fbb3 f0f2 	udiv	r0, r3, r2
 8007424:	fb02 f200 	mul.w	r2, r2, r0
 8007428:	1a9b      	subs	r3, r3, r2
 800742a:	440b      	add	r3, r1
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff fbeb 	bl	8006c08 <ld_dword>
 8007432:	4603      	mov	r3, r0
 8007434:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007438:	617b      	str	r3, [r7, #20]
			break;
 800743a:	e009      	b.n	8007450 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e006      	b.n	8007450 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007442:	bf00      	nop
 8007444:	e004      	b.n	8007450 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007446:	bf00      	nop
 8007448:	e002      	b.n	8007450 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800744a:	bf00      	nop
 800744c:	e000      	b.n	8007450 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800744e:	bf00      	nop
		}
	}

	return val;
 8007450:	697b      	ldr	r3, [r7, #20]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800745a:	b590      	push	{r4, r7, lr}
 800745c:	b089      	sub	sp, #36	; 0x24
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007466:	2302      	movs	r3, #2
 8007468:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b01      	cmp	r3, #1
 800746e:	f240 8102 	bls.w	8007676 <put_fat+0x21c>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	68ba      	ldr	r2, [r7, #8]
 8007478:	429a      	cmp	r2, r3
 800747a:	f080 80fc 	bcs.w	8007676 <put_fat+0x21c>
		switch (fs->fs_type) {
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b03      	cmp	r3, #3
 8007484:	f000 80b6 	beq.w	80075f4 <put_fat+0x19a>
 8007488:	2b03      	cmp	r3, #3
 800748a:	f300 80fd 	bgt.w	8007688 <put_fat+0x22e>
 800748e:	2b01      	cmp	r3, #1
 8007490:	d003      	beq.n	800749a <put_fat+0x40>
 8007492:	2b02      	cmp	r3, #2
 8007494:	f000 8083 	beq.w	800759e <put_fat+0x144>
 8007498:	e0f6      	b.n	8007688 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	085b      	lsrs	r3, r3, #1
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	4413      	add	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	899b      	ldrh	r3, [r3, #12]
 80074b0:	4619      	mov	r1, r3
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80074b8:	4413      	add	r3, r2
 80074ba:	4619      	mov	r1, r3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7ff fe3b 	bl	8007138 <move_window>
 80074c2:	4603      	mov	r3, r0
 80074c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80074c6:	7ffb      	ldrb	r3, [r7, #31]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f040 80d6 	bne.w	800767a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	61ba      	str	r2, [r7, #24]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	8992      	ldrh	r2, [r2, #12]
 80074de:	fbb3 f0f2 	udiv	r0, r3, r2
 80074e2:	fb02 f200 	mul.w	r2, r2, r0
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	440b      	add	r3, r1
 80074ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d00d      	beq.n	8007512 <put_fat+0xb8>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	b25b      	sxtb	r3, r3
 80074fc:	f003 030f 	and.w	r3, r3, #15
 8007500:	b25a      	sxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	b25b      	sxtb	r3, r3
 800750a:	4313      	orrs	r3, r2
 800750c:	b25b      	sxtb	r3, r3
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e001      	b.n	8007516 <put_fat+0xbc>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2201      	movs	r2, #1
 800751e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	899b      	ldrh	r3, [r3, #12]
 8007528:	4619      	mov	r1, r3
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007530:	4413      	add	r3, r2
 8007532:	4619      	mov	r1, r3
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7ff fdff 	bl	8007138 <move_window>
 800753a:	4603      	mov	r3, r0
 800753c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800753e:	7ffb      	ldrb	r3, [r7, #31]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f040 809c 	bne.w	800767e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	899b      	ldrh	r3, [r3, #12]
 8007550:	461a      	mov	r2, r3
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	fbb3 f0f2 	udiv	r0, r3, r2
 8007558:	fb02 f200 	mul.w	r2, r2, r0
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	440b      	add	r3, r1
 8007560:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <put_fat+0x11a>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	091b      	lsrs	r3, r3, #4
 8007570:	b2db      	uxtb	r3, r3
 8007572:	e00e      	b.n	8007592 <put_fat+0x138>
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	b25b      	sxtb	r3, r3
 800757a:	f023 030f 	bic.w	r3, r3, #15
 800757e:	b25a      	sxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	b25b      	sxtb	r3, r3
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	b25b      	sxtb	r3, r3
 800758c:	4313      	orrs	r3, r2
 800758e:	b25b      	sxtb	r3, r3
 8007590:	b2db      	uxtb	r3, r3
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2201      	movs	r2, #1
 800759a:	70da      	strb	r2, [r3, #3]
			break;
 800759c:	e074      	b.n	8007688 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	899b      	ldrh	r3, [r3, #12]
 80075a6:	085b      	lsrs	r3, r3, #1
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	4619      	mov	r1, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80075b2:	4413      	add	r3, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fdbe 	bl	8007138 <move_window>
 80075bc:	4603      	mov	r3, r0
 80075be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075c0:	7ffb      	ldrb	r3, [r7, #31]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d15d      	bne.n	8007682 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	8992      	ldrh	r2, [r2, #12]
 80075d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80075d8:	fb02 f200 	mul.w	r2, r2, r0
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	440b      	add	r3, r1
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	b292      	uxth	r2, r2
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7ff fb31 	bl	8006c4e <st_word>
			fs->wflag = 1;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2201      	movs	r2, #1
 80075f0:	70da      	strb	r2, [r3, #3]
			break;
 80075f2:	e049      	b.n	8007688 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	899b      	ldrh	r3, [r3, #12]
 80075fc:	089b      	lsrs	r3, r3, #2
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4619      	mov	r1, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	fbb3 f3f1 	udiv	r3, r3, r1
 8007608:	4413      	add	r3, r2
 800760a:	4619      	mov	r1, r3
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff fd93 	bl	8007138 <move_window>
 8007612:	4603      	mov	r3, r0
 8007614:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007616:	7ffb      	ldrb	r3, [r7, #31]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d134      	bne.n	8007686 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	8992      	ldrh	r2, [r2, #12]
 8007630:	fbb3 f0f2 	udiv	r0, r3, r2
 8007634:	fb02 f200 	mul.w	r2, r2, r0
 8007638:	1a9b      	subs	r3, r3, r2
 800763a:	440b      	add	r3, r1
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff fae3 	bl	8006c08 <ld_dword>
 8007642:	4603      	mov	r3, r0
 8007644:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007648:	4323      	orrs	r3, r4
 800764a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	8992      	ldrh	r2, [r2, #12]
 800765a:	fbb3 f0f2 	udiv	r0, r3, r2
 800765e:	fb02 f200 	mul.w	r2, r2, r0
 8007662:	1a9b      	subs	r3, r3, r2
 8007664:	440b      	add	r3, r1
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fb0b 	bl	8006c84 <st_dword>
			fs->wflag = 1;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	70da      	strb	r2, [r3, #3]
			break;
 8007674:	e008      	b.n	8007688 <put_fat+0x22e>
		}
	}
 8007676:	bf00      	nop
 8007678:	e006      	b.n	8007688 <put_fat+0x22e>
			if (res != FR_OK) break;
 800767a:	bf00      	nop
 800767c:	e004      	b.n	8007688 <put_fat+0x22e>
			if (res != FR_OK) break;
 800767e:	bf00      	nop
 8007680:	e002      	b.n	8007688 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007682:	bf00      	nop
 8007684:	e000      	b.n	8007688 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007686:	bf00      	nop
	return res;
 8007688:	7ffb      	ldrb	r3, [r7, #31]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3724      	adds	r7, #36	; 0x24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd90      	pop	{r4, r7, pc}

08007692 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b088      	sub	sp, #32
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800769e:	2300      	movs	r3, #0
 80076a0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d904      	bls.n	80076b8 <remove_chain+0x26>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d301      	bcc.n	80076bc <remove_chain+0x2a>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e04b      	b.n	8007754 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00c      	beq.n	80076dc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	69b8      	ldr	r0, [r7, #24]
 80076ca:	f7ff fec6 	bl	800745a <put_fat>
 80076ce:	4603      	mov	r3, r0
 80076d0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80076d2:	7ffb      	ldrb	r3, [r7, #31]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <remove_chain+0x4a>
 80076d8:	7ffb      	ldrb	r3, [r7, #31]
 80076da:	e03b      	b.n	8007754 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80076dc:	68b9      	ldr	r1, [r7, #8]
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff fde7 	bl	80072b2 <get_fat>
 80076e4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d031      	beq.n	8007750 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <remove_chain+0x64>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e02e      	b.n	8007754 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fc:	d101      	bne.n	8007702 <remove_chain+0x70>
 80076fe:	2301      	movs	r3, #1
 8007700:	e028      	b.n	8007754 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007702:	2200      	movs	r2, #0
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	69b8      	ldr	r0, [r7, #24]
 8007708:	f7ff fea7 	bl	800745a <put_fat>
 800770c:	4603      	mov	r3, r0
 800770e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007710:	7ffb      	ldrb	r3, [r7, #31]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <remove_chain+0x88>
 8007716:	7ffb      	ldrb	r3, [r7, #31]
 8007718:	e01c      	b.n	8007754 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	695a      	ldr	r2, [r3, #20]
 800771e:	69bb      	ldr	r3, [r7, #24]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	3b02      	subs	r3, #2
 8007724:	429a      	cmp	r2, r3
 8007726:	d20b      	bcs.n	8007740 <remove_chain+0xae>
			fs->free_clst++;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	b2da      	uxtb	r2, r3
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	429a      	cmp	r2, r3
 800774c:	d3c6      	bcc.n	80076dc <remove_chain+0x4a>
 800774e:	e000      	b.n	8007752 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007750:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3720      	adds	r7, #32
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b088      	sub	sp, #32
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10d      	bne.n	800778e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d004      	beq.n	8007788 <create_chain+0x2c>
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	429a      	cmp	r2, r3
 8007786:	d31b      	bcc.n	80077c0 <create_chain+0x64>
 8007788:	2301      	movs	r3, #1
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	e018      	b.n	80077c0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff fd8e 	bl	80072b2 <get_fat>
 8007796:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d801      	bhi.n	80077a2 <create_chain+0x46>
 800779e:	2301      	movs	r3, #1
 80077a0:	e070      	b.n	8007884 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a8:	d101      	bne.n	80077ae <create_chain+0x52>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	e06a      	b.n	8007884 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d201      	bcs.n	80077bc <create_chain+0x60>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	e063      	b.n	8007884 <create_chain+0x128>
		scl = clst;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	3301      	adds	r3, #1
 80077c8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	699b      	ldr	r3, [r3, #24]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d307      	bcc.n	80077e4 <create_chain+0x88>
				ncl = 2;
 80077d4:	2302      	movs	r3, #2
 80077d6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80077d8:	69fa      	ldr	r2, [r7, #28]
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d901      	bls.n	80077e4 <create_chain+0x88>
 80077e0:	2300      	movs	r3, #0
 80077e2:	e04f      	b.n	8007884 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80077e4:	69f9      	ldr	r1, [r7, #28]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff fd63 	bl	80072b2 <get_fat>
 80077ec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d00e      	beq.n	8007812 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d003      	beq.n	8007802 <create_chain+0xa6>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d101      	bne.n	8007806 <create_chain+0xaa>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	e03e      	b.n	8007884 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	429a      	cmp	r2, r3
 800780c:	d1da      	bne.n	80077c4 <create_chain+0x68>
 800780e:	2300      	movs	r3, #0
 8007810:	e038      	b.n	8007884 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007812:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	69f9      	ldr	r1, [r7, #28]
 800781a:	6938      	ldr	r0, [r7, #16]
 800781c:	f7ff fe1d 	bl	800745a <put_fat>
 8007820:	4603      	mov	r3, r0
 8007822:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <create_chain+0xe2>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d006      	beq.n	800783e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6938      	ldr	r0, [r7, #16]
 8007836:	f7ff fe10 	bl	800745a <put_fat>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d116      	bne.n	8007872 <create_chain+0x116>
		fs->last_clst = ncl;
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	695a      	ldr	r2, [r3, #20]
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	3b02      	subs	r3, #2
 8007854:	429a      	cmp	r2, r3
 8007856:	d804      	bhi.n	8007862 <create_chain+0x106>
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	695b      	ldr	r3, [r3, #20]
 800785c:	1e5a      	subs	r2, r3, #1
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	791b      	ldrb	r3, [r3, #4]
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	711a      	strb	r2, [r3, #4]
 8007870:	e007      	b.n	8007882 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d102      	bne.n	800787e <create_chain+0x122>
 8007878:	f04f 33ff 	mov.w	r3, #4294967295
 800787c:	e000      	b.n	8007880 <create_chain+0x124>
 800787e:	2301      	movs	r3, #1
 8007880:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007882:	69fb      	ldr	r3, [r7, #28]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3720      	adds	r7, #32
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	3304      	adds	r3, #4
 80078a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	899b      	ldrh	r3, [r3, #12]
 80078a8:	461a      	mov	r2, r3
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	8952      	ldrh	r2, [r2, #10]
 80078b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80078b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	1d1a      	adds	r2, r3, #4
 80078be:	613a      	str	r2, [r7, #16]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <clmt_clust+0x42>
 80078ca:	2300      	movs	r3, #0
 80078cc:	e010      	b.n	80078f0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d307      	bcc.n	80078e6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	617b      	str	r3, [r7, #20]
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	3304      	adds	r3, #4
 80078e2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80078e4:	e7e9      	b.n	80078ba <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80078e6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	4413      	add	r3, r2
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007912:	d204      	bcs.n	800791e <dir_sdi+0x22>
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	f003 031f 	and.w	r3, r3, #31
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <dir_sdi+0x26>
		return FR_INT_ERR;
 800791e:	2302      	movs	r3, #2
 8007920:	e071      	b.n	8007a06 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <dir_sdi+0x46>
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d902      	bls.n	8007942 <dir_sdi+0x46>
		clst = fs->dirbase;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10c      	bne.n	8007962 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	095b      	lsrs	r3, r3, #5
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	8912      	ldrh	r2, [r2, #8]
 8007950:	4293      	cmp	r3, r2
 8007952:	d301      	bcc.n	8007958 <dir_sdi+0x5c>
 8007954:	2302      	movs	r3, #2
 8007956:	e056      	b.n	8007a06 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	61da      	str	r2, [r3, #28]
 8007960:	e02d      	b.n	80079be <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	895b      	ldrh	r3, [r3, #10]
 8007966:	461a      	mov	r2, r3
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	899b      	ldrh	r3, [r3, #12]
 800796c:	fb03 f302 	mul.w	r3, r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007972:	e019      	b.n	80079a8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6979      	ldr	r1, [r7, #20]
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff fc9a 	bl	80072b2 <get_fat>
 800797e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d101      	bne.n	800798c <dir_sdi+0x90>
 8007988:	2301      	movs	r3, #1
 800798a:	e03c      	b.n	8007a06 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	2b01      	cmp	r3, #1
 8007990:	d904      	bls.n	800799c <dir_sdi+0xa0>
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	429a      	cmp	r2, r3
 800799a:	d301      	bcc.n	80079a0 <dir_sdi+0xa4>
 800799c:	2302      	movs	r3, #2
 800799e:	e032      	b.n	8007a06 <dir_sdi+0x10a>
			ofs -= csz;
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d2e1      	bcs.n	8007974 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80079b0:	6979      	ldr	r1, [r7, #20]
 80079b2:	6938      	ldr	r0, [r7, #16]
 80079b4:	f7ff fc5e 	bl	8007274 <clust2sect>
 80079b8:	4602      	mov	r2, r0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	697a      	ldr	r2, [r7, #20]
 80079c2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <dir_sdi+0xd4>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e01a      	b.n	8007a06 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69da      	ldr	r2, [r3, #28]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	899b      	ldrh	r3, [r3, #12]
 80079d8:	4619      	mov	r1, r3
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80079e0:	441a      	add	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	899b      	ldrh	r3, [r3, #12]
 80079f0:	461a      	mov	r2, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80079f8:	fb02 f200 	mul.w	r2, r2, r0
 80079fc:	1a9b      	subs	r3, r3, r2
 80079fe:	18ca      	adds	r2, r1, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	3320      	adds	r3, #32
 8007a24:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <dir_next+0x28>
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a34:	d301      	bcc.n	8007a3a <dir_next+0x2c>
 8007a36:	2304      	movs	r3, #4
 8007a38:	e0bb      	b.n	8007bb2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	899b      	ldrh	r3, [r3, #12]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a46:	fb02 f201 	mul.w	r2, r2, r1
 8007a4a:	1a9b      	subs	r3, r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 809d 	bne.w	8007b8c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10b      	bne.n	8007a7c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	095b      	lsrs	r3, r3, #5
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	8912      	ldrh	r2, [r2, #8]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	f0c0 808d 	bcc.w	8007b8c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	61da      	str	r2, [r3, #28]
 8007a78:	2304      	movs	r3, #4
 8007a7a:	e09a      	b.n	8007bb2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	899b      	ldrh	r3, [r3, #12]
 8007a80:	461a      	mov	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	8952      	ldrh	r2, [r2, #10]
 8007a8c:	3a01      	subs	r2, #1
 8007a8e:	4013      	ands	r3, r2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d17b      	bne.n	8007b8c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	f7ff fc08 	bl	80072b2 <get_fat>
 8007aa2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d801      	bhi.n	8007aae <dir_next+0xa0>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e081      	b.n	8007bb2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab4:	d101      	bne.n	8007aba <dir_next+0xac>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e07b      	b.n	8007bb2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d359      	bcc.n	8007b78 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	61da      	str	r2, [r3, #28]
 8007ad0:	2304      	movs	r3, #4
 8007ad2:	e06e      	b.n	8007bb2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7ff fe3d 	bl	800775c <create_chain>
 8007ae2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <dir_next+0xe0>
 8007aea:	2307      	movs	r3, #7
 8007aec:	e061      	b.n	8007bb2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d101      	bne.n	8007af8 <dir_next+0xea>
 8007af4:	2302      	movs	r3, #2
 8007af6:	e05c      	b.n	8007bb2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afe:	d101      	bne.n	8007b04 <dir_next+0xf6>
 8007b00:	2301      	movs	r3, #1
 8007b02:	e056      	b.n	8007bb2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff fad3 	bl	80070b0 <sync_window>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <dir_next+0x106>
 8007b10:	2301      	movs	r3, #1
 8007b12:	e04e      	b.n	8007bb2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	899b      	ldrh	r3, [r3, #12]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	2100      	movs	r1, #0
 8007b22:	f7ff f8fc 	bl	8006d1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b26:	2300      	movs	r3, #0
 8007b28:	613b      	str	r3, [r7, #16]
 8007b2a:	6979      	ldr	r1, [r7, #20]
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f7ff fba1 	bl	8007274 <clust2sect>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	631a      	str	r2, [r3, #48]	; 0x30
 8007b38:	e012      	b.n	8007b60 <dir_next+0x152>
						fs->wflag = 1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff fab5 	bl	80070b0 <sync_window>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d001      	beq.n	8007b50 <dir_next+0x142>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e030      	b.n	8007bb2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	3301      	adds	r3, #1
 8007b54:	613b      	str	r3, [r7, #16]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	895b      	ldrh	r3, [r3, #10]
 8007b64:	461a      	mov	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d3e6      	bcc.n	8007b3a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad2      	subs	r2, r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007b7e:	6979      	ldr	r1, [r7, #20]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fb77 	bl	8007274 <clust2sect>
 8007b86:	4602      	mov	r2, r0
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	899b      	ldrh	r3, [r3, #12]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ba4:	fb02 f200 	mul.w	r2, r2, r0
 8007ba8:	1a9b      	subs	r3, r3, r2
 8007baa:	18ca      	adds	r2, r1, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3718      	adds	r7, #24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b086      	sub	sp, #24
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007bca:	2100      	movs	r1, #0
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff fe95 	bl	80078fc <dir_sdi>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d12b      	bne.n	8007c34 <dir_alloc+0x7a>
		n = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	69db      	ldr	r3, [r3, #28]
 8007be4:	4619      	mov	r1, r3
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f7ff faa6 	bl	8007138 <move_window>
 8007bec:	4603      	mov	r3, r0
 8007bee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bf0:	7dfb      	ldrb	r3, [r7, #23]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d11d      	bne.n	8007c32 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2be5      	cmp	r3, #229	; 0xe5
 8007bfe:	d004      	beq.n	8007c0a <dir_alloc+0x50>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d107      	bne.n	8007c1a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	613b      	str	r3, [r7, #16]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d102      	bne.n	8007c1e <dir_alloc+0x64>
 8007c18:	e00c      	b.n	8007c34 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c1e:	2101      	movs	r1, #1
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff fef4 	bl	8007a0e <dir_next>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d0d7      	beq.n	8007be0 <dir_alloc+0x26>
 8007c30:	e000      	b.n	8007c34 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c32:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c34:	7dfb      	ldrb	r3, [r7, #23]
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d101      	bne.n	8007c3e <dir_alloc+0x84>
 8007c3a:	2307      	movs	r3, #7
 8007c3c:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	331a      	adds	r3, #26
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe ffbe 	bl	8006bd8 <ld_word>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d109      	bne.n	8007c7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	3314      	adds	r3, #20
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe ffb3 	bl	8006bd8 <ld_word>
 8007c72:	4603      	mov	r3, r0
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	60f8      	str	r0, [r7, #12]
 8007c8e:	60b9      	str	r1, [r7, #8]
 8007c90:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	331a      	adds	r3, #26
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe ffd6 	bl	8006c4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d109      	bne.n	8007cbe <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f103 0214 	add.w	r2, r3, #20
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	0c1b      	lsrs	r3, r3, #16
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	f7fe ffc8 	bl	8006c4e <st_word>
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007cc6:	b580      	push	{r7, lr}
 8007cc8:	b086      	sub	sp, #24
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fe10 	bl	80078fc <dir_sdi>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <dir_find+0x24>
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	e03e      	b.n	8007d68 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6938      	ldr	r0, [r7, #16]
 8007cf2:	f7ff fa21 	bl	8007138 <move_window>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007cfa:	7dfb      	ldrb	r3, [r7, #23]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d12f      	bne.n	8007d60 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <dir_find+0x4e>
 8007d0e:	2304      	movs	r3, #4
 8007d10:	75fb      	strb	r3, [r7, #23]
 8007d12:	e028      	b.n	8007d66 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	330b      	adds	r3, #11
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	330b      	adds	r3, #11
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <dir_find+0x86>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a18      	ldr	r0, [r3, #32]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3324      	adds	r3, #36	; 0x24
 8007d3e:	220b      	movs	r2, #11
 8007d40:	4619      	mov	r1, r3
 8007d42:	f7ff f807 	bl	8006d54 <mem_cmp>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff fe5d 	bl	8007a0e <dir_next>
 8007d54:	4603      	mov	r3, r0
 8007d56:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0c5      	beq.n	8007cea <dir_find+0x24>
 8007d5e:	e002      	b.n	8007d66 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d60:	bf00      	nop
 8007d62:	e000      	b.n	8007d66 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d64:	bf00      	nop

	return res;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007d7e:	2101      	movs	r1, #1
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff1a 	bl	8007bba <dir_alloc>
 8007d86:	4603      	mov	r3, r0
 8007d88:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d11c      	bne.n	8007dca <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	69db      	ldr	r3, [r3, #28]
 8007d94:	4619      	mov	r1, r3
 8007d96:	68b8      	ldr	r0, [r7, #8]
 8007d98:	f7ff f9ce 	bl	8007138 <move_window>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007da0:	7bfb      	ldrb	r3, [r7, #15]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d111      	bne.n	8007dca <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a1b      	ldr	r3, [r3, #32]
 8007daa:	2220      	movs	r2, #32
 8007dac:	2100      	movs	r1, #0
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe ffb5 	bl	8006d1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a18      	ldr	r0, [r3, #32]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3324      	adds	r3, #36	; 0x24
 8007dbc:	220b      	movs	r2, #11
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	f7fe ff8c 	bl	8006cdc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2200      	movs	r2, #0
 8007de2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69db      	ldr	r3, [r3, #28]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d04e      	beq.n	8007e8a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	613b      	str	r3, [r7, #16]
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007df4:	e021      	b.n	8007e3a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1a      	ldr	r2, [r3, #32]
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	1c59      	adds	r1, r3, #1
 8007dfe:	6179      	str	r1, [r7, #20]
 8007e00:	4413      	add	r3, r2
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d100      	bne.n	8007e0e <get_fileinfo+0x3a>
 8007e0c:	e015      	b.n	8007e3a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	2b05      	cmp	r3, #5
 8007e12:	d101      	bne.n	8007e18 <get_fileinfo+0x44>
 8007e14:	23e5      	movs	r3, #229	; 0xe5
 8007e16:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	2b09      	cmp	r3, #9
 8007e1c:	d106      	bne.n	8007e2c <get_fileinfo+0x58>
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1c5a      	adds	r2, r3, #1
 8007e22:	613a      	str	r2, [r7, #16]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	4413      	add	r3, r2
 8007e28:	222e      	movs	r2, #46	; 0x2e
 8007e2a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1c5a      	adds	r2, r3, #1
 8007e30:	613a      	str	r2, [r7, #16]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4413      	add	r3, r2
 8007e36:	7bfa      	ldrb	r2, [r7, #15]
 8007e38:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b0a      	cmp	r3, #10
 8007e3e:	d9da      	bls.n	8007df6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4413      	add	r3, r2
 8007e46:	3309      	adds	r3, #9
 8007e48:	2200      	movs	r2, #0
 8007e4a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	7ada      	ldrb	r2, [r3, #11]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	331c      	adds	r3, #28
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe fed3 	bl	8006c08 <ld_dword>
 8007e62:	4602      	mov	r2, r0
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	3316      	adds	r3, #22
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe feca 	bl	8006c08 <ld_dword>
 8007e74:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	b29a      	uxth	r2, r3
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	80da      	strh	r2, [r3, #6]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	0c1b      	lsrs	r3, r3, #16
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	809a      	strh	r2, [r3, #4]
 8007e88:	e000      	b.n	8007e8c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007e8a:	bf00      	nop
}
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3324      	adds	r3, #36	; 0x24
 8007ea8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007eaa:	220b      	movs	r2, #11
 8007eac:	2120      	movs	r1, #32
 8007eae:	68b8      	ldr	r0, [r7, #8]
 8007eb0:	f7fe ff35 	bl	8006d1e <mem_set>
	si = i = 0; ni = 8;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	61fb      	str	r3, [r7, #28]
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	1c5a      	adds	r2, r3, #1
 8007ec4:	61fa      	str	r2, [r7, #28]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007ece:	7efb      	ldrb	r3, [r7, #27]
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	d94e      	bls.n	8007f72 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007ed4:	7efb      	ldrb	r3, [r7, #27]
 8007ed6:	2b2f      	cmp	r3, #47	; 0x2f
 8007ed8:	d006      	beq.n	8007ee8 <create_name+0x54>
 8007eda:	7efb      	ldrb	r3, [r7, #27]
 8007edc:	2b5c      	cmp	r3, #92	; 0x5c
 8007ede:	d110      	bne.n	8007f02 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007ee0:	e002      	b.n	8007ee8 <create_name+0x54>
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61fb      	str	r3, [r7, #28]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	4413      	add	r3, r2
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b2f      	cmp	r3, #47	; 0x2f
 8007ef2:	d0f6      	beq.n	8007ee2 <create_name+0x4e>
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	4413      	add	r3, r2
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b5c      	cmp	r3, #92	; 0x5c
 8007efe:	d0f0      	beq.n	8007ee2 <create_name+0x4e>
			break;
 8007f00:	e038      	b.n	8007f74 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007f02:	7efb      	ldrb	r3, [r7, #27]
 8007f04:	2b2e      	cmp	r3, #46	; 0x2e
 8007f06:	d003      	beq.n	8007f10 <create_name+0x7c>
 8007f08:	693a      	ldr	r2, [r7, #16]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d30c      	bcc.n	8007f2a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b0b      	cmp	r3, #11
 8007f14:	d002      	beq.n	8007f1c <create_name+0x88>
 8007f16:	7efb      	ldrb	r3, [r7, #27]
 8007f18:	2b2e      	cmp	r3, #46	; 0x2e
 8007f1a:	d001      	beq.n	8007f20 <create_name+0x8c>
 8007f1c:	2306      	movs	r3, #6
 8007f1e:	e044      	b.n	8007faa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f20:	2308      	movs	r3, #8
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	230b      	movs	r3, #11
 8007f26:	617b      	str	r3, [r7, #20]
			continue;
 8007f28:	e022      	b.n	8007f70 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	da04      	bge.n	8007f3c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f32:	7efb      	ldrb	r3, [r7, #27]
 8007f34:	3b80      	subs	r3, #128	; 0x80
 8007f36:	4a1f      	ldr	r2, [pc, #124]	; (8007fb4 <create_name+0x120>)
 8007f38:	5cd3      	ldrb	r3, [r2, r3]
 8007f3a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f3c:	7efb      	ldrb	r3, [r7, #27]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	481d      	ldr	r0, [pc, #116]	; (8007fb8 <create_name+0x124>)
 8007f42:	f7fe ff2e 	bl	8006da2 <chk_chr>
 8007f46:	4603      	mov	r3, r0
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d001      	beq.n	8007f50 <create_name+0xbc>
 8007f4c:	2306      	movs	r3, #6
 8007f4e:	e02c      	b.n	8007faa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f50:	7efb      	ldrb	r3, [r7, #27]
 8007f52:	2b60      	cmp	r3, #96	; 0x60
 8007f54:	d905      	bls.n	8007f62 <create_name+0xce>
 8007f56:	7efb      	ldrb	r3, [r7, #27]
 8007f58:	2b7a      	cmp	r3, #122	; 0x7a
 8007f5a:	d802      	bhi.n	8007f62 <create_name+0xce>
 8007f5c:	7efb      	ldrb	r3, [r7, #27]
 8007f5e:	3b20      	subs	r3, #32
 8007f60:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	613a      	str	r2, [r7, #16]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	7efa      	ldrb	r2, [r7, #27]
 8007f6e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007f70:	e7a6      	b.n	8007ec0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f72:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	441a      	add	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d101      	bne.n	8007f88 <create_name+0xf4>
 8007f84:	2306      	movs	r3, #6
 8007f86:	e010      	b.n	8007faa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2be5      	cmp	r3, #229	; 0xe5
 8007f8e:	d102      	bne.n	8007f96 <create_name+0x102>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2205      	movs	r2, #5
 8007f94:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007f96:	7efb      	ldrb	r3, [r7, #27]
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	d801      	bhi.n	8007fa0 <create_name+0x10c>
 8007f9c:	2204      	movs	r2, #4
 8007f9e:	e000      	b.n	8007fa2 <create_name+0x10e>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	330b      	adds	r3, #11
 8007fa6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007fa8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	0800c80c 	.word	0x0800c80c
 8007fb8:	0800c7a8 	.word	0x0800c7a8

08007fbc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007fd0:	e002      	b.n	8007fd8 <follow_path+0x1c>
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	603b      	str	r3, [r7, #0]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b2f      	cmp	r3, #47	; 0x2f
 8007fde:	d0f8      	beq.n	8007fd2 <follow_path+0x16>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b5c      	cmp	r3, #92	; 0x5c
 8007fe6:	d0f4      	beq.n	8007fd2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	2200      	movs	r2, #0
 8007fec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	2b1f      	cmp	r3, #31
 8007ff4:	d80a      	bhi.n	800800c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2280      	movs	r2, #128	; 0x80
 8007ffa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007ffe:	2100      	movs	r1, #0
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7ff fc7b 	bl	80078fc <dir_sdi>
 8008006:	4603      	mov	r3, r0
 8008008:	75fb      	strb	r3, [r7, #23]
 800800a:	e048      	b.n	800809e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800800c:	463b      	mov	r3, r7
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff ff3f 	bl	8007e94 <create_name>
 8008016:	4603      	mov	r3, r0
 8008018:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800801a:	7dfb      	ldrb	r3, [r7, #23]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d139      	bne.n	8008094 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f7ff fe50 	bl	8007cc6 <dir_find>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008030:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b04      	cmp	r3, #4
 800803c:	d12c      	bne.n	8008098 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800803e:	7afb      	ldrb	r3, [r7, #11]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d127      	bne.n	8008098 <follow_path+0xdc>
 8008048:	2305      	movs	r3, #5
 800804a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800804c:	e024      	b.n	8008098 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800804e:	7afb      	ldrb	r3, [r7, #11]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d121      	bne.n	800809c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	799b      	ldrb	r3, [r3, #6]
 800805c:	f003 0310 	and.w	r3, r3, #16
 8008060:	2b00      	cmp	r3, #0
 8008062:	d102      	bne.n	800806a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008064:	2305      	movs	r3, #5
 8008066:	75fb      	strb	r3, [r7, #23]
 8008068:	e019      	b.n	800809e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	8992      	ldrh	r2, [r2, #12]
 8008078:	fbb3 f0f2 	udiv	r0, r3, r2
 800807c:	fb02 f200 	mul.w	r2, r2, r0
 8008080:	1a9b      	subs	r3, r3, r2
 8008082:	440b      	add	r3, r1
 8008084:	4619      	mov	r1, r3
 8008086:	68f8      	ldr	r0, [r7, #12]
 8008088:	f7ff fdde 	bl	8007c48 <ld_clust>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008092:	e7bb      	b.n	800800c <follow_path+0x50>
			if (res != FR_OK) break;
 8008094:	bf00      	nop
 8008096:	e002      	b.n	800809e <follow_path+0xe2>
				break;
 8008098:	bf00      	nop
 800809a:	e000      	b.n	800809e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800809c:	bf00      	nop
			}
		}
	}

	return res;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3718      	adds	r7, #24
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80080b0:	f04f 33ff 	mov.w	r3, #4294967295
 80080b4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d031      	beq.n	8008122 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	617b      	str	r3, [r7, #20]
 80080c4:	e002      	b.n	80080cc <get_ldnumber+0x24>
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	3301      	adds	r3, #1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d903      	bls.n	80080dc <get_ldnumber+0x34>
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b3a      	cmp	r3, #58	; 0x3a
 80080da:	d1f4      	bne.n	80080c6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b3a      	cmp	r3, #58	; 0x3a
 80080e2:	d11c      	bne.n	800811e <get_ldnumber+0x76>
			tp = *path;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	60fa      	str	r2, [r7, #12]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	3b30      	subs	r3, #48	; 0x30
 80080f4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b09      	cmp	r3, #9
 80080fa:	d80e      	bhi.n	800811a <get_ldnumber+0x72>
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	429a      	cmp	r2, r3
 8008102:	d10a      	bne.n	800811a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d107      	bne.n	800811a <get_ldnumber+0x72>
					vol = (int)i;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	3301      	adds	r3, #1
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	e002      	b.n	8008124 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800811e:	2300      	movs	r3, #0
 8008120:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008122:	693b      	ldr	r3, [r7, #16]
}
 8008124:	4618      	mov	r0, r3
 8008126:	371c      	adds	r7, #28
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	70da      	strb	r2, [r3, #3]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f04f 32ff 	mov.w	r2, #4294967295
 8008146:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fe fff4 	bl	8007138 <move_window>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <check_fs+0x2a>
 8008156:	2304      	movs	r3, #4
 8008158:	e038      	b.n	80081cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3334      	adds	r3, #52	; 0x34
 800815e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fd38 	bl	8006bd8 <ld_word>
 8008168:	4603      	mov	r3, r0
 800816a:	461a      	mov	r2, r3
 800816c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008170:	429a      	cmp	r2, r3
 8008172:	d001      	beq.n	8008178 <check_fs+0x48>
 8008174:	2303      	movs	r3, #3
 8008176:	e029      	b.n	80081cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800817e:	2be9      	cmp	r3, #233	; 0xe9
 8008180:	d009      	beq.n	8008196 <check_fs+0x66>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008188:	2beb      	cmp	r3, #235	; 0xeb
 800818a:	d11e      	bne.n	80081ca <check_fs+0x9a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008192:	2b90      	cmp	r3, #144	; 0x90
 8008194:	d119      	bne.n	80081ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3334      	adds	r3, #52	; 0x34
 800819a:	3336      	adds	r3, #54	; 0x36
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fd33 	bl	8006c08 <ld_dword>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081a8:	4a0a      	ldr	r2, [pc, #40]	; (80081d4 <check_fs+0xa4>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d101      	bne.n	80081b2 <check_fs+0x82>
 80081ae:	2300      	movs	r3, #0
 80081b0:	e00c      	b.n	80081cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3334      	adds	r3, #52	; 0x34
 80081b6:	3352      	adds	r3, #82	; 0x52
 80081b8:	4618      	mov	r0, r3
 80081ba:	f7fe fd25 	bl	8006c08 <ld_dword>
 80081be:	4603      	mov	r3, r0
 80081c0:	4a05      	ldr	r2, [pc, #20]	; (80081d8 <check_fs+0xa8>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d101      	bne.n	80081ca <check_fs+0x9a>
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081ca:	2302      	movs	r3, #2
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	00544146 	.word	0x00544146
 80081d8:	33544146 	.word	0x33544146

080081dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b096      	sub	sp, #88	; 0x58
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff ff59 	bl	80080a8 <get_ldnumber>
 80081f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da01      	bge.n	8008202 <find_volume+0x26>
 80081fe:	230b      	movs	r3, #11
 8008200:	e265      	b.n	80086ce <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008202:	4ab0      	ldr	r2, [pc, #704]	; (80084c4 <find_volume+0x2e8>)
 8008204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800820a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800820c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820e:	2b00      	cmp	r3, #0
 8008210:	d101      	bne.n	8008216 <find_volume+0x3a>
 8008212:	230c      	movs	r3, #12
 8008214:	e25b      	b.n	80086ce <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800821a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800821c:	79fb      	ldrb	r3, [r7, #7]
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d01a      	beq.n	8008262 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800822c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822e:	785b      	ldrb	r3, [r3, #1]
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fc33 	bl	8006a9c <disk_status>
 8008236:	4603      	mov	r3, r0
 8008238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800823c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10c      	bne.n	8008262 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008248:	79fb      	ldrb	r3, [r7, #7]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d007      	beq.n	800825e <find_volume+0x82>
 800824e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008252:	f003 0304 	and.w	r3, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800825a:	230a      	movs	r3, #10
 800825c:	e237      	b.n	80086ce <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800825e:	2300      	movs	r3, #0
 8008260:	e235      	b.n	80086ce <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	2200      	movs	r2, #0
 8008266:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826a:	b2da      	uxtb	r2, r3
 800826c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	4618      	mov	r0, r3
 8008276:	f7fe fc2b 	bl	8006ad0 <disk_initialize>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008280:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d001      	beq.n	8008290 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800828c:	2303      	movs	r3, #3
 800828e:	e21e      	b.n	80086ce <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d007      	beq.n	80082a6 <find_volume+0xca>
 8008296:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80082a2:	230a      	movs	r3, #10
 80082a4:	e213      	b.n	80086ce <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	7858      	ldrb	r0, [r3, #1]
 80082aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ac:	330c      	adds	r3, #12
 80082ae:	461a      	mov	r2, r3
 80082b0:	2102      	movs	r1, #2
 80082b2:	f7fe fc73 	bl	8006b9c <disk_ioctl>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d001      	beq.n	80082c0 <find_volume+0xe4>
 80082bc:	2301      	movs	r3, #1
 80082be:	e206      	b.n	80086ce <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80082c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c2:	899b      	ldrh	r3, [r3, #12]
 80082c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c8:	d80d      	bhi.n	80082e6 <find_volume+0x10a>
 80082ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082cc:	899b      	ldrh	r3, [r3, #12]
 80082ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d2:	d308      	bcc.n	80082e6 <find_volume+0x10a>
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	899b      	ldrh	r3, [r3, #12]
 80082d8:	461a      	mov	r2, r3
 80082da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082dc:	899b      	ldrh	r3, [r3, #12]
 80082de:	3b01      	subs	r3, #1
 80082e0:	4013      	ands	r3, r2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <find_volume+0x10e>
 80082e6:	2301      	movs	r3, #1
 80082e8:	e1f1      	b.n	80086ce <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80082ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082f2:	f7ff ff1d 	bl	8008130 <check_fs>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008300:	2b02      	cmp	r3, #2
 8008302:	d14b      	bne.n	800839c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008304:	2300      	movs	r3, #0
 8008306:	643b      	str	r3, [r7, #64]	; 0x40
 8008308:	e01f      	b.n	800834a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008318:	4413      	add	r3, r2
 800831a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800831c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831e:	3304      	adds	r3, #4
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d006      	beq.n	8008334 <find_volume+0x158>
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	3308      	adds	r3, #8
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fc6c 	bl	8006c08 <ld_dword>
 8008330:	4602      	mov	r2, r0
 8008332:	e000      	b.n	8008336 <find_volume+0x15a>
 8008334:	2200      	movs	r2, #0
 8008336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800833e:	440b      	add	r3, r1
 8008340:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008346:	3301      	adds	r3, #1
 8008348:	643b      	str	r3, [r7, #64]	; 0x40
 800834a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834c:	2b03      	cmp	r3, #3
 800834e:	d9dc      	bls.n	800830a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008350:	2300      	movs	r3, #0
 8008352:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <find_volume+0x184>
 800835a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800835c:	3b01      	subs	r3, #1
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008368:	4413      	add	r3, r2
 800836a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800836e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <find_volume+0x1a6>
 8008376:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008378:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800837a:	f7ff fed9 	bl	8008130 <check_fs>
 800837e:	4603      	mov	r3, r0
 8008380:	e000      	b.n	8008384 <find_volume+0x1a8>
 8008382:	2303      	movs	r3, #3
 8008384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800838c:	2b01      	cmp	r3, #1
 800838e:	d905      	bls.n	800839c <find_volume+0x1c0>
 8008390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008392:	3301      	adds	r3, #1
 8008394:	643b      	str	r3, [r7, #64]	; 0x40
 8008396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008398:	2b03      	cmp	r3, #3
 800839a:	d9e1      	bls.n	8008360 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800839c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d101      	bne.n	80083a8 <find_volume+0x1cc>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e192      	b.n	80086ce <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80083a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d901      	bls.n	80083b4 <find_volume+0x1d8>
 80083b0:	230d      	movs	r3, #13
 80083b2:	e18c      	b.n	80086ce <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	3334      	adds	r3, #52	; 0x34
 80083b8:	330b      	adds	r3, #11
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fe fc0c 	bl	8006bd8 <ld_word>
 80083c0:	4603      	mov	r3, r0
 80083c2:	461a      	mov	r2, r3
 80083c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c6:	899b      	ldrh	r3, [r3, #12]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d001      	beq.n	80083d0 <find_volume+0x1f4>
 80083cc:	230d      	movs	r3, #13
 80083ce:	e17e      	b.n	80086ce <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80083d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d2:	3334      	adds	r3, #52	; 0x34
 80083d4:	3316      	adds	r3, #22
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fbfe 	bl	8006bd8 <ld_word>
 80083dc:	4603      	mov	r3, r0
 80083de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d106      	bne.n	80083f4 <find_volume+0x218>
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	3334      	adds	r3, #52	; 0x34
 80083ea:	3324      	adds	r3, #36	; 0x24
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7fe fc0b 	bl	8006c08 <ld_dword>
 80083f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083f8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	789b      	ldrb	r3, [r3, #2]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d005      	beq.n	8008418 <find_volume+0x23c>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	789b      	ldrb	r3, [r3, #2]
 8008410:	2b02      	cmp	r3, #2
 8008412:	d001      	beq.n	8008418 <find_volume+0x23c>
 8008414:	230d      	movs	r3, #13
 8008416:	e15a      	b.n	80086ce <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	789b      	ldrb	r3, [r3, #2]
 800841c:	461a      	mov	r2, r3
 800841e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008420:	fb02 f303 	mul.w	r3, r2, r3
 8008424:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842c:	b29a      	uxth	r2, r3
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008434:	895b      	ldrh	r3, [r3, #10]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <find_volume+0x270>
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	895b      	ldrh	r3, [r3, #10]
 800843e:	461a      	mov	r2, r3
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	895b      	ldrh	r3, [r3, #10]
 8008444:	3b01      	subs	r3, #1
 8008446:	4013      	ands	r3, r2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <find_volume+0x274>
 800844c:	230d      	movs	r3, #13
 800844e:	e13e      	b.n	80086ce <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	3334      	adds	r3, #52	; 0x34
 8008454:	3311      	adds	r3, #17
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fbbe 	bl	8006bd8 <ld_word>
 800845c:	4603      	mov	r3, r0
 800845e:	461a      	mov	r2, r3
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008466:	891b      	ldrh	r3, [r3, #8]
 8008468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800846a:	8992      	ldrh	r2, [r2, #12]
 800846c:	0952      	lsrs	r2, r2, #5
 800846e:	b292      	uxth	r2, r2
 8008470:	fbb3 f1f2 	udiv	r1, r3, r2
 8008474:	fb02 f201 	mul.w	r2, r2, r1
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <find_volume+0x2a8>
 8008480:	230d      	movs	r3, #13
 8008482:	e124      	b.n	80086ce <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008486:	3334      	adds	r3, #52	; 0x34
 8008488:	3313      	adds	r3, #19
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fba4 	bl	8006bd8 <ld_word>
 8008490:	4603      	mov	r3, r0
 8008492:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <find_volume+0x2cc>
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	3334      	adds	r3, #52	; 0x34
 800849e:	3320      	adds	r3, #32
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fbb1 	bl	8006c08 <ld_dword>
 80084a6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	3334      	adds	r3, #52	; 0x34
 80084ac:	330e      	adds	r3, #14
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fb92 	bl	8006bd8 <ld_word>
 80084b4:	4603      	mov	r3, r0
 80084b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80084b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d104      	bne.n	80084c8 <find_volume+0x2ec>
 80084be:	230d      	movs	r3, #13
 80084c0:	e105      	b.n	80086ce <find_volume+0x4f2>
 80084c2:	bf00      	nop
 80084c4:	200002b0 	.word	0x200002b0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80084c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084cc:	4413      	add	r3, r2
 80084ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d0:	8911      	ldrh	r1, [r2, #8]
 80084d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084d4:	8992      	ldrh	r2, [r2, #12]
 80084d6:	0952      	lsrs	r2, r2, #5
 80084d8:	b292      	uxth	r2, r2
 80084da:	fbb1 f2f2 	udiv	r2, r1, r2
 80084de:	b292      	uxth	r2, r2
 80084e0:	4413      	add	r3, r2
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80084e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d201      	bcs.n	80084f0 <find_volume+0x314>
 80084ec:	230d      	movs	r3, #13
 80084ee:	e0ee      	b.n	80086ce <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80084f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f8:	8952      	ldrh	r2, [r2, #10]
 80084fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <find_volume+0x32e>
 8008506:	230d      	movs	r3, #13
 8008508:	e0e1      	b.n	80086ce <find_volume+0x4f2>
		fmt = FS_FAT32;
 800850a:	2303      	movs	r3, #3
 800850c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008516:	4293      	cmp	r3, r2
 8008518:	d802      	bhi.n	8008520 <find_volume+0x344>
 800851a:	2302      	movs	r3, #2
 800851c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008526:	4293      	cmp	r3, r2
 8008528:	d802      	bhi.n	8008530 <find_volume+0x354>
 800852a:	2301      	movs	r3, #1
 800852c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	1c9a      	adds	r2, r3, #2
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800853c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800853e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008542:	441a      	add	r2, r3
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008548:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	441a      	add	r2, r3
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008552:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008556:	2b03      	cmp	r3, #3
 8008558:	d11e      	bne.n	8008598 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855c:	3334      	adds	r3, #52	; 0x34
 800855e:	332a      	adds	r3, #42	; 0x2a
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe fb39 	bl	8006bd8 <ld_word>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <find_volume+0x394>
 800856c:	230d      	movs	r3, #13
 800856e:	e0ae      	b.n	80086ce <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	891b      	ldrh	r3, [r3, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <find_volume+0x3a0>
 8008578:	230d      	movs	r3, #13
 800857a:	e0a8      	b.n	80086ce <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	3334      	adds	r3, #52	; 0x34
 8008580:	332c      	adds	r3, #44	; 0x2c
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fb40 	bl	8006c08 <ld_dword>
 8008588:	4602      	mov	r2, r0
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800858e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	647b      	str	r3, [r7, #68]	; 0x44
 8008596:	e01f      	b.n	80085d8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	891b      	ldrh	r3, [r3, #8]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <find_volume+0x3c8>
 80085a0:	230d      	movs	r3, #13
 80085a2:	e094      	b.n	80086ce <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80085a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085aa:	441a      	add	r2, r3
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80085b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085b4:	2b02      	cmp	r3, #2
 80085b6:	d103      	bne.n	80085c0 <find_volume+0x3e4>
 80085b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	e00a      	b.n	80085d6 <find_volume+0x3fa>
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	699a      	ldr	r2, [r3, #24]
 80085c4:	4613      	mov	r3, r2
 80085c6:	005b      	lsls	r3, r3, #1
 80085c8:	4413      	add	r3, r2
 80085ca:	085a      	lsrs	r2, r3, #1
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	699b      	ldr	r3, [r3, #24]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80085d6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	69da      	ldr	r2, [r3, #28]
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	899b      	ldrh	r3, [r3, #12]
 80085e0:	4619      	mov	r1, r3
 80085e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e4:	440b      	add	r3, r1
 80085e6:	3b01      	subs	r3, #1
 80085e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085ea:	8989      	ldrh	r1, [r1, #12]
 80085ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d201      	bcs.n	80085f8 <find_volume+0x41c>
 80085f4:	230d      	movs	r3, #13
 80085f6:	e06a      	b.n	80086ce <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80085f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085fa:	f04f 32ff 	mov.w	r2, #4294967295
 80085fe:	615a      	str	r2, [r3, #20]
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	695a      	ldr	r2, [r3, #20]
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	2280      	movs	r2, #128	; 0x80
 800860c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800860e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008612:	2b03      	cmp	r3, #3
 8008614:	d149      	bne.n	80086aa <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	3334      	adds	r3, #52	; 0x34
 800861a:	3330      	adds	r3, #48	; 0x30
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe fadb 	bl	8006bd8 <ld_word>
 8008622:	4603      	mov	r3, r0
 8008624:	2b01      	cmp	r3, #1
 8008626:	d140      	bne.n	80086aa <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800862a:	3301      	adds	r3, #1
 800862c:	4619      	mov	r1, r3
 800862e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008630:	f7fe fd82 	bl	8007138 <move_window>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d137      	bne.n	80086aa <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	2200      	movs	r2, #0
 800863e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	3334      	adds	r3, #52	; 0x34
 8008644:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008648:	4618      	mov	r0, r3
 800864a:	f7fe fac5 	bl	8006bd8 <ld_word>
 800864e:	4603      	mov	r3, r0
 8008650:	461a      	mov	r2, r3
 8008652:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008656:	429a      	cmp	r2, r3
 8008658:	d127      	bne.n	80086aa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	3334      	adds	r3, #52	; 0x34
 800865e:	4618      	mov	r0, r3
 8008660:	f7fe fad2 	bl	8006c08 <ld_dword>
 8008664:	4603      	mov	r3, r0
 8008666:	4a1c      	ldr	r2, [pc, #112]	; (80086d8 <find_volume+0x4fc>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d11e      	bne.n	80086aa <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	3334      	adds	r3, #52	; 0x34
 8008670:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008674:	4618      	mov	r0, r3
 8008676:	f7fe fac7 	bl	8006c08 <ld_dword>
 800867a:	4603      	mov	r3, r0
 800867c:	4a17      	ldr	r2, [pc, #92]	; (80086dc <find_volume+0x500>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d113      	bne.n	80086aa <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	3334      	adds	r3, #52	; 0x34
 8008686:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe fabc 	bl	8006c08 <ld_dword>
 8008690:	4602      	mov	r2, r0
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	3334      	adds	r3, #52	; 0x34
 800869a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe fab2 	bl	8006c08 <ld_dword>
 80086a4:	4602      	mov	r2, r0
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80086aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80086b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80086b2:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <find_volume+0x504>)
 80086b4:	881b      	ldrh	r3, [r3, #0]
 80086b6:	3301      	adds	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <find_volume+0x504>)
 80086bc:	801a      	strh	r2, [r3, #0]
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <find_volume+0x504>)
 80086c0:	881a      	ldrh	r2, [r3, #0]
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80086c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086c8:	f7fe fcce 	bl	8007068 <clear_lock>
#endif
	return FR_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3758      	adds	r7, #88	; 0x58
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	41615252 	.word	0x41615252
 80086dc:	61417272 	.word	0x61417272
 80086e0:	200002b4 	.word	0x200002b4

080086e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80086ee:	2309      	movs	r3, #9
 80086f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01c      	beq.n	8008732 <validate+0x4e>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d018      	beq.n	8008732 <validate+0x4e>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d013      	beq.n	8008732 <validate+0x4e>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	889a      	ldrh	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	88db      	ldrh	r3, [r3, #6]
 8008714:	429a      	cmp	r2, r3
 8008716:	d10c      	bne.n	8008732 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe f9bc 	bl	8006a9c <disk_status>
 8008724:	4603      	mov	r3, r0
 8008726:	f003 0301 	and.w	r3, r3, #1
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <validate+0x4e>
			res = FR_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d102      	bne.n	800873e <validate+0x5a>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	e000      	b.n	8008740 <validate+0x5c>
 800873e:	2300      	movs	r3, #0
 8008740:	683a      	ldr	r2, [r7, #0]
 8008742:	6013      	str	r3, [r2, #0]
	return res;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b088      	sub	sp, #32
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	4613      	mov	r3, r2
 800875c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008762:	f107 0310 	add.w	r3, r7, #16
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fc9e 	bl	80080a8 <get_ldnumber>
 800876c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da01      	bge.n	8008778 <f_mount+0x28>
 8008774:	230b      	movs	r3, #11
 8008776:	e02b      	b.n	80087d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008778:	4a17      	ldr	r2, [pc, #92]	; (80087d8 <f_mount+0x88>)
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008780:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008788:	69b8      	ldr	r0, [r7, #24]
 800878a:	f7fe fc6d 	bl	8007068 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	2200      	movs	r2, #0
 8008792:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d002      	beq.n	80087a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	490d      	ldr	r1, [pc, #52]	; (80087d8 <f_mount+0x88>)
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <f_mount+0x66>
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d001      	beq.n	80087ba <f_mount+0x6a>
 80087b6:	2300      	movs	r3, #0
 80087b8:	e00a      	b.n	80087d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80087ba:	f107 010c 	add.w	r1, r7, #12
 80087be:	f107 0308 	add.w	r3, r7, #8
 80087c2:	2200      	movs	r2, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7ff fd09 	bl	80081dc <find_volume>
 80087ca:	4603      	mov	r3, r0
 80087cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80087ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3720      	adds	r7, #32
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}
 80087d8:	200002b0 	.word	0x200002b0

080087dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b098      	sub	sp, #96	; 0x60
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	4613      	mov	r3, r2
 80087e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <f_open+0x18>
 80087f0:	2309      	movs	r3, #9
 80087f2:	e1bb      	b.n	8008b6c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80087f4:	79fb      	ldrb	r3, [r7, #7]
 80087f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087fc:	79fa      	ldrb	r2, [r7, #7]
 80087fe:	f107 0110 	add.w	r1, r7, #16
 8008802:	f107 0308 	add.w	r3, r7, #8
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff fce8 	bl	80081dc <find_volume>
 800880c:	4603      	mov	r3, r0
 800880e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008812:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008816:	2b00      	cmp	r3, #0
 8008818:	f040 819f 	bne.w	8008b5a <f_open+0x37e>
		dj.obj.fs = fs;
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	f107 0314 	add.w	r3, r7, #20
 8008826:	4611      	mov	r1, r2
 8008828:	4618      	mov	r0, r3
 800882a:	f7ff fbc7 	bl	8007fbc <follow_path>
 800882e:	4603      	mov	r3, r0
 8008830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008838:	2b00      	cmp	r3, #0
 800883a:	d11a      	bne.n	8008872 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800883c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008840:	b25b      	sxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	da03      	bge.n	800884e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008846:	2306      	movs	r3, #6
 8008848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800884c:	e011      	b.n	8008872 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	f023 0301 	bic.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	bf14      	ite	ne
 8008858:	2301      	movne	r3, #1
 800885a:	2300      	moveq	r3, #0
 800885c:	b2db      	uxtb	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	f107 0314 	add.w	r3, r7, #20
 8008864:	4611      	mov	r1, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fab6 	bl	8006dd8 <chk_lock>
 800886c:	4603      	mov	r3, r0
 800886e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	f003 031c 	and.w	r3, r3, #28
 8008878:	2b00      	cmp	r3, #0
 800887a:	d07f      	beq.n	800897c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800887c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008880:	2b00      	cmp	r3, #0
 8008882:	d017      	beq.n	80088b4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008884:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008888:	2b04      	cmp	r3, #4
 800888a:	d10e      	bne.n	80088aa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800888c:	f7fe fb00 	bl	8006e90 <enq_lock>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <f_open+0xc8>
 8008896:	f107 0314 	add.w	r3, r7, #20
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff fa68 	bl	8007d70 <dir_register>
 80088a0:	4603      	mov	r3, r0
 80088a2:	e000      	b.n	80088a6 <f_open+0xca>
 80088a4:	2312      	movs	r3, #18
 80088a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	f043 0308 	orr.w	r3, r3, #8
 80088b0:	71fb      	strb	r3, [r7, #7]
 80088b2:	e010      	b.n	80088d6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80088b4:	7ebb      	ldrb	r3, [r7, #26]
 80088b6:	f003 0311 	and.w	r3, r3, #17
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <f_open+0xea>
					res = FR_DENIED;
 80088be:	2307      	movs	r3, #7
 80088c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80088c4:	e007      	b.n	80088d6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	f003 0304 	and.w	r3, r3, #4
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d002      	beq.n	80088d6 <f_open+0xfa>
 80088d0:	2308      	movs	r3, #8
 80088d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80088d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d168      	bne.n	80089b0 <f_open+0x1d4>
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	f003 0308 	and.w	r3, r3, #8
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d063      	beq.n	80089b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 80088e8:	f7fe f876 	bl	80069d8 <get_fattime>
 80088ec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80088ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f0:	330e      	adds	r3, #14
 80088f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe f9c5 	bl	8006c84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	3316      	adds	r3, #22
 80088fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe f9bf 	bl	8006c84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	330b      	adds	r3, #11
 800890a:	2220      	movs	r2, #32
 800890c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008912:	4611      	mov	r1, r2
 8008914:	4618      	mov	r0, r3
 8008916:	f7ff f997 	bl	8007c48 <ld_clust>
 800891a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008920:	2200      	movs	r2, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff f9af 	bl	8007c86 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892a:	331c      	adds	r3, #28
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe f9a8 	bl	8006c84 <st_dword>
					fs->wflag = 1;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	2201      	movs	r2, #1
 8008938:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800893a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893c:	2b00      	cmp	r3, #0
 800893e:	d037      	beq.n	80089b0 <f_open+0x1d4>
						dw = fs->winsect;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008944:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008946:	f107 0314 	add.w	r3, r7, #20
 800894a:	2200      	movs	r2, #0
 800894c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fe9f 	bl	8007692 <remove_chain>
 8008954:	4603      	mov	r3, r0
 8008956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800895a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800895e:	2b00      	cmp	r3, #0
 8008960:	d126      	bne.n	80089b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fbe6 	bl	8007138 <move_window>
 800896c:	4603      	mov	r3, r0
 800896e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008976:	3a01      	subs	r2, #1
 8008978:	611a      	str	r2, [r3, #16]
 800897a:	e019      	b.n	80089b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800897c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008980:	2b00      	cmp	r3, #0
 8008982:	d115      	bne.n	80089b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008984:	7ebb      	ldrb	r3, [r7, #26]
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b00      	cmp	r3, #0
 800898c:	d003      	beq.n	8008996 <f_open+0x1ba>
					res = FR_NO_FILE;
 800898e:	2304      	movs	r3, #4
 8008990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008994:	e00c      	b.n	80089b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d007      	beq.n	80089b0 <f_open+0x1d4>
 80089a0:	7ebb      	ldrb	r3, [r7, #26]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <f_open+0x1d4>
						res = FR_DENIED;
 80089aa:	2307      	movs	r3, #7
 80089ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80089b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d128      	bne.n	8008a0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d003      	beq.n	80089ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80089c2:	79fb      	ldrb	r3, [r7, #7]
 80089c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80089d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bf14      	ite	ne
 80089e2:	2301      	movne	r3, #1
 80089e4:	2300      	moveq	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	f107 0314 	add.w	r3, r7, #20
 80089ee:	4611      	mov	r1, r2
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe fa6f 	bl	8006ed4 <inc_lock>
 80089f6:	4602      	mov	r2, r0
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d102      	bne.n	8008a0a <f_open+0x22e>
 8008a04:	2302      	movs	r3, #2
 8008a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f040 80a3 	bne.w	8008b5a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a18:	4611      	mov	r1, r2
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7ff f914 	bl	8007c48 <ld_clust>
 8008a20:	4602      	mov	r2, r0
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a28:	331c      	adds	r3, #28
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe f8ec 	bl	8006c08 <ld_dword>
 8008a30:	4602      	mov	r2, r0
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a3c:	693a      	ldr	r2, [r7, #16]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	88da      	ldrh	r2, [r3, #6]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	79fa      	ldrb	r2, [r7, #7]
 8008a4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3330      	adds	r3, #48	; 0x30
 8008a66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe f956 	bl	8006d1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a72:	79fb      	ldrb	r3, [r7, #7]
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d06e      	beq.n	8008b5a <f_open+0x37e>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d06a      	beq.n	8008b5a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	68da      	ldr	r2, [r3, #12]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	895b      	ldrh	r3, [r3, #10]
 8008a90:	461a      	mov	r2, r3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	899b      	ldrh	r3, [r3, #12]
 8008a96:	fb03 f302 	mul.w	r3, r3, r2
 8008a9a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8008aa8:	e016      	b.n	8008ad8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fbff 	bl	80072b2 <get_fat>
 8008ab4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d802      	bhi.n	8008ac2 <f_open+0x2e6>
 8008abc:	2302      	movs	r3, #2
 8008abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac8:	d102      	bne.n	8008ad0 <f_open+0x2f4>
 8008aca:	2301      	movs	r3, #1
 8008acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008ad0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ad8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d103      	bne.n	8008ae8 <f_open+0x30c>
 8008ae0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d8e0      	bhi.n	8008aaa <f_open+0x2ce>
				}
				fp->clust = clst;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d131      	bne.n	8008b5a <f_open+0x37e>
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	899b      	ldrh	r3, [r3, #12]
 8008afa:	461a      	mov	r2, r3
 8008afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b02:	fb02 f201 	mul.w	r2, r2, r1
 8008b06:	1a9b      	subs	r3, r3, r2
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d026      	beq.n	8008b5a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b10:	4618      	mov	r0, r3
 8008b12:	f7fe fbaf 	bl	8007274 <clust2sect>
 8008b16:	6478      	str	r0, [r7, #68]	; 0x44
 8008b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d103      	bne.n	8008b26 <f_open+0x34a>
						res = FR_INT_ERR;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b24:	e019      	b.n	8008b5a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	899b      	ldrh	r3, [r3, #12]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b34:	441a      	add	r2, r3
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	7858      	ldrb	r0, [r3, #1]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1a      	ldr	r2, [r3, #32]
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f7fd ffe7 	bl	8006b1c <disk_read>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <f_open+0x37e>
 8008b54:	2301      	movs	r3, #1
 8008b56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d002      	beq.n	8008b68 <f_open+0x38c>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3760      	adds	r7, #96	; 0x60
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08e      	sub	sp, #56	; 0x38
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f107 0214 	add.w	r2, r7, #20
 8008b92:	4611      	mov	r1, r2
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fda5 	bl	80086e4 <validate>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008ba0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d107      	bne.n	8008bb8 <f_read+0x44>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	7d5b      	ldrb	r3, [r3, #21]
 8008bac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008bb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <f_read+0x4a>
 8008bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bbc:	e135      	b.n	8008e2a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	7d1b      	ldrb	r3, [r3, #20]
 8008bc2:	f003 0301 	and.w	r3, r3, #1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <f_read+0x5a>
 8008bca:	2307      	movs	r3, #7
 8008bcc:	e12d      	b.n	8008e2a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	68da      	ldr	r2, [r3, #12]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	1ad3      	subs	r3, r2, r3
 8008bd8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008bda:	687a      	ldr	r2, [r7, #4]
 8008bdc:	6a3b      	ldr	r3, [r7, #32]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	f240 811e 	bls.w	8008e20 <f_read+0x2ac>
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008be8:	e11a      	b.n	8008e20 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	699b      	ldr	r3, [r3, #24]
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	8992      	ldrh	r2, [r2, #12]
 8008bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bf6:	fb02 f201 	mul.w	r2, r2, r1
 8008bfa:	1a9b      	subs	r3, r3, r2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f040 80d5 	bne.w	8008dac <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	8992      	ldrh	r2, [r2, #12]
 8008c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	8952      	ldrh	r2, [r2, #10]
 8008c12:	3a01      	subs	r2, #1
 8008c14:	4013      	ands	r3, r2
 8008c16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d12f      	bne.n	8008c7e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d103      	bne.n	8008c2e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c2c:	e013      	b.n	8008c56 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	699b      	ldr	r3, [r3, #24]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7fe fe25 	bl	800788c <clmt_clust>
 8008c42:	6338      	str	r0, [r7, #48]	; 0x30
 8008c44:	e007      	b.n	8008c56 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	4610      	mov	r0, r2
 8008c50:	f7fe fb2f 	bl	80072b2 <get_fat>
 8008c54:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d804      	bhi.n	8008c66 <f_read+0xf2>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	755a      	strb	r2, [r3, #21]
 8008c62:	2302      	movs	r3, #2
 8008c64:	e0e1      	b.n	8008e2a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6c:	d104      	bne.n	8008c78 <f_read+0x104>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2201      	movs	r2, #1
 8008c72:	755a      	strb	r2, [r3, #21]
 8008c74:	2301      	movs	r3, #1
 8008c76:	e0d8      	b.n	8008e2a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c7e:	697a      	ldr	r2, [r7, #20]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	4619      	mov	r1, r3
 8008c86:	4610      	mov	r0, r2
 8008c88:	f7fe faf4 	bl	8007274 <clust2sect>
 8008c8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d104      	bne.n	8008c9e <f_read+0x12a>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2202      	movs	r2, #2
 8008c98:	755a      	strb	r2, [r3, #21]
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	e0c5      	b.n	8008e2a <f_read+0x2b6>
			sect += csect;
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	899b      	ldrh	r3, [r3, #12]
 8008caa:	461a      	mov	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d041      	beq.n	8008d3e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	4413      	add	r3, r2
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	8952      	ldrh	r2, [r2, #10]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d905      	bls.n	8008cd4 <f_read+0x160>
					cc = fs->csize - csect;
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	895b      	ldrh	r3, [r3, #10]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	7858      	ldrb	r0, [r3, #1]
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cde:	f7fd ff1d 	bl	8006b1c <disk_read>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d004      	beq.n	8008cf2 <f_read+0x17e>
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2201      	movs	r2, #1
 8008cec:	755a      	strb	r2, [r3, #21]
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e09b      	b.n	8008e2a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	7d1b      	ldrb	r3, [r3, #20]
 8008cf6:	b25b      	sxtb	r3, r3
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	da18      	bge.n	8008d2e <f_read+0x1ba>
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6a1a      	ldr	r2, [r3, #32]
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d911      	bls.n	8008d2e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6a1a      	ldr	r2, [r3, #32]
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	8992      	ldrh	r2, [r2, #12]
 8008d16:	fb02 f303 	mul.w	r3, r2, r3
 8008d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d1c:	18d0      	adds	r0, r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	899b      	ldrh	r3, [r3, #12]
 8008d28:	461a      	mov	r2, r3
 8008d2a:	f7fd ffd7 	bl	8006cdc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008d2e:	697b      	ldr	r3, [r7, #20]
 8008d30:	899b      	ldrh	r3, [r3, #12]
 8008d32:	461a      	mov	r2, r3
 8008d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
 8008d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008d3c:	e05c      	b.n	8008df8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d02e      	beq.n	8008da6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	7d1b      	ldrb	r3, [r3, #20]
 8008d4c:	b25b      	sxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da18      	bge.n	8008d84 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	7858      	ldrb	r0, [r3, #1]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1a      	ldr	r2, [r3, #32]
 8008d60:	2301      	movs	r3, #1
 8008d62:	f7fd fefb 	bl	8006b5c <disk_write>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d004      	beq.n	8008d76 <f_read+0x202>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	755a      	strb	r2, [r3, #21]
 8008d72:	2301      	movs	r3, #1
 8008d74:	e059      	b.n	8008e2a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	7d1b      	ldrb	r3, [r3, #20]
 8008d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	7858      	ldrb	r0, [r3, #1]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d8e:	2301      	movs	r3, #1
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	f7fd fec3 	bl	8006b1c <disk_read>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d004      	beq.n	8008da6 <f_read+0x232>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	755a      	strb	r2, [r3, #21]
 8008da2:	2301      	movs	r3, #1
 8008da4:	e041      	b.n	8008e2a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	899b      	ldrh	r3, [r3, #12]
 8008db0:	4618      	mov	r0, r3
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	8992      	ldrh	r2, [r2, #12]
 8008dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dbe:	fb02 f201 	mul.w	r2, r2, r1
 8008dc2:	1a9b      	subs	r3, r3, r2
 8008dc4:	1ac3      	subs	r3, r0, r3
 8008dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008dc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d901      	bls.n	8008dd4 <f_read+0x260>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	8992      	ldrh	r2, [r2, #12]
 8008de2:	fbb3 f0f2 	udiv	r0, r3, r2
 8008de6:	fb02 f200 	mul.w	r2, r2, r0
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	440b      	add	r3, r1
 8008dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df0:	4619      	mov	r1, r3
 8008df2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008df4:	f7fd ff72 	bl	8006cdc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	4413      	add	r3, r2
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	441a      	add	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	619a      	str	r2, [r3, #24]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	441a      	add	r2, r3
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f47f aee1 	bne.w	8008bea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3738      	adds	r7, #56	; 0x38
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08c      	sub	sp, #48	; 0x30
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2200      	movs	r2, #0
 8008e48:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f107 0210 	add.w	r2, r7, #16
 8008e50:	4611      	mov	r1, r2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7ff fc46 	bl	80086e4 <validate>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d107      	bne.n	8008e76 <f_write+0x44>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	7d5b      	ldrb	r3, [r3, #21]
 8008e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d002      	beq.n	8008e7c <f_write+0x4a>
 8008e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e7a:	e16a      	b.n	8009152 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	7d1b      	ldrb	r3, [r3, #20]
 8008e80:	f003 0302 	and.w	r3, r3, #2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <f_write+0x5a>
 8008e88:	2307      	movs	r3, #7
 8008e8a:	e162      	b.n	8009152 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	699a      	ldr	r2, [r3, #24]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	441a      	add	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	f080 814c 	bcs.w	8009136 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	699b      	ldr	r3, [r3, #24]
 8008ea2:	43db      	mvns	r3, r3
 8008ea4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008ea6:	e146      	b.n	8009136 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	8992      	ldrh	r2, [r2, #12]
 8008eb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008eb4:	fb02 f201 	mul.w	r2, r2, r1
 8008eb8:	1a9b      	subs	r3, r3, r2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	f040 80f1 	bne.w	80090a2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	8992      	ldrh	r2, [r2, #12]
 8008ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	8952      	ldrh	r2, [r2, #10]
 8008ed0:	3a01      	subs	r2, #1
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d143      	bne.n	8008f64 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10c      	bne.n	8008efe <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d11a      	bne.n	8008f26 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fe fc31 	bl	800775c <create_chain>
 8008efa:	62b8      	str	r0, [r7, #40]	; 0x28
 8008efc:	e013      	b.n	8008f26 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7fe fcbd 	bl	800788c <clmt_clust>
 8008f12:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f14:	e007      	b.n	8008f26 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe fc1c 	bl	800775c <create_chain>
 8008f24:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	f000 8109 	beq.w	8009140 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d104      	bne.n	8008f3e <f_write+0x10c>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2202      	movs	r2, #2
 8008f38:	755a      	strb	r2, [r3, #21]
 8008f3a:	2302      	movs	r3, #2
 8008f3c:	e109      	b.n	8009152 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f44:	d104      	bne.n	8008f50 <f_write+0x11e>
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	755a      	strb	r2, [r3, #21]
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e100      	b.n	8009152 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d102      	bne.n	8008f64 <f_write+0x132>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	7d1b      	ldrb	r3, [r3, #20]
 8008f68:	b25b      	sxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	da18      	bge.n	8008fa0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	7858      	ldrb	r0, [r3, #1]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6a1a      	ldr	r2, [r3, #32]
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	f7fd fded 	bl	8006b5c <disk_write>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d004      	beq.n	8008f92 <f_write+0x160>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	755a      	strb	r2, [r3, #21]
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e0df      	b.n	8009152 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	7d1b      	ldrb	r3, [r3, #20]
 8008f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	69db      	ldr	r3, [r3, #28]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	4610      	mov	r0, r2
 8008faa:	f7fe f963 	bl	8007274 <clust2sect>
 8008fae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d104      	bne.n	8008fc0 <f_write+0x18e>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	755a      	strb	r2, [r3, #21]
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e0c8      	b.n	8009152 <f_write+0x320>
			sect += csect;
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	899b      	ldrh	r3, [r3, #12]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d043      	beq.n	8009064 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	6a3b      	ldr	r3, [r7, #32]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	8952      	ldrh	r2, [r2, #10]
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d905      	bls.n	8008ff6 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	895b      	ldrh	r3, [r3, #10]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	7858      	ldrb	r0, [r3, #1]
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	69f9      	ldr	r1, [r7, #28]
 8009000:	f7fd fdac 	bl	8006b5c <disk_write>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d004      	beq.n	8009014 <f_write+0x1e2>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2201      	movs	r2, #1
 800900e:	755a      	strb	r2, [r3, #21]
 8009010:	2301      	movs	r3, #1
 8009012:	e09e      	b.n	8009152 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	6a1a      	ldr	r2, [r3, #32]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	6a3a      	ldr	r2, [r7, #32]
 800901e:	429a      	cmp	r2, r3
 8009020:	d918      	bls.n	8009054 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a1a      	ldr	r2, [r3, #32]
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	8992      	ldrh	r2, [r2, #12]
 8009034:	fb02 f303 	mul.w	r3, r2, r3
 8009038:	69fa      	ldr	r2, [r7, #28]
 800903a:	18d1      	adds	r1, r2, r3
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	899b      	ldrh	r3, [r3, #12]
 8009040:	461a      	mov	r2, r3
 8009042:	f7fd fe4b 	bl	8006cdc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	7d1b      	ldrb	r3, [r3, #20]
 800904a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800904e:	b2da      	uxtb	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	899b      	ldrh	r3, [r3, #12]
 8009058:	461a      	mov	r2, r3
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	fb02 f303 	mul.w	r3, r2, r3
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009062:	e04b      	b.n	80090fc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	429a      	cmp	r2, r3
 800906c:	d016      	beq.n	800909c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009076:	429a      	cmp	r2, r3
 8009078:	d210      	bcs.n	800909c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	7858      	ldrb	r0, [r3, #1]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009084:	2301      	movs	r3, #1
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	f7fd fd48 	bl	8006b1c <disk_read>
 800908c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	755a      	strb	r2, [r3, #21]
 8009098:	2301      	movs	r3, #1
 800909a:	e05a      	b.n	8009152 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	899b      	ldrh	r3, [r3, #12]
 80090a6:	4618      	mov	r0, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	8992      	ldrh	r2, [r2, #12]
 80090b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80090b4:	fb02 f201 	mul.w	r2, r2, r1
 80090b8:	1a9b      	subs	r3, r3, r2
 80090ba:	1ac3      	subs	r3, r0, r3
 80090bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80090be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d901      	bls.n	80090ca <f_write+0x298>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	8992      	ldrh	r2, [r2, #12]
 80090d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80090dc:	fb02 f200 	mul.w	r2, r2, r0
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	440b      	add	r3, r1
 80090e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090e6:	69f9      	ldr	r1, [r7, #28]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fd fdf7 	bl	8006cdc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	7d1b      	ldrb	r3, [r3, #20]
 80090f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	4413      	add	r3, r2
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	699a      	ldr	r2, [r3, #24]
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	441a      	add	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	619a      	str	r2, [r3, #24]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	68da      	ldr	r2, [r3, #12]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	429a      	cmp	r2, r3
 800911a:	bf38      	it	cc
 800911c:	461a      	movcc	r2, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	60da      	str	r2, [r3, #12]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	441a      	add	r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	f47f aeb5 	bne.w	8008ea8 <f_write+0x76>
 800913e:	e000      	b.n	8009142 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009140:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	7d1b      	ldrb	r3, [r3, #20]
 8009146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800914a:	b2da      	uxtb	r2, r3
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3730      	adds	r7, #48	; 0x30
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b086      	sub	sp, #24
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f107 0208 	add.w	r2, r7, #8
 8009168:	4611      	mov	r1, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff faba 	bl	80086e4 <validate>
 8009170:	4603      	mov	r3, r0
 8009172:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d168      	bne.n	800924c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	7d1b      	ldrb	r3, [r3, #20]
 800917e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009182:	2b00      	cmp	r3, #0
 8009184:	d062      	beq.n	800924c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	7d1b      	ldrb	r3, [r3, #20]
 800918a:	b25b      	sxtb	r3, r3
 800918c:	2b00      	cmp	r3, #0
 800918e:	da15      	bge.n	80091bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	7858      	ldrb	r0, [r3, #1]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a1a      	ldr	r2, [r3, #32]
 800919e:	2301      	movs	r3, #1
 80091a0:	f7fd fcdc 	bl	8006b5c <disk_write>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <f_sync+0x54>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e04f      	b.n	800924e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	7d1b      	ldrb	r3, [r3, #20]
 80091b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80091bc:	f7fd fc0c 	bl	80069d8 <get_fattime>
 80091c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fd ffb4 	bl	8007138 <move_window>
 80091d0:	4603      	mov	r3, r0
 80091d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d138      	bne.n	800924c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	330b      	adds	r3, #11
 80091e4:	781a      	ldrb	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	330b      	adds	r3, #11
 80091ea:	f042 0220 	orr.w	r2, r2, #32
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6818      	ldr	r0, [r3, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	461a      	mov	r2, r3
 80091fc:	68f9      	ldr	r1, [r7, #12]
 80091fe:	f7fe fd42 	bl	8007c86 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f103 021c 	add.w	r2, r3, #28
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4619      	mov	r1, r3
 800920e:	4610      	mov	r0, r2
 8009210:	f7fd fd38 	bl	8006c84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3316      	adds	r3, #22
 8009218:	6939      	ldr	r1, [r7, #16]
 800921a:	4618      	mov	r0, r3
 800921c:	f7fd fd32 	bl	8006c84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3312      	adds	r3, #18
 8009224:	2100      	movs	r1, #0
 8009226:	4618      	mov	r0, r3
 8009228:	f7fd fd11 	bl	8006c4e <st_word>
					fs->wflag = 1;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2201      	movs	r2, #1
 8009230:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	4618      	mov	r0, r3
 8009236:	f7fd ffad 	bl	8007194 <sync_fs>
 800923a:	4603      	mov	r3, r0
 800923c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	7d1b      	ldrb	r3, [r3, #20]
 8009242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009246:	b2da      	uxtb	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800924c:	7dfb      	ldrb	r3, [r7, #23]
}
 800924e:	4618      	mov	r0, r3
 8009250:	3718      	adds	r7, #24
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b084      	sub	sp, #16
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff ff7b 	bl	800915a <f_sync>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d118      	bne.n	80092a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f107 0208 	add.w	r2, r7, #8
 8009274:	4611      	mov	r1, r2
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff fa34 	bl	80086e4 <validate>
 800927c:	4603      	mov	r3, r0
 800927e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009280:	7bfb      	ldrb	r3, [r7, #15]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d10c      	bne.n	80092a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	4618      	mov	r0, r3
 800928c:	f7fd feb0 	bl	8006ff0 <dec_lock>
 8009290:	4603      	mov	r3, r0
 8009292:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b090      	sub	sp, #64	; 0x40
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f107 0208 	add.w	r2, r7, #8
 80092ba:	4611      	mov	r1, r2
 80092bc:	4618      	mov	r0, r3
 80092be:	f7ff fa11 	bl	80086e4 <validate>
 80092c2:	4603      	mov	r3, r0
 80092c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80092c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d103      	bne.n	80092d8 <f_lseek+0x2e>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	7d5b      	ldrb	r3, [r3, #21]
 80092d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80092d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <f_lseek+0x3c>
 80092e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092e4:	e201      	b.n	80096ea <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 80d9 	beq.w	80094a2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f6:	d15a      	bne.n	80093ae <f_lseek+0x104>
			tbl = fp->cltbl;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	1d1a      	adds	r2, r3, #4
 8009302:	627a      	str	r2, [r7, #36]	; 0x24
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	617b      	str	r3, [r7, #20]
 8009308:	2302      	movs	r3, #2
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	2b00      	cmp	r3, #0
 8009316:	d03a      	beq.n	800938e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	2300      	movs	r3, #0
 800931e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009322:	3302      	adds	r3, #2
 8009324:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932c:	3301      	adds	r3, #1
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009334:	4618      	mov	r0, r3
 8009336:	f7fd ffbc 	bl	80072b2 <get_fat>
 800933a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	2b01      	cmp	r3, #1
 8009340:	d804      	bhi.n	800934c <f_lseek+0xa2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2202      	movs	r2, #2
 8009346:	755a      	strb	r2, [r3, #21]
 8009348:	2302      	movs	r3, #2
 800934a:	e1ce      	b.n	80096ea <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009352:	d104      	bne.n	800935e <f_lseek+0xb4>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	755a      	strb	r2, [r3, #21]
 800935a:	2301      	movs	r3, #1
 800935c:	e1c5      	b.n	80096ea <f_lseek+0x440>
					} while (cl == pcl + 1);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3301      	adds	r3, #1
 8009362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009364:	429a      	cmp	r2, r3
 8009366:	d0de      	beq.n	8009326 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d809      	bhi.n	8009384 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	627a      	str	r2, [r7, #36]	; 0x24
 8009376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009378:	601a      	str	r2, [r3, #0]
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	1d1a      	adds	r2, r3, #4
 800937e:	627a      	str	r2, [r7, #36]	; 0x24
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800938a:	429a      	cmp	r2, r3
 800938c:	d3c4      	bcc.n	8009318 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009394:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	429a      	cmp	r2, r3
 800939c:	d803      	bhi.n	80093a6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	2200      	movs	r2, #0
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	e19f      	b.n	80096e6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80093a6:	2311      	movs	r3, #17
 80093a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80093ac:	e19b      	b.n	80096e6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	683a      	ldr	r2, [r7, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d902      	bls.n	80093be <f_lseek+0x114>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	683a      	ldr	r2, [r7, #0]
 80093c2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 818d 	beq.w	80096e6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	3b01      	subs	r3, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7fe fa5a 	bl	800788c <clmt_clust>
 80093d8:	4602      	mov	r2, r0
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	4619      	mov	r1, r3
 80093e6:	4610      	mov	r0, r2
 80093e8:	f7fd ff44 	bl	8007274 <clust2sect>
 80093ec:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d104      	bne.n	80093fe <f_lseek+0x154>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	755a      	strb	r2, [r3, #21]
 80093fa:	2302      	movs	r3, #2
 80093fc:	e175      	b.n	80096ea <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	3b01      	subs	r3, #1
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	8992      	ldrh	r2, [r2, #12]
 8009406:	fbb3 f3f2 	udiv	r3, r3, r2
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	8952      	ldrh	r2, [r2, #10]
 800940e:	3a01      	subs	r2, #1
 8009410:	4013      	ands	r3, r2
 8009412:	69ba      	ldr	r2, [r7, #24]
 8009414:	4413      	add	r3, r2
 8009416:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	8992      	ldrh	r2, [r2, #12]
 8009420:	fbb3 f1f2 	udiv	r1, r3, r2
 8009424:	fb02 f201 	mul.w	r2, r2, r1
 8009428:	1a9b      	subs	r3, r3, r2
 800942a:	2b00      	cmp	r3, #0
 800942c:	f000 815b 	beq.w	80096e6 <f_lseek+0x43c>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	429a      	cmp	r2, r3
 8009438:	f000 8155 	beq.w	80096e6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	7d1b      	ldrb	r3, [r3, #20]
 8009440:	b25b      	sxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	da18      	bge.n	8009478 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	7858      	ldrb	r0, [r3, #1]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1a      	ldr	r2, [r3, #32]
 8009454:	2301      	movs	r3, #1
 8009456:	f7fd fb81 	bl	8006b5c <disk_write>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <f_lseek+0x1c0>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	755a      	strb	r2, [r3, #21]
 8009466:	2301      	movs	r3, #1
 8009468:	e13f      	b.n	80096ea <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	7d1b      	ldrb	r3, [r3, #20]
 800946e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009472:	b2da      	uxtb	r2, r3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	7858      	ldrb	r0, [r3, #1]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009482:	2301      	movs	r3, #1
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	f7fd fb49 	bl	8006b1c <disk_read>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d004      	beq.n	800949a <f_lseek+0x1f0>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	755a      	strb	r2, [r3, #21]
 8009496:	2301      	movs	r3, #1
 8009498:	e127      	b.n	80096ea <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	621a      	str	r2, [r3, #32]
 80094a0:	e121      	b.n	80096e6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d908      	bls.n	80094be <f_lseek+0x214>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7d1b      	ldrb	r3, [r3, #20]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d102      	bne.n	80094be <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	637b      	str	r3, [r7, #52]	; 0x34
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094cc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 80b5 	beq.w	8009640 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	895b      	ldrh	r3, [r3, #10]
 80094da:	461a      	mov	r2, r3
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	899b      	ldrh	r3, [r3, #12]
 80094e0:	fb03 f302 	mul.w	r3, r3, r2
 80094e4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01b      	beq.n	8009524 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	1e5a      	subs	r2, r3, #1
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	1e59      	subs	r1, r3, #1
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009500:	429a      	cmp	r2, r3
 8009502:	d30f      	bcc.n	8009524 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	1e5a      	subs	r2, r3, #1
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	425b      	negs	r3, r3
 800950c:	401a      	ands	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	69db      	ldr	r3, [r3, #28]
 8009520:	63bb      	str	r3, [r7, #56]	; 0x38
 8009522:	e022      	b.n	800956a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800952a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952c:	2b00      	cmp	r3, #0
 800952e:	d119      	bne.n	8009564 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2100      	movs	r1, #0
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe f911 	bl	800775c <create_chain>
 800953a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	2b01      	cmp	r3, #1
 8009540:	d104      	bne.n	800954c <f_lseek+0x2a2>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2202      	movs	r2, #2
 8009546:	755a      	strb	r2, [r3, #21]
 8009548:	2302      	movs	r3, #2
 800954a:	e0ce      	b.n	80096ea <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009552:	d104      	bne.n	800955e <f_lseek+0x2b4>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	755a      	strb	r2, [r3, #21]
 800955a:	2301      	movs	r3, #1
 800955c:	e0c5      	b.n	80096ea <f_lseek+0x440>
					fp->obj.sclust = clst;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009562:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009568:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	2b00      	cmp	r3, #0
 800956e:	d067      	beq.n	8009640 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8009570:	e03a      	b.n	80095e8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8009572:	683a      	ldr	r2, [r7, #0]
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	1ad3      	subs	r3, r2, r3
 8009578:	603b      	str	r3, [r7, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	69fb      	ldr	r3, [r7, #28]
 8009580:	441a      	add	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	7d1b      	ldrb	r3, [r3, #20]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00b      	beq.n	80095aa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe f8e0 	bl	800775c <create_chain>
 800959c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800959e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d108      	bne.n	80095b6 <f_lseek+0x30c>
							ofs = 0; break;
 80095a4:	2300      	movs	r3, #0
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	e022      	b.n	80095f0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7fd fe7f 	bl	80072b2 <get_fat>
 80095b4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80095b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095bc:	d104      	bne.n	80095c8 <f_lseek+0x31e>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	755a      	strb	r2, [r3, #21]
 80095c4:	2301      	movs	r3, #1
 80095c6:	e090      	b.n	80096ea <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d904      	bls.n	80095d8 <f_lseek+0x32e>
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	699b      	ldr	r3, [r3, #24]
 80095d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d304      	bcc.n	80095e2 <f_lseek+0x338>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2202      	movs	r2, #2
 80095dc:	755a      	strb	r2, [r3, #21]
 80095de:	2302      	movs	r3, #2
 80095e0:	e083      	b.n	80096ea <f_lseek+0x440>
					fp->clust = clst;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095e6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d8c0      	bhi.n	8009572 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699a      	ldr	r2, [r3, #24]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	441a      	add	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	899b      	ldrh	r3, [r3, #12]
 8009600:	461a      	mov	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	fbb3 f1f2 	udiv	r1, r3, r2
 8009608:	fb02 f201 	mul.w	r2, r2, r1
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d016      	beq.n	8009640 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009616:	4618      	mov	r0, r3
 8009618:	f7fd fe2c 	bl	8007274 <clust2sect>
 800961c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800961e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009620:	2b00      	cmp	r3, #0
 8009622:	d104      	bne.n	800962e <f_lseek+0x384>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2202      	movs	r2, #2
 8009628:	755a      	strb	r2, [r3, #21]
 800962a:	2302      	movs	r3, #2
 800962c:	e05d      	b.n	80096ea <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	899b      	ldrh	r3, [r3, #12]
 8009632:	461a      	mov	r2, r3
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	fbb3 f3f2 	udiv	r3, r3, r2
 800963a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800963c:	4413      	add	r3, r2
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	699a      	ldr	r2, [r3, #24]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	429a      	cmp	r2, r3
 800964a:	d90a      	bls.n	8009662 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	699a      	ldr	r2, [r3, #24]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7d1b      	ldrb	r3, [r3, #20]
 8009658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800965c:	b2da      	uxtb	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	699b      	ldr	r3, [r3, #24]
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	8992      	ldrh	r2, [r2, #12]
 800966a:	fbb3 f1f2 	udiv	r1, r3, r2
 800966e:	fb02 f201 	mul.w	r2, r2, r1
 8009672:	1a9b      	subs	r3, r3, r2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d036      	beq.n	80096e6 <f_lseek+0x43c>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
 800967c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800967e:	429a      	cmp	r2, r3
 8009680:	d031      	beq.n	80096e6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	7d1b      	ldrb	r3, [r3, #20]
 8009686:	b25b      	sxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	da18      	bge.n	80096be <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	7858      	ldrb	r0, [r3, #1]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1a      	ldr	r2, [r3, #32]
 800969a:	2301      	movs	r3, #1
 800969c:	f7fd fa5e 	bl	8006b5c <disk_write>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d004      	beq.n	80096b0 <f_lseek+0x406>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	755a      	strb	r2, [r3, #21]
 80096ac:	2301      	movs	r3, #1
 80096ae:	e01c      	b.n	80096ea <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	7d1b      	ldrb	r3, [r3, #20]
 80096b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	7858      	ldrb	r0, [r3, #1]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80096c8:	2301      	movs	r3, #1
 80096ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096cc:	f7fd fa26 	bl	8006b1c <disk_read>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <f_lseek+0x436>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2201      	movs	r2, #1
 80096da:	755a      	strb	r2, [r3, #21]
 80096dc:	2301      	movs	r3, #1
 80096de:	e004      	b.n	80096ea <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096e4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80096e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3740      	adds	r7, #64	; 0x40
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b090      	sub	sp, #64	; 0x40
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80096fc:	f107 010c 	add.w	r1, r7, #12
 8009700:	1d3b      	adds	r3, r7, #4
 8009702:	2200      	movs	r2, #0
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe fd69 	bl	80081dc <find_volume>
 800970a:	4603      	mov	r3, r0
 800970c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8009710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009714:	2b00      	cmp	r3, #0
 8009716:	d11f      	bne.n	8009758 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	f107 030c 	add.w	r3, r7, #12
 800971e:	4611      	mov	r1, r2
 8009720:	4618      	mov	r0, r3
 8009722:	f7fe fc4b 	bl	8007fbc <follow_path>
 8009726:	4603      	mov	r3, r0
 8009728:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800972c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009730:	2b00      	cmp	r3, #0
 8009732:	d111      	bne.n	8009758 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009734:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009738:	b25b      	sxtb	r3, r3
 800973a:	2b00      	cmp	r3, #0
 800973c:	da03      	bge.n	8009746 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800973e:	2306      	movs	r3, #6
 8009740:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009744:	e008      	b.n	8009758 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d005      	beq.n	8009758 <f_stat+0x66>
 800974c:	f107 030c 	add.w	r3, r7, #12
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7fe fb3e 	bl	8007dd4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8009758:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800975c:	4618      	mov	r0, r3
 800975e:	3740      	adds	r7, #64	; 0x40
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	2b0a      	cmp	r3, #10
 8009774:	d103      	bne.n	800977e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009776:	210d      	movs	r1, #13
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fff3 	bl	8009764 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	db25      	blt.n	80097d6 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	60fa      	str	r2, [r7, #12]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	4413      	add	r3, r2
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2b3c      	cmp	r3, #60	; 0x3c
 800979c:	dd12      	ble.n	80097c4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6818      	ldr	r0, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f103 010c 	add.w	r1, r3, #12
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	f107 0308 	add.w	r3, r7, #8
 80097ae:	f7ff fb40 	bl	8008e32 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d101      	bne.n	80097be <putc_bfd+0x5a>
 80097ba:	2300      	movs	r3, #0
 80097bc:	e001      	b.n	80097c2 <putc_bfd+0x5e>
 80097be:	f04f 33ff 	mov.w	r3, #4294967295
 80097c2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	689b      	ldr	r3, [r3, #8]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	609a      	str	r2, [r3, #8]
 80097d4:	e000      	b.n	80097d8 <putc_bfd+0x74>
	if (i < 0) return;
 80097d6:	bf00      	nop
}
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	db16      	blt.n	800981c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6818      	ldr	r0, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f103 010c 	add.w	r1, r3, #12
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	461a      	mov	r2, r3
 80097fe:	f107 030c 	add.w	r3, r7, #12
 8009802:	f7ff fb16 	bl	8008e32 <f_write>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d107      	bne.n	800981c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4293      	cmp	r3, r2
 8009814:	d102      	bne.n	800981c <putc_flush+0x3e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	e001      	b.n	8009820 <putc_flush+0x42>
	return EOF;
 800981c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	605a      	str	r2, [r3, #4]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	609a      	str	r2, [r3, #8]
}
 8009846:	bf00      	nop
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b096      	sub	sp, #88	; 0x58
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800985c:	f107 030c 	add.w	r3, r7, #12
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff ffe0 	bl	8009828 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8009868:	e009      	b.n	800987e <f_puts+0x2c>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	781a      	ldrb	r2, [r3, #0]
 8009872:	f107 030c 	add.w	r3, r7, #12
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff ff73 	bl	8009764 <putc_bfd>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d1f1      	bne.n	800986a <f_puts+0x18>
	return putc_flush(&pb);
 8009886:	f107 030c 	add.w	r3, r7, #12
 800988a:	4618      	mov	r0, r3
 800988c:	f7ff ffa7 	bl	80097de <putc_flush>
 8009890:	4603      	mov	r3, r0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3758      	adds	r7, #88	; 0x58
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80098aa:	2301      	movs	r3, #1
 80098ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80098b2:	4b1f      	ldr	r3, [pc, #124]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098b4:	7a5b      	ldrb	r3, [r3, #9]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d131      	bne.n	8009920 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80098bc:	4b1c      	ldr	r3, [pc, #112]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098be:	7a5b      	ldrb	r3, [r3, #9]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098c6:	2100      	movs	r1, #0
 80098c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80098ca:	4b19      	ldr	r3, [pc, #100]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098cc:	7a5b      	ldrb	r3, [r3, #9]
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	4a17      	ldr	r2, [pc, #92]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80098da:	4b15      	ldr	r3, [pc, #84]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098dc:	7a5b      	ldrb	r3, [r3, #9]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b13      	ldr	r3, [pc, #76]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098e4:	4413      	add	r3, r2
 80098e6:	79fa      	ldrb	r2, [r7, #7]
 80098e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80098ea:	4b11      	ldr	r3, [pc, #68]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098ec:	7a5b      	ldrb	r3, [r3, #9]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	b2d1      	uxtb	r1, r2
 80098f4:	4a0e      	ldr	r2, [pc, #56]	; (8009930 <FATFS_LinkDriverEx+0x94>)
 80098f6:	7251      	strb	r1, [r2, #9]
 80098f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80098fa:	7dbb      	ldrb	r3, [r7, #22]
 80098fc:	3330      	adds	r3, #48	; 0x30
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	3301      	adds	r3, #1
 8009908:	223a      	movs	r2, #58	; 0x3a
 800990a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	3302      	adds	r3, #2
 8009910:	222f      	movs	r2, #47	; 0x2f
 8009912:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	3303      	adds	r3, #3
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009920:	7dfb      	ldrb	r3, [r7, #23]
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	200002d8 	.word	0x200002d8

08009934 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800993e:	2200      	movs	r2, #0
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7ff ffaa 	bl	800989c <FATFS_LinkDriverEx>
 8009948:	4603      	mov	r3, r0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3708      	adds	r7, #8
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <__errno>:
 8009954:	4b01      	ldr	r3, [pc, #4]	; (800995c <__errno+0x8>)
 8009956:	6818      	ldr	r0, [r3, #0]
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20000030 	.word	0x20000030

08009960 <__libc_init_array>:
 8009960:	b570      	push	{r4, r5, r6, lr}
 8009962:	4d0d      	ldr	r5, [pc, #52]	; (8009998 <__libc_init_array+0x38>)
 8009964:	4c0d      	ldr	r4, [pc, #52]	; (800999c <__libc_init_array+0x3c>)
 8009966:	1b64      	subs	r4, r4, r5
 8009968:	10a4      	asrs	r4, r4, #2
 800996a:	2600      	movs	r6, #0
 800996c:	42a6      	cmp	r6, r4
 800996e:	d109      	bne.n	8009984 <__libc_init_array+0x24>
 8009970:	4d0b      	ldr	r5, [pc, #44]	; (80099a0 <__libc_init_array+0x40>)
 8009972:	4c0c      	ldr	r4, [pc, #48]	; (80099a4 <__libc_init_array+0x44>)
 8009974:	f002 fec2 	bl	800c6fc <_init>
 8009978:	1b64      	subs	r4, r4, r5
 800997a:	10a4      	asrs	r4, r4, #2
 800997c:	2600      	movs	r6, #0
 800997e:	42a6      	cmp	r6, r4
 8009980:	d105      	bne.n	800998e <__libc_init_array+0x2e>
 8009982:	bd70      	pop	{r4, r5, r6, pc}
 8009984:	f855 3b04 	ldr.w	r3, [r5], #4
 8009988:	4798      	blx	r3
 800998a:	3601      	adds	r6, #1
 800998c:	e7ee      	b.n	800996c <__libc_init_array+0xc>
 800998e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009992:	4798      	blx	r3
 8009994:	3601      	adds	r6, #1
 8009996:	e7f2      	b.n	800997e <__libc_init_array+0x1e>
 8009998:	0800cc74 	.word	0x0800cc74
 800999c:	0800cc74 	.word	0x0800cc74
 80099a0:	0800cc74 	.word	0x0800cc74
 80099a4:	0800cc78 	.word	0x0800cc78

080099a8 <memset>:
 80099a8:	4402      	add	r2, r0
 80099aa:	4603      	mov	r3, r0
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d100      	bne.n	80099b2 <memset+0xa>
 80099b0:	4770      	bx	lr
 80099b2:	f803 1b01 	strb.w	r1, [r3], #1
 80099b6:	e7f9      	b.n	80099ac <memset+0x4>

080099b8 <__cvt>:
 80099b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099bc:	ec55 4b10 	vmov	r4, r5, d0
 80099c0:	2d00      	cmp	r5, #0
 80099c2:	460e      	mov	r6, r1
 80099c4:	4619      	mov	r1, r3
 80099c6:	462b      	mov	r3, r5
 80099c8:	bfbb      	ittet	lt
 80099ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099ce:	461d      	movlt	r5, r3
 80099d0:	2300      	movge	r3, #0
 80099d2:	232d      	movlt	r3, #45	; 0x2d
 80099d4:	700b      	strb	r3, [r1, #0]
 80099d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099dc:	4691      	mov	r9, r2
 80099de:	f023 0820 	bic.w	r8, r3, #32
 80099e2:	bfbc      	itt	lt
 80099e4:	4622      	movlt	r2, r4
 80099e6:	4614      	movlt	r4, r2
 80099e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099ec:	d005      	beq.n	80099fa <__cvt+0x42>
 80099ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80099f2:	d100      	bne.n	80099f6 <__cvt+0x3e>
 80099f4:	3601      	adds	r6, #1
 80099f6:	2102      	movs	r1, #2
 80099f8:	e000      	b.n	80099fc <__cvt+0x44>
 80099fa:	2103      	movs	r1, #3
 80099fc:	ab03      	add	r3, sp, #12
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	ab02      	add	r3, sp, #8
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	ec45 4b10 	vmov	d0, r4, r5
 8009a08:	4653      	mov	r3, sl
 8009a0a:	4632      	mov	r2, r6
 8009a0c:	f000 fcf8 	bl	800a400 <_dtoa_r>
 8009a10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a14:	4607      	mov	r7, r0
 8009a16:	d102      	bne.n	8009a1e <__cvt+0x66>
 8009a18:	f019 0f01 	tst.w	r9, #1
 8009a1c:	d022      	beq.n	8009a64 <__cvt+0xac>
 8009a1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a22:	eb07 0906 	add.w	r9, r7, r6
 8009a26:	d110      	bne.n	8009a4a <__cvt+0x92>
 8009a28:	783b      	ldrb	r3, [r7, #0]
 8009a2a:	2b30      	cmp	r3, #48	; 0x30
 8009a2c:	d10a      	bne.n	8009a44 <__cvt+0x8c>
 8009a2e:	2200      	movs	r2, #0
 8009a30:	2300      	movs	r3, #0
 8009a32:	4620      	mov	r0, r4
 8009a34:	4629      	mov	r1, r5
 8009a36:	f7f7 f867 	bl	8000b08 <__aeabi_dcmpeq>
 8009a3a:	b918      	cbnz	r0, 8009a44 <__cvt+0x8c>
 8009a3c:	f1c6 0601 	rsb	r6, r6, #1
 8009a40:	f8ca 6000 	str.w	r6, [sl]
 8009a44:	f8da 3000 	ldr.w	r3, [sl]
 8009a48:	4499      	add	r9, r3
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f7 f859 	bl	8000b08 <__aeabi_dcmpeq>
 8009a56:	b108      	cbz	r0, 8009a5c <__cvt+0xa4>
 8009a58:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a5c:	2230      	movs	r2, #48	; 0x30
 8009a5e:	9b03      	ldr	r3, [sp, #12]
 8009a60:	454b      	cmp	r3, r9
 8009a62:	d307      	bcc.n	8009a74 <__cvt+0xbc>
 8009a64:	9b03      	ldr	r3, [sp, #12]
 8009a66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a68:	1bdb      	subs	r3, r3, r7
 8009a6a:	4638      	mov	r0, r7
 8009a6c:	6013      	str	r3, [r2, #0]
 8009a6e:	b004      	add	sp, #16
 8009a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a74:	1c59      	adds	r1, r3, #1
 8009a76:	9103      	str	r1, [sp, #12]
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	e7f0      	b.n	8009a5e <__cvt+0xa6>

08009a7c <__exponent>:
 8009a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2900      	cmp	r1, #0
 8009a82:	bfb8      	it	lt
 8009a84:	4249      	neglt	r1, r1
 8009a86:	f803 2b02 	strb.w	r2, [r3], #2
 8009a8a:	bfb4      	ite	lt
 8009a8c:	222d      	movlt	r2, #45	; 0x2d
 8009a8e:	222b      	movge	r2, #43	; 0x2b
 8009a90:	2909      	cmp	r1, #9
 8009a92:	7042      	strb	r2, [r0, #1]
 8009a94:	dd2a      	ble.n	8009aec <__exponent+0x70>
 8009a96:	f10d 0407 	add.w	r4, sp, #7
 8009a9a:	46a4      	mov	ip, r4
 8009a9c:	270a      	movs	r7, #10
 8009a9e:	46a6      	mov	lr, r4
 8009aa0:	460a      	mov	r2, r1
 8009aa2:	fb91 f6f7 	sdiv	r6, r1, r7
 8009aa6:	fb07 1516 	mls	r5, r7, r6, r1
 8009aaa:	3530      	adds	r5, #48	; 0x30
 8009aac:	2a63      	cmp	r2, #99	; 0x63
 8009aae:	f104 34ff 	add.w	r4, r4, #4294967295
 8009ab2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ab6:	4631      	mov	r1, r6
 8009ab8:	dcf1      	bgt.n	8009a9e <__exponent+0x22>
 8009aba:	3130      	adds	r1, #48	; 0x30
 8009abc:	f1ae 0502 	sub.w	r5, lr, #2
 8009ac0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ac4:	1c44      	adds	r4, r0, #1
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4561      	cmp	r1, ip
 8009aca:	d30a      	bcc.n	8009ae2 <__exponent+0x66>
 8009acc:	f10d 0209 	add.w	r2, sp, #9
 8009ad0:	eba2 020e 	sub.w	r2, r2, lr
 8009ad4:	4565      	cmp	r5, ip
 8009ad6:	bf88      	it	hi
 8009ad8:	2200      	movhi	r2, #0
 8009ada:	4413      	add	r3, r2
 8009adc:	1a18      	subs	r0, r3, r0
 8009ade:	b003      	add	sp, #12
 8009ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ae6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009aea:	e7ed      	b.n	8009ac8 <__exponent+0x4c>
 8009aec:	2330      	movs	r3, #48	; 0x30
 8009aee:	3130      	adds	r1, #48	; 0x30
 8009af0:	7083      	strb	r3, [r0, #2]
 8009af2:	70c1      	strb	r1, [r0, #3]
 8009af4:	1d03      	adds	r3, r0, #4
 8009af6:	e7f1      	b.n	8009adc <__exponent+0x60>

08009af8 <_printf_float>:
 8009af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	ed2d 8b02 	vpush	{d8}
 8009b00:	b08d      	sub	sp, #52	; 0x34
 8009b02:	460c      	mov	r4, r1
 8009b04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b08:	4616      	mov	r6, r2
 8009b0a:	461f      	mov	r7, r3
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	f001 fa63 	bl	800afd8 <_localeconv_r>
 8009b12:	f8d0 a000 	ldr.w	sl, [r0]
 8009b16:	4650      	mov	r0, sl
 8009b18:	f7f6 fb7a 	bl	8000210 <strlen>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	f8d8 3000 	ldr.w	r3, [r8]
 8009b28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b2c:	3307      	adds	r3, #7
 8009b2e:	f023 0307 	bic.w	r3, r3, #7
 8009b32:	f103 0208 	add.w	r2, r3, #8
 8009b36:	f8c8 2000 	str.w	r2, [r8]
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b4a:	9307      	str	r3, [sp, #28]
 8009b4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b50:	ee08 0a10 	vmov	s16, r0
 8009b54:	4b9f      	ldr	r3, [pc, #636]	; (8009dd4 <_printf_float+0x2dc>)
 8009b56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5e:	f7f7 f805 	bl	8000b6c <__aeabi_dcmpun>
 8009b62:	bb88      	cbnz	r0, 8009bc8 <_printf_float+0xd0>
 8009b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b68:	4b9a      	ldr	r3, [pc, #616]	; (8009dd4 <_printf_float+0x2dc>)
 8009b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b6e:	f7f6 ffdf 	bl	8000b30 <__aeabi_dcmple>
 8009b72:	bb48      	cbnz	r0, 8009bc8 <_printf_float+0xd0>
 8009b74:	2200      	movs	r2, #0
 8009b76:	2300      	movs	r3, #0
 8009b78:	4640      	mov	r0, r8
 8009b7a:	4649      	mov	r1, r9
 8009b7c:	f7f6 ffce 	bl	8000b1c <__aeabi_dcmplt>
 8009b80:	b110      	cbz	r0, 8009b88 <_printf_float+0x90>
 8009b82:	232d      	movs	r3, #45	; 0x2d
 8009b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b88:	4b93      	ldr	r3, [pc, #588]	; (8009dd8 <_printf_float+0x2e0>)
 8009b8a:	4894      	ldr	r0, [pc, #592]	; (8009ddc <_printf_float+0x2e4>)
 8009b8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b90:	bf94      	ite	ls
 8009b92:	4698      	movls	r8, r3
 8009b94:	4680      	movhi	r8, r0
 8009b96:	2303      	movs	r3, #3
 8009b98:	6123      	str	r3, [r4, #16]
 8009b9a:	9b05      	ldr	r3, [sp, #20]
 8009b9c:	f023 0204 	bic.w	r2, r3, #4
 8009ba0:	6022      	str	r2, [r4, #0]
 8009ba2:	f04f 0900 	mov.w	r9, #0
 8009ba6:	9700      	str	r7, [sp, #0]
 8009ba8:	4633      	mov	r3, r6
 8009baa:	aa0b      	add	r2, sp, #44	; 0x2c
 8009bac:	4621      	mov	r1, r4
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f000 f9d8 	bl	8009f64 <_printf_common>
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	f040 8090 	bne.w	8009cda <_printf_float+0x1e2>
 8009bba:	f04f 30ff 	mov.w	r0, #4294967295
 8009bbe:	b00d      	add	sp, #52	; 0x34
 8009bc0:	ecbd 8b02 	vpop	{d8}
 8009bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	4642      	mov	r2, r8
 8009bca:	464b      	mov	r3, r9
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 ffcc 	bl	8000b6c <__aeabi_dcmpun>
 8009bd4:	b140      	cbz	r0, 8009be8 <_printf_float+0xf0>
 8009bd6:	464b      	mov	r3, r9
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bfbc      	itt	lt
 8009bdc:	232d      	movlt	r3, #45	; 0x2d
 8009bde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009be2:	487f      	ldr	r0, [pc, #508]	; (8009de0 <_printf_float+0x2e8>)
 8009be4:	4b7f      	ldr	r3, [pc, #508]	; (8009de4 <_printf_float+0x2ec>)
 8009be6:	e7d1      	b.n	8009b8c <_printf_float+0x94>
 8009be8:	6863      	ldr	r3, [r4, #4]
 8009bea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009bee:	9206      	str	r2, [sp, #24]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	d13f      	bne.n	8009c74 <_printf_float+0x17c>
 8009bf4:	2306      	movs	r3, #6
 8009bf6:	6063      	str	r3, [r4, #4]
 8009bf8:	9b05      	ldr	r3, [sp, #20]
 8009bfa:	6861      	ldr	r1, [r4, #4]
 8009bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c00:	2300      	movs	r3, #0
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	ab0a      	add	r3, sp, #40	; 0x28
 8009c06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c0a:	ab09      	add	r3, sp, #36	; 0x24
 8009c0c:	ec49 8b10 	vmov	d0, r8, r9
 8009c10:	9300      	str	r3, [sp, #0]
 8009c12:	6022      	str	r2, [r4, #0]
 8009c14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7ff fecd 	bl	80099b8 <__cvt>
 8009c1e:	9b06      	ldr	r3, [sp, #24]
 8009c20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c22:	2b47      	cmp	r3, #71	; 0x47
 8009c24:	4680      	mov	r8, r0
 8009c26:	d108      	bne.n	8009c3a <_printf_float+0x142>
 8009c28:	1cc8      	adds	r0, r1, #3
 8009c2a:	db02      	blt.n	8009c32 <_printf_float+0x13a>
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	4299      	cmp	r1, r3
 8009c30:	dd41      	ble.n	8009cb6 <_printf_float+0x1be>
 8009c32:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c36:	fa5f fb8b 	uxtb.w	fp, fp
 8009c3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c3e:	d820      	bhi.n	8009c82 <_printf_float+0x18a>
 8009c40:	3901      	subs	r1, #1
 8009c42:	465a      	mov	r2, fp
 8009c44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c48:	9109      	str	r1, [sp, #36]	; 0x24
 8009c4a:	f7ff ff17 	bl	8009a7c <__exponent>
 8009c4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c50:	1813      	adds	r3, r2, r0
 8009c52:	2a01      	cmp	r2, #1
 8009c54:	4681      	mov	r9, r0
 8009c56:	6123      	str	r3, [r4, #16]
 8009c58:	dc02      	bgt.n	8009c60 <_printf_float+0x168>
 8009c5a:	6822      	ldr	r2, [r4, #0]
 8009c5c:	07d2      	lsls	r2, r2, #31
 8009c5e:	d501      	bpl.n	8009c64 <_printf_float+0x16c>
 8009c60:	3301      	adds	r3, #1
 8009c62:	6123      	str	r3, [r4, #16]
 8009c64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d09c      	beq.n	8009ba6 <_printf_float+0xae>
 8009c6c:	232d      	movs	r3, #45	; 0x2d
 8009c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c72:	e798      	b.n	8009ba6 <_printf_float+0xae>
 8009c74:	9a06      	ldr	r2, [sp, #24]
 8009c76:	2a47      	cmp	r2, #71	; 0x47
 8009c78:	d1be      	bne.n	8009bf8 <_printf_float+0x100>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1bc      	bne.n	8009bf8 <_printf_float+0x100>
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e7b9      	b.n	8009bf6 <_printf_float+0xfe>
 8009c82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c86:	d118      	bne.n	8009cba <_printf_float+0x1c2>
 8009c88:	2900      	cmp	r1, #0
 8009c8a:	6863      	ldr	r3, [r4, #4]
 8009c8c:	dd0b      	ble.n	8009ca6 <_printf_float+0x1ae>
 8009c8e:	6121      	str	r1, [r4, #16]
 8009c90:	b913      	cbnz	r3, 8009c98 <_printf_float+0x1a0>
 8009c92:	6822      	ldr	r2, [r4, #0]
 8009c94:	07d0      	lsls	r0, r2, #31
 8009c96:	d502      	bpl.n	8009c9e <_printf_float+0x1a6>
 8009c98:	3301      	adds	r3, #1
 8009c9a:	440b      	add	r3, r1
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ca0:	f04f 0900 	mov.w	r9, #0
 8009ca4:	e7de      	b.n	8009c64 <_printf_float+0x16c>
 8009ca6:	b913      	cbnz	r3, 8009cae <_printf_float+0x1b6>
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	07d2      	lsls	r2, r2, #31
 8009cac:	d501      	bpl.n	8009cb2 <_printf_float+0x1ba>
 8009cae:	3302      	adds	r3, #2
 8009cb0:	e7f4      	b.n	8009c9c <_printf_float+0x1a4>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e7f2      	b.n	8009c9c <_printf_float+0x1a4>
 8009cb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	db05      	blt.n	8009ccc <_printf_float+0x1d4>
 8009cc0:	6823      	ldr	r3, [r4, #0]
 8009cc2:	6121      	str	r1, [r4, #16]
 8009cc4:	07d8      	lsls	r0, r3, #31
 8009cc6:	d5ea      	bpl.n	8009c9e <_printf_float+0x1a6>
 8009cc8:	1c4b      	adds	r3, r1, #1
 8009cca:	e7e7      	b.n	8009c9c <_printf_float+0x1a4>
 8009ccc:	2900      	cmp	r1, #0
 8009cce:	bfd4      	ite	le
 8009cd0:	f1c1 0202 	rsble	r2, r1, #2
 8009cd4:	2201      	movgt	r2, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	e7e0      	b.n	8009c9c <_printf_float+0x1a4>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	055a      	lsls	r2, r3, #21
 8009cde:	d407      	bmi.n	8009cf0 <_printf_float+0x1f8>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	4642      	mov	r2, r8
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	d12c      	bne.n	8009d48 <_printf_float+0x250>
 8009cee:	e764      	b.n	8009bba <_printf_float+0xc2>
 8009cf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009cf4:	f240 80e0 	bls.w	8009eb8 <_printf_float+0x3c0>
 8009cf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f7f6 ff02 	bl	8000b08 <__aeabi_dcmpeq>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d034      	beq.n	8009d72 <_printf_float+0x27a>
 8009d08:	4a37      	ldr	r2, [pc, #220]	; (8009de8 <_printf_float+0x2f0>)
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4631      	mov	r1, r6
 8009d0e:	4628      	mov	r0, r5
 8009d10:	47b8      	blx	r7
 8009d12:	3001      	adds	r0, #1
 8009d14:	f43f af51 	beq.w	8009bba <_printf_float+0xc2>
 8009d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	db02      	blt.n	8009d26 <_printf_float+0x22e>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	07d8      	lsls	r0, r3, #31
 8009d24:	d510      	bpl.n	8009d48 <_printf_float+0x250>
 8009d26:	ee18 3a10 	vmov	r3, s16
 8009d2a:	4652      	mov	r2, sl
 8009d2c:	4631      	mov	r1, r6
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b8      	blx	r7
 8009d32:	3001      	adds	r0, #1
 8009d34:	f43f af41 	beq.w	8009bba <_printf_float+0xc2>
 8009d38:	f04f 0800 	mov.w	r8, #0
 8009d3c:	f104 091a 	add.w	r9, r4, #26
 8009d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d42:	3b01      	subs	r3, #1
 8009d44:	4543      	cmp	r3, r8
 8009d46:	dc09      	bgt.n	8009d5c <_printf_float+0x264>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	079b      	lsls	r3, r3, #30
 8009d4c:	f100 8105 	bmi.w	8009f5a <_printf_float+0x462>
 8009d50:	68e0      	ldr	r0, [r4, #12]
 8009d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d54:	4298      	cmp	r0, r3
 8009d56:	bfb8      	it	lt
 8009d58:	4618      	movlt	r0, r3
 8009d5a:	e730      	b.n	8009bbe <_printf_float+0xc6>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	464a      	mov	r2, r9
 8009d60:	4631      	mov	r1, r6
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b8      	blx	r7
 8009d66:	3001      	adds	r0, #1
 8009d68:	f43f af27 	beq.w	8009bba <_printf_float+0xc2>
 8009d6c:	f108 0801 	add.w	r8, r8, #1
 8009d70:	e7e6      	b.n	8009d40 <_printf_float+0x248>
 8009d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dc39      	bgt.n	8009dec <_printf_float+0x2f4>
 8009d78:	4a1b      	ldr	r2, [pc, #108]	; (8009de8 <_printf_float+0x2f0>)
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4631      	mov	r1, r6
 8009d7e:	4628      	mov	r0, r5
 8009d80:	47b8      	blx	r7
 8009d82:	3001      	adds	r0, #1
 8009d84:	f43f af19 	beq.w	8009bba <_printf_float+0xc2>
 8009d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	d102      	bne.n	8009d96 <_printf_float+0x29e>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	07d9      	lsls	r1, r3, #31
 8009d94:	d5d8      	bpl.n	8009d48 <_printf_float+0x250>
 8009d96:	ee18 3a10 	vmov	r3, s16
 8009d9a:	4652      	mov	r2, sl
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f af09 	beq.w	8009bba <_printf_float+0xc2>
 8009da8:	f04f 0900 	mov.w	r9, #0
 8009dac:	f104 0a1a 	add.w	sl, r4, #26
 8009db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009db2:	425b      	negs	r3, r3
 8009db4:	454b      	cmp	r3, r9
 8009db6:	dc01      	bgt.n	8009dbc <_printf_float+0x2c4>
 8009db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dba:	e792      	b.n	8009ce2 <_printf_float+0x1ea>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b8      	blx	r7
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f43f aef7 	beq.w	8009bba <_printf_float+0xc2>
 8009dcc:	f109 0901 	add.w	r9, r9, #1
 8009dd0:	e7ee      	b.n	8009db0 <_printf_float+0x2b8>
 8009dd2:	bf00      	nop
 8009dd4:	7fefffff 	.word	0x7fefffff
 8009dd8:	0800c890 	.word	0x0800c890
 8009ddc:	0800c894 	.word	0x0800c894
 8009de0:	0800c89c 	.word	0x0800c89c
 8009de4:	0800c898 	.word	0x0800c898
 8009de8:	0800c8a0 	.word	0x0800c8a0
 8009dec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bfa8      	it	ge
 8009df4:	461a      	movge	r2, r3
 8009df6:	2a00      	cmp	r2, #0
 8009df8:	4691      	mov	r9, r2
 8009dfa:	dc37      	bgt.n	8009e6c <_printf_float+0x374>
 8009dfc:	f04f 0b00 	mov.w	fp, #0
 8009e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e04:	f104 021a 	add.w	r2, r4, #26
 8009e08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	eba3 0309 	sub.w	r3, r3, r9
 8009e10:	455b      	cmp	r3, fp
 8009e12:	dc33      	bgt.n	8009e7c <_printf_float+0x384>
 8009e14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	db3b      	blt.n	8009e94 <_printf_float+0x39c>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	07da      	lsls	r2, r3, #31
 8009e20:	d438      	bmi.n	8009e94 <_printf_float+0x39c>
 8009e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e24:	9b05      	ldr	r3, [sp, #20]
 8009e26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	eba2 0901 	sub.w	r9, r2, r1
 8009e2e:	4599      	cmp	r9, r3
 8009e30:	bfa8      	it	ge
 8009e32:	4699      	movge	r9, r3
 8009e34:	f1b9 0f00 	cmp.w	r9, #0
 8009e38:	dc35      	bgt.n	8009ea6 <_printf_float+0x3ae>
 8009e3a:	f04f 0800 	mov.w	r8, #0
 8009e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e42:	f104 0a1a 	add.w	sl, r4, #26
 8009e46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	eba3 0309 	sub.w	r3, r3, r9
 8009e50:	4543      	cmp	r3, r8
 8009e52:	f77f af79 	ble.w	8009d48 <_printf_float+0x250>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4652      	mov	r2, sl
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f aeaa 	beq.w	8009bba <_printf_float+0xc2>
 8009e66:	f108 0801 	add.w	r8, r8, #1
 8009e6a:	e7ec      	b.n	8009e46 <_printf_float+0x34e>
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4642      	mov	r2, r8
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b8      	blx	r7
 8009e76:	3001      	adds	r0, #1
 8009e78:	d1c0      	bne.n	8009dfc <_printf_float+0x304>
 8009e7a:	e69e      	b.n	8009bba <_printf_float+0xc2>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4631      	mov	r1, r6
 8009e80:	4628      	mov	r0, r5
 8009e82:	9205      	str	r2, [sp, #20]
 8009e84:	47b8      	blx	r7
 8009e86:	3001      	adds	r0, #1
 8009e88:	f43f ae97 	beq.w	8009bba <_printf_float+0xc2>
 8009e8c:	9a05      	ldr	r2, [sp, #20]
 8009e8e:	f10b 0b01 	add.w	fp, fp, #1
 8009e92:	e7b9      	b.n	8009e08 <_printf_float+0x310>
 8009e94:	ee18 3a10 	vmov	r3, s16
 8009e98:	4652      	mov	r2, sl
 8009e9a:	4631      	mov	r1, r6
 8009e9c:	4628      	mov	r0, r5
 8009e9e:	47b8      	blx	r7
 8009ea0:	3001      	adds	r0, #1
 8009ea2:	d1be      	bne.n	8009e22 <_printf_float+0x32a>
 8009ea4:	e689      	b.n	8009bba <_printf_float+0xc2>
 8009ea6:	9a05      	ldr	r2, [sp, #20]
 8009ea8:	464b      	mov	r3, r9
 8009eaa:	4442      	add	r2, r8
 8009eac:	4631      	mov	r1, r6
 8009eae:	4628      	mov	r0, r5
 8009eb0:	47b8      	blx	r7
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	d1c1      	bne.n	8009e3a <_printf_float+0x342>
 8009eb6:	e680      	b.n	8009bba <_printf_float+0xc2>
 8009eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009eba:	2a01      	cmp	r2, #1
 8009ebc:	dc01      	bgt.n	8009ec2 <_printf_float+0x3ca>
 8009ebe:	07db      	lsls	r3, r3, #31
 8009ec0:	d538      	bpl.n	8009f34 <_printf_float+0x43c>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	4642      	mov	r2, r8
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	f43f ae74 	beq.w	8009bba <_printf_float+0xc2>
 8009ed2:	ee18 3a10 	vmov	r3, s16
 8009ed6:	4652      	mov	r2, sl
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4628      	mov	r0, r5
 8009edc:	47b8      	blx	r7
 8009ede:	3001      	adds	r0, #1
 8009ee0:	f43f ae6b 	beq.w	8009bba <_printf_float+0xc2>
 8009ee4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2300      	movs	r3, #0
 8009eec:	f7f6 fe0c 	bl	8000b08 <__aeabi_dcmpeq>
 8009ef0:	b9d8      	cbnz	r0, 8009f2a <_printf_float+0x432>
 8009ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ef4:	f108 0201 	add.w	r2, r8, #1
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	4631      	mov	r1, r6
 8009efc:	4628      	mov	r0, r5
 8009efe:	47b8      	blx	r7
 8009f00:	3001      	adds	r0, #1
 8009f02:	d10e      	bne.n	8009f22 <_printf_float+0x42a>
 8009f04:	e659      	b.n	8009bba <_printf_float+0xc2>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4631      	mov	r1, r6
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	47b8      	blx	r7
 8009f10:	3001      	adds	r0, #1
 8009f12:	f43f ae52 	beq.w	8009bba <_printf_float+0xc2>
 8009f16:	f108 0801 	add.w	r8, r8, #1
 8009f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	4543      	cmp	r3, r8
 8009f20:	dcf1      	bgt.n	8009f06 <_printf_float+0x40e>
 8009f22:	464b      	mov	r3, r9
 8009f24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f28:	e6dc      	b.n	8009ce4 <_printf_float+0x1ec>
 8009f2a:	f04f 0800 	mov.w	r8, #0
 8009f2e:	f104 0a1a 	add.w	sl, r4, #26
 8009f32:	e7f2      	b.n	8009f1a <_printf_float+0x422>
 8009f34:	2301      	movs	r3, #1
 8009f36:	4642      	mov	r2, r8
 8009f38:	e7df      	b.n	8009efa <_printf_float+0x402>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	464a      	mov	r2, r9
 8009f3e:	4631      	mov	r1, r6
 8009f40:	4628      	mov	r0, r5
 8009f42:	47b8      	blx	r7
 8009f44:	3001      	adds	r0, #1
 8009f46:	f43f ae38 	beq.w	8009bba <_printf_float+0xc2>
 8009f4a:	f108 0801 	add.w	r8, r8, #1
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f52:	1a5b      	subs	r3, r3, r1
 8009f54:	4543      	cmp	r3, r8
 8009f56:	dcf0      	bgt.n	8009f3a <_printf_float+0x442>
 8009f58:	e6fa      	b.n	8009d50 <_printf_float+0x258>
 8009f5a:	f04f 0800 	mov.w	r8, #0
 8009f5e:	f104 0919 	add.w	r9, r4, #25
 8009f62:	e7f4      	b.n	8009f4e <_printf_float+0x456>

08009f64 <_printf_common>:
 8009f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	4616      	mov	r6, r2
 8009f6a:	4699      	mov	r9, r3
 8009f6c:	688a      	ldr	r2, [r1, #8]
 8009f6e:	690b      	ldr	r3, [r1, #16]
 8009f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bfb8      	it	lt
 8009f78:	4613      	movlt	r3, r2
 8009f7a:	6033      	str	r3, [r6, #0]
 8009f7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f80:	4607      	mov	r7, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b10a      	cbz	r2, 8009f8a <_printf_common+0x26>
 8009f86:	3301      	adds	r3, #1
 8009f88:	6033      	str	r3, [r6, #0]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	0699      	lsls	r1, r3, #26
 8009f8e:	bf42      	ittt	mi
 8009f90:	6833      	ldrmi	r3, [r6, #0]
 8009f92:	3302      	addmi	r3, #2
 8009f94:	6033      	strmi	r3, [r6, #0]
 8009f96:	6825      	ldr	r5, [r4, #0]
 8009f98:	f015 0506 	ands.w	r5, r5, #6
 8009f9c:	d106      	bne.n	8009fac <_printf_common+0x48>
 8009f9e:	f104 0a19 	add.w	sl, r4, #25
 8009fa2:	68e3      	ldr	r3, [r4, #12]
 8009fa4:	6832      	ldr	r2, [r6, #0]
 8009fa6:	1a9b      	subs	r3, r3, r2
 8009fa8:	42ab      	cmp	r3, r5
 8009faa:	dc26      	bgt.n	8009ffa <_printf_common+0x96>
 8009fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb0:	1e13      	subs	r3, r2, #0
 8009fb2:	6822      	ldr	r2, [r4, #0]
 8009fb4:	bf18      	it	ne
 8009fb6:	2301      	movne	r3, #1
 8009fb8:	0692      	lsls	r2, r2, #26
 8009fba:	d42b      	bmi.n	800a014 <_printf_common+0xb0>
 8009fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	4638      	mov	r0, r7
 8009fc4:	47c0      	blx	r8
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d01e      	beq.n	800a008 <_printf_common+0xa4>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	68e5      	ldr	r5, [r4, #12]
 8009fce:	6832      	ldr	r2, [r6, #0]
 8009fd0:	f003 0306 	and.w	r3, r3, #6
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	bf08      	it	eq
 8009fd8:	1aad      	subeq	r5, r5, r2
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	bf0c      	ite	eq
 8009fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fe4:	2500      	movne	r5, #0
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	bfc4      	itt	gt
 8009fea:	1a9b      	subgt	r3, r3, r2
 8009fec:	18ed      	addgt	r5, r5, r3
 8009fee:	2600      	movs	r6, #0
 8009ff0:	341a      	adds	r4, #26
 8009ff2:	42b5      	cmp	r5, r6
 8009ff4:	d11a      	bne.n	800a02c <_printf_common+0xc8>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	e008      	b.n	800a00c <_printf_common+0xa8>
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4652      	mov	r2, sl
 8009ffe:	4649      	mov	r1, r9
 800a000:	4638      	mov	r0, r7
 800a002:	47c0      	blx	r8
 800a004:	3001      	adds	r0, #1
 800a006:	d103      	bne.n	800a010 <_printf_common+0xac>
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a010:	3501      	adds	r5, #1
 800a012:	e7c6      	b.n	8009fa2 <_printf_common+0x3e>
 800a014:	18e1      	adds	r1, r4, r3
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	2030      	movs	r0, #48	; 0x30
 800a01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a01e:	4422      	add	r2, r4
 800a020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a028:	3302      	adds	r3, #2
 800a02a:	e7c7      	b.n	8009fbc <_printf_common+0x58>
 800a02c:	2301      	movs	r3, #1
 800a02e:	4622      	mov	r2, r4
 800a030:	4649      	mov	r1, r9
 800a032:	4638      	mov	r0, r7
 800a034:	47c0      	blx	r8
 800a036:	3001      	adds	r0, #1
 800a038:	d0e6      	beq.n	800a008 <_printf_common+0xa4>
 800a03a:	3601      	adds	r6, #1
 800a03c:	e7d9      	b.n	8009ff2 <_printf_common+0x8e>
	...

0800a040 <_printf_i>:
 800a040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a044:	460c      	mov	r4, r1
 800a046:	4691      	mov	r9, r2
 800a048:	7e27      	ldrb	r7, [r4, #24]
 800a04a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a04c:	2f78      	cmp	r7, #120	; 0x78
 800a04e:	4680      	mov	r8, r0
 800a050:	469a      	mov	sl, r3
 800a052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a056:	d807      	bhi.n	800a068 <_printf_i+0x28>
 800a058:	2f62      	cmp	r7, #98	; 0x62
 800a05a:	d80a      	bhi.n	800a072 <_printf_i+0x32>
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	f000 80d8 	beq.w	800a212 <_printf_i+0x1d2>
 800a062:	2f58      	cmp	r7, #88	; 0x58
 800a064:	f000 80a3 	beq.w	800a1ae <_printf_i+0x16e>
 800a068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a070:	e03a      	b.n	800a0e8 <_printf_i+0xa8>
 800a072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a076:	2b15      	cmp	r3, #21
 800a078:	d8f6      	bhi.n	800a068 <_printf_i+0x28>
 800a07a:	a001      	add	r0, pc, #4	; (adr r0, 800a080 <_printf_i+0x40>)
 800a07c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a080:	0800a0d9 	.word	0x0800a0d9
 800a084:	0800a0ed 	.word	0x0800a0ed
 800a088:	0800a069 	.word	0x0800a069
 800a08c:	0800a069 	.word	0x0800a069
 800a090:	0800a069 	.word	0x0800a069
 800a094:	0800a069 	.word	0x0800a069
 800a098:	0800a0ed 	.word	0x0800a0ed
 800a09c:	0800a069 	.word	0x0800a069
 800a0a0:	0800a069 	.word	0x0800a069
 800a0a4:	0800a069 	.word	0x0800a069
 800a0a8:	0800a069 	.word	0x0800a069
 800a0ac:	0800a1f9 	.word	0x0800a1f9
 800a0b0:	0800a11d 	.word	0x0800a11d
 800a0b4:	0800a1db 	.word	0x0800a1db
 800a0b8:	0800a069 	.word	0x0800a069
 800a0bc:	0800a069 	.word	0x0800a069
 800a0c0:	0800a21b 	.word	0x0800a21b
 800a0c4:	0800a069 	.word	0x0800a069
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a069 	.word	0x0800a069
 800a0d0:	0800a069 	.word	0x0800a069
 800a0d4:	0800a1e3 	.word	0x0800a1e3
 800a0d8:	680b      	ldr	r3, [r1, #0]
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	600a      	str	r2, [r1, #0]
 800a0e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e0a3      	b.n	800a234 <_printf_i+0x1f4>
 800a0ec:	6825      	ldr	r5, [r4, #0]
 800a0ee:	6808      	ldr	r0, [r1, #0]
 800a0f0:	062e      	lsls	r6, r5, #24
 800a0f2:	f100 0304 	add.w	r3, r0, #4
 800a0f6:	d50a      	bpl.n	800a10e <_printf_i+0xce>
 800a0f8:	6805      	ldr	r5, [r0, #0]
 800a0fa:	600b      	str	r3, [r1, #0]
 800a0fc:	2d00      	cmp	r5, #0
 800a0fe:	da03      	bge.n	800a108 <_printf_i+0xc8>
 800a100:	232d      	movs	r3, #45	; 0x2d
 800a102:	426d      	negs	r5, r5
 800a104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a108:	485e      	ldr	r0, [pc, #376]	; (800a284 <_printf_i+0x244>)
 800a10a:	230a      	movs	r3, #10
 800a10c:	e019      	b.n	800a142 <_printf_i+0x102>
 800a10e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a112:	6805      	ldr	r5, [r0, #0]
 800a114:	600b      	str	r3, [r1, #0]
 800a116:	bf18      	it	ne
 800a118:	b22d      	sxthne	r5, r5
 800a11a:	e7ef      	b.n	800a0fc <_printf_i+0xbc>
 800a11c:	680b      	ldr	r3, [r1, #0]
 800a11e:	6825      	ldr	r5, [r4, #0]
 800a120:	1d18      	adds	r0, r3, #4
 800a122:	6008      	str	r0, [r1, #0]
 800a124:	0628      	lsls	r0, r5, #24
 800a126:	d501      	bpl.n	800a12c <_printf_i+0xec>
 800a128:	681d      	ldr	r5, [r3, #0]
 800a12a:	e002      	b.n	800a132 <_printf_i+0xf2>
 800a12c:	0669      	lsls	r1, r5, #25
 800a12e:	d5fb      	bpl.n	800a128 <_printf_i+0xe8>
 800a130:	881d      	ldrh	r5, [r3, #0]
 800a132:	4854      	ldr	r0, [pc, #336]	; (800a284 <_printf_i+0x244>)
 800a134:	2f6f      	cmp	r7, #111	; 0x6f
 800a136:	bf0c      	ite	eq
 800a138:	2308      	moveq	r3, #8
 800a13a:	230a      	movne	r3, #10
 800a13c:	2100      	movs	r1, #0
 800a13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a142:	6866      	ldr	r6, [r4, #4]
 800a144:	60a6      	str	r6, [r4, #8]
 800a146:	2e00      	cmp	r6, #0
 800a148:	bfa2      	ittt	ge
 800a14a:	6821      	ldrge	r1, [r4, #0]
 800a14c:	f021 0104 	bicge.w	r1, r1, #4
 800a150:	6021      	strge	r1, [r4, #0]
 800a152:	b90d      	cbnz	r5, 800a158 <_printf_i+0x118>
 800a154:	2e00      	cmp	r6, #0
 800a156:	d04d      	beq.n	800a1f4 <_printf_i+0x1b4>
 800a158:	4616      	mov	r6, r2
 800a15a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a15e:	fb03 5711 	mls	r7, r3, r1, r5
 800a162:	5dc7      	ldrb	r7, [r0, r7]
 800a164:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a168:	462f      	mov	r7, r5
 800a16a:	42bb      	cmp	r3, r7
 800a16c:	460d      	mov	r5, r1
 800a16e:	d9f4      	bls.n	800a15a <_printf_i+0x11a>
 800a170:	2b08      	cmp	r3, #8
 800a172:	d10b      	bne.n	800a18c <_printf_i+0x14c>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	07df      	lsls	r7, r3, #31
 800a178:	d508      	bpl.n	800a18c <_printf_i+0x14c>
 800a17a:	6923      	ldr	r3, [r4, #16]
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	4299      	cmp	r1, r3
 800a180:	bfde      	ittt	le
 800a182:	2330      	movle	r3, #48	; 0x30
 800a184:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a188:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a18c:	1b92      	subs	r2, r2, r6
 800a18e:	6122      	str	r2, [r4, #16]
 800a190:	f8cd a000 	str.w	sl, [sp]
 800a194:	464b      	mov	r3, r9
 800a196:	aa03      	add	r2, sp, #12
 800a198:	4621      	mov	r1, r4
 800a19a:	4640      	mov	r0, r8
 800a19c:	f7ff fee2 	bl	8009f64 <_printf_common>
 800a1a0:	3001      	adds	r0, #1
 800a1a2:	d14c      	bne.n	800a23e <_printf_i+0x1fe>
 800a1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a8:	b004      	add	sp, #16
 800a1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ae:	4835      	ldr	r0, [pc, #212]	; (800a284 <_printf_i+0x244>)
 800a1b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	680e      	ldr	r6, [r1, #0]
 800a1b8:	061f      	lsls	r7, r3, #24
 800a1ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1be:	600e      	str	r6, [r1, #0]
 800a1c0:	d514      	bpl.n	800a1ec <_printf_i+0x1ac>
 800a1c2:	07d9      	lsls	r1, r3, #31
 800a1c4:	bf44      	itt	mi
 800a1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a1ca:	6023      	strmi	r3, [r4, #0]
 800a1cc:	b91d      	cbnz	r5, 800a1d6 <_printf_i+0x196>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	f023 0320 	bic.w	r3, r3, #32
 800a1d4:	6023      	str	r3, [r4, #0]
 800a1d6:	2310      	movs	r3, #16
 800a1d8:	e7b0      	b.n	800a13c <_printf_i+0xfc>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	f043 0320 	orr.w	r3, r3, #32
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	2378      	movs	r3, #120	; 0x78
 800a1e4:	4828      	ldr	r0, [pc, #160]	; (800a288 <_printf_i+0x248>)
 800a1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1ea:	e7e3      	b.n	800a1b4 <_printf_i+0x174>
 800a1ec:	065e      	lsls	r6, r3, #25
 800a1ee:	bf48      	it	mi
 800a1f0:	b2ad      	uxthmi	r5, r5
 800a1f2:	e7e6      	b.n	800a1c2 <_printf_i+0x182>
 800a1f4:	4616      	mov	r6, r2
 800a1f6:	e7bb      	b.n	800a170 <_printf_i+0x130>
 800a1f8:	680b      	ldr	r3, [r1, #0]
 800a1fa:	6826      	ldr	r6, [r4, #0]
 800a1fc:	6960      	ldr	r0, [r4, #20]
 800a1fe:	1d1d      	adds	r5, r3, #4
 800a200:	600d      	str	r5, [r1, #0]
 800a202:	0635      	lsls	r5, r6, #24
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	d501      	bpl.n	800a20c <_printf_i+0x1cc>
 800a208:	6018      	str	r0, [r3, #0]
 800a20a:	e002      	b.n	800a212 <_printf_i+0x1d2>
 800a20c:	0671      	lsls	r1, r6, #25
 800a20e:	d5fb      	bpl.n	800a208 <_printf_i+0x1c8>
 800a210:	8018      	strh	r0, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	6123      	str	r3, [r4, #16]
 800a216:	4616      	mov	r6, r2
 800a218:	e7ba      	b.n	800a190 <_printf_i+0x150>
 800a21a:	680b      	ldr	r3, [r1, #0]
 800a21c:	1d1a      	adds	r2, r3, #4
 800a21e:	600a      	str	r2, [r1, #0]
 800a220:	681e      	ldr	r6, [r3, #0]
 800a222:	6862      	ldr	r2, [r4, #4]
 800a224:	2100      	movs	r1, #0
 800a226:	4630      	mov	r0, r6
 800a228:	f7f5 fffa 	bl	8000220 <memchr>
 800a22c:	b108      	cbz	r0, 800a232 <_printf_i+0x1f2>
 800a22e:	1b80      	subs	r0, r0, r6
 800a230:	6060      	str	r0, [r4, #4]
 800a232:	6863      	ldr	r3, [r4, #4]
 800a234:	6123      	str	r3, [r4, #16]
 800a236:	2300      	movs	r3, #0
 800a238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a23c:	e7a8      	b.n	800a190 <_printf_i+0x150>
 800a23e:	6923      	ldr	r3, [r4, #16]
 800a240:	4632      	mov	r2, r6
 800a242:	4649      	mov	r1, r9
 800a244:	4640      	mov	r0, r8
 800a246:	47d0      	blx	sl
 800a248:	3001      	adds	r0, #1
 800a24a:	d0ab      	beq.n	800a1a4 <_printf_i+0x164>
 800a24c:	6823      	ldr	r3, [r4, #0]
 800a24e:	079b      	lsls	r3, r3, #30
 800a250:	d413      	bmi.n	800a27a <_printf_i+0x23a>
 800a252:	68e0      	ldr	r0, [r4, #12]
 800a254:	9b03      	ldr	r3, [sp, #12]
 800a256:	4298      	cmp	r0, r3
 800a258:	bfb8      	it	lt
 800a25a:	4618      	movlt	r0, r3
 800a25c:	e7a4      	b.n	800a1a8 <_printf_i+0x168>
 800a25e:	2301      	movs	r3, #1
 800a260:	4632      	mov	r2, r6
 800a262:	4649      	mov	r1, r9
 800a264:	4640      	mov	r0, r8
 800a266:	47d0      	blx	sl
 800a268:	3001      	adds	r0, #1
 800a26a:	d09b      	beq.n	800a1a4 <_printf_i+0x164>
 800a26c:	3501      	adds	r5, #1
 800a26e:	68e3      	ldr	r3, [r4, #12]
 800a270:	9903      	ldr	r1, [sp, #12]
 800a272:	1a5b      	subs	r3, r3, r1
 800a274:	42ab      	cmp	r3, r5
 800a276:	dcf2      	bgt.n	800a25e <_printf_i+0x21e>
 800a278:	e7eb      	b.n	800a252 <_printf_i+0x212>
 800a27a:	2500      	movs	r5, #0
 800a27c:	f104 0619 	add.w	r6, r4, #25
 800a280:	e7f5      	b.n	800a26e <_printf_i+0x22e>
 800a282:	bf00      	nop
 800a284:	0800c8a2 	.word	0x0800c8a2
 800a288:	0800c8b3 	.word	0x0800c8b3

0800a28c <siprintf>:
 800a28c:	b40e      	push	{r1, r2, r3}
 800a28e:	b500      	push	{lr}
 800a290:	b09c      	sub	sp, #112	; 0x70
 800a292:	ab1d      	add	r3, sp, #116	; 0x74
 800a294:	9002      	str	r0, [sp, #8]
 800a296:	9006      	str	r0, [sp, #24]
 800a298:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a29c:	4809      	ldr	r0, [pc, #36]	; (800a2c4 <siprintf+0x38>)
 800a29e:	9107      	str	r1, [sp, #28]
 800a2a0:	9104      	str	r1, [sp, #16]
 800a2a2:	4909      	ldr	r1, [pc, #36]	; (800a2c8 <siprintf+0x3c>)
 800a2a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a8:	9105      	str	r1, [sp, #20]
 800a2aa:	6800      	ldr	r0, [r0, #0]
 800a2ac:	9301      	str	r3, [sp, #4]
 800a2ae:	a902      	add	r1, sp, #8
 800a2b0:	f001 fb40 	bl	800b934 <_svfiprintf_r>
 800a2b4:	9b02      	ldr	r3, [sp, #8]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	701a      	strb	r2, [r3, #0]
 800a2ba:	b01c      	add	sp, #112	; 0x70
 800a2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2c0:	b003      	add	sp, #12
 800a2c2:	4770      	bx	lr
 800a2c4:	20000030 	.word	0x20000030
 800a2c8:	ffff0208 	.word	0xffff0208

0800a2cc <strcat>:
 800a2cc:	b510      	push	{r4, lr}
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	7814      	ldrb	r4, [r2, #0]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	3201      	adds	r2, #1
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d1fa      	bne.n	800a2d0 <strcat+0x4>
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	d1f9      	bne.n	800a2dc <strcat+0x10>
 800a2e8:	bd10      	pop	{r4, pc}

0800a2ea <quorem>:
 800a2ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ee:	6903      	ldr	r3, [r0, #16]
 800a2f0:	690c      	ldr	r4, [r1, #16]
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	f2c0 8081 	blt.w	800a3fc <quorem+0x112>
 800a2fa:	3c01      	subs	r4, #1
 800a2fc:	f101 0814 	add.w	r8, r1, #20
 800a300:	f100 0514 	add.w	r5, r0, #20
 800a304:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a30e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a312:	3301      	adds	r3, #1
 800a314:	429a      	cmp	r2, r3
 800a316:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a31a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a31e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a322:	d331      	bcc.n	800a388 <quorem+0x9e>
 800a324:	f04f 0e00 	mov.w	lr, #0
 800a328:	4640      	mov	r0, r8
 800a32a:	46ac      	mov	ip, r5
 800a32c:	46f2      	mov	sl, lr
 800a32e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a332:	b293      	uxth	r3, r2
 800a334:	fb06 e303 	mla	r3, r6, r3, lr
 800a338:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	ebaa 0303 	sub.w	r3, sl, r3
 800a342:	0c12      	lsrs	r2, r2, #16
 800a344:	f8dc a000 	ldr.w	sl, [ip]
 800a348:	fb06 e202 	mla	r2, r6, r2, lr
 800a34c:	fa13 f38a 	uxtah	r3, r3, sl
 800a350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a354:	fa1f fa82 	uxth.w	sl, r2
 800a358:	f8dc 2000 	ldr.w	r2, [ip]
 800a35c:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a364:	b29b      	uxth	r3, r3
 800a366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a36a:	4581      	cmp	r9, r0
 800a36c:	f84c 3b04 	str.w	r3, [ip], #4
 800a370:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a374:	d2db      	bcs.n	800a32e <quorem+0x44>
 800a376:	f855 300b 	ldr.w	r3, [r5, fp]
 800a37a:	b92b      	cbnz	r3, 800a388 <quorem+0x9e>
 800a37c:	9b01      	ldr	r3, [sp, #4]
 800a37e:	3b04      	subs	r3, #4
 800a380:	429d      	cmp	r5, r3
 800a382:	461a      	mov	r2, r3
 800a384:	d32e      	bcc.n	800a3e4 <quorem+0xfa>
 800a386:	613c      	str	r4, [r7, #16]
 800a388:	4638      	mov	r0, r7
 800a38a:	f001 f8bd 	bl	800b508 <__mcmp>
 800a38e:	2800      	cmp	r0, #0
 800a390:	db24      	blt.n	800a3dc <quorem+0xf2>
 800a392:	3601      	adds	r6, #1
 800a394:	4628      	mov	r0, r5
 800a396:	f04f 0c00 	mov.w	ip, #0
 800a39a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a39e:	f8d0 e000 	ldr.w	lr, [r0]
 800a3a2:	b293      	uxth	r3, r2
 800a3a4:	ebac 0303 	sub.w	r3, ip, r3
 800a3a8:	0c12      	lsrs	r2, r2, #16
 800a3aa:	fa13 f38e 	uxtah	r3, r3, lr
 800a3ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3bc:	45c1      	cmp	r9, r8
 800a3be:	f840 3b04 	str.w	r3, [r0], #4
 800a3c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3c6:	d2e8      	bcs.n	800a39a <quorem+0xb0>
 800a3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3d0:	b922      	cbnz	r2, 800a3dc <quorem+0xf2>
 800a3d2:	3b04      	subs	r3, #4
 800a3d4:	429d      	cmp	r5, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	d30a      	bcc.n	800a3f0 <quorem+0x106>
 800a3da:	613c      	str	r4, [r7, #16]
 800a3dc:	4630      	mov	r0, r6
 800a3de:	b003      	add	sp, #12
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	6812      	ldr	r2, [r2, #0]
 800a3e6:	3b04      	subs	r3, #4
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d1cc      	bne.n	800a386 <quorem+0x9c>
 800a3ec:	3c01      	subs	r4, #1
 800a3ee:	e7c7      	b.n	800a380 <quorem+0x96>
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	3b04      	subs	r3, #4
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	d1f0      	bne.n	800a3da <quorem+0xf0>
 800a3f8:	3c01      	subs	r4, #1
 800a3fa:	e7eb      	b.n	800a3d4 <quorem+0xea>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e7ee      	b.n	800a3de <quorem+0xf4>

0800a400 <_dtoa_r>:
 800a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a404:	ed2d 8b02 	vpush	{d8}
 800a408:	ec57 6b10 	vmov	r6, r7, d0
 800a40c:	b095      	sub	sp, #84	; 0x54
 800a40e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a410:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a414:	9105      	str	r1, [sp, #20]
 800a416:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a41a:	4604      	mov	r4, r0
 800a41c:	9209      	str	r2, [sp, #36]	; 0x24
 800a41e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a420:	b975      	cbnz	r5, 800a440 <_dtoa_r+0x40>
 800a422:	2010      	movs	r0, #16
 800a424:	f000 fddc 	bl	800afe0 <malloc>
 800a428:	4602      	mov	r2, r0
 800a42a:	6260      	str	r0, [r4, #36]	; 0x24
 800a42c:	b920      	cbnz	r0, 800a438 <_dtoa_r+0x38>
 800a42e:	4bb2      	ldr	r3, [pc, #712]	; (800a6f8 <_dtoa_r+0x2f8>)
 800a430:	21ea      	movs	r1, #234	; 0xea
 800a432:	48b2      	ldr	r0, [pc, #712]	; (800a6fc <_dtoa_r+0x2fc>)
 800a434:	f001 fb8e 	bl	800bb54 <__assert_func>
 800a438:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a43c:	6005      	str	r5, [r0, #0]
 800a43e:	60c5      	str	r5, [r0, #12]
 800a440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	b151      	cbz	r1, 800a45c <_dtoa_r+0x5c>
 800a446:	685a      	ldr	r2, [r3, #4]
 800a448:	604a      	str	r2, [r1, #4]
 800a44a:	2301      	movs	r3, #1
 800a44c:	4093      	lsls	r3, r2
 800a44e:	608b      	str	r3, [r1, #8]
 800a450:	4620      	mov	r0, r4
 800a452:	f000 fe1b 	bl	800b08c <_Bfree>
 800a456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]
 800a45c:	1e3b      	subs	r3, r7, #0
 800a45e:	bfb9      	ittee	lt
 800a460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a464:	9303      	strlt	r3, [sp, #12]
 800a466:	2300      	movge	r3, #0
 800a468:	f8c8 3000 	strge.w	r3, [r8]
 800a46c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a470:	4ba3      	ldr	r3, [pc, #652]	; (800a700 <_dtoa_r+0x300>)
 800a472:	bfbc      	itt	lt
 800a474:	2201      	movlt	r2, #1
 800a476:	f8c8 2000 	strlt.w	r2, [r8]
 800a47a:	ea33 0309 	bics.w	r3, r3, r9
 800a47e:	d11b      	bne.n	800a4b8 <_dtoa_r+0xb8>
 800a480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a482:	f242 730f 	movw	r3, #9999	; 0x270f
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a48c:	4333      	orrs	r3, r6
 800a48e:	f000 857a 	beq.w	800af86 <_dtoa_r+0xb86>
 800a492:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a494:	b963      	cbnz	r3, 800a4b0 <_dtoa_r+0xb0>
 800a496:	4b9b      	ldr	r3, [pc, #620]	; (800a704 <_dtoa_r+0x304>)
 800a498:	e024      	b.n	800a4e4 <_dtoa_r+0xe4>
 800a49a:	4b9b      	ldr	r3, [pc, #620]	; (800a708 <_dtoa_r+0x308>)
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	9800      	ldr	r0, [sp, #0]
 800a4a6:	b015      	add	sp, #84	; 0x54
 800a4a8:	ecbd 8b02 	vpop	{d8}
 800a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4b0:	4b94      	ldr	r3, [pc, #592]	; (800a704 <_dtoa_r+0x304>)
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	3303      	adds	r3, #3
 800a4b6:	e7f3      	b.n	800a4a0 <_dtoa_r+0xa0>
 800a4b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	ec51 0b17 	vmov	r0, r1, d7
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a4c8:	f7f6 fb1e 	bl	8000b08 <__aeabi_dcmpeq>
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	b158      	cbz	r0, 800a4e8 <_dtoa_r+0xe8>
 800a4d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 8551 	beq.w	800af80 <_dtoa_r+0xb80>
 800a4de:	488b      	ldr	r0, [pc, #556]	; (800a70c <_dtoa_r+0x30c>)
 800a4e0:	6018      	str	r0, [r3, #0]
 800a4e2:	1e43      	subs	r3, r0, #1
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	e7dd      	b.n	800a4a4 <_dtoa_r+0xa4>
 800a4e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a4ec:	aa12      	add	r2, sp, #72	; 0x48
 800a4ee:	a913      	add	r1, sp, #76	; 0x4c
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f001 f8ad 	bl	800b650 <__d2b>
 800a4f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4fa:	4683      	mov	fp, r0
 800a4fc:	2d00      	cmp	r5, #0
 800a4fe:	d07c      	beq.n	800a5fa <_dtoa_r+0x1fa>
 800a500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a502:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a506:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a50a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a50e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a512:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a51a:	4b7d      	ldr	r3, [pc, #500]	; (800a710 <_dtoa_r+0x310>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	4630      	mov	r0, r6
 800a520:	4639      	mov	r1, r7
 800a522:	f7f5 fed1 	bl	80002c8 <__aeabi_dsub>
 800a526:	a36e      	add	r3, pc, #440	; (adr r3, 800a6e0 <_dtoa_r+0x2e0>)
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f7f6 f884 	bl	8000638 <__aeabi_dmul>
 800a530:	a36d      	add	r3, pc, #436	; (adr r3, 800a6e8 <_dtoa_r+0x2e8>)
 800a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a536:	f7f5 fec9 	bl	80002cc <__adddf3>
 800a53a:	4606      	mov	r6, r0
 800a53c:	4628      	mov	r0, r5
 800a53e:	460f      	mov	r7, r1
 800a540:	f7f6 f810 	bl	8000564 <__aeabi_i2d>
 800a544:	a36a      	add	r3, pc, #424	; (adr r3, 800a6f0 <_dtoa_r+0x2f0>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	f7f6 f875 	bl	8000638 <__aeabi_dmul>
 800a54e:	4602      	mov	r2, r0
 800a550:	460b      	mov	r3, r1
 800a552:	4630      	mov	r0, r6
 800a554:	4639      	mov	r1, r7
 800a556:	f7f5 feb9 	bl	80002cc <__adddf3>
 800a55a:	4606      	mov	r6, r0
 800a55c:	460f      	mov	r7, r1
 800a55e:	f7f6 fb1b 	bl	8000b98 <__aeabi_d2iz>
 800a562:	2200      	movs	r2, #0
 800a564:	4682      	mov	sl, r0
 800a566:	2300      	movs	r3, #0
 800a568:	4630      	mov	r0, r6
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f6 fad6 	bl	8000b1c <__aeabi_dcmplt>
 800a570:	b148      	cbz	r0, 800a586 <_dtoa_r+0x186>
 800a572:	4650      	mov	r0, sl
 800a574:	f7f5 fff6 	bl	8000564 <__aeabi_i2d>
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	f7f6 fac4 	bl	8000b08 <__aeabi_dcmpeq>
 800a580:	b908      	cbnz	r0, 800a586 <_dtoa_r+0x186>
 800a582:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a586:	f1ba 0f16 	cmp.w	sl, #22
 800a58a:	d854      	bhi.n	800a636 <_dtoa_r+0x236>
 800a58c:	4b61      	ldr	r3, [pc, #388]	; (800a714 <_dtoa_r+0x314>)
 800a58e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a59a:	f7f6 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d04b      	beq.n	800a63a <_dtoa_r+0x23a>
 800a5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	930e      	str	r3, [sp, #56]	; 0x38
 800a5aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5ac:	1b5d      	subs	r5, r3, r5
 800a5ae:	1e6b      	subs	r3, r5, #1
 800a5b0:	9304      	str	r3, [sp, #16]
 800a5b2:	bf43      	ittte	mi
 800a5b4:	2300      	movmi	r3, #0
 800a5b6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a5ba:	9304      	strmi	r3, [sp, #16]
 800a5bc:	f04f 0800 	movpl.w	r8, #0
 800a5c0:	f1ba 0f00 	cmp.w	sl, #0
 800a5c4:	db3b      	blt.n	800a63e <_dtoa_r+0x23e>
 800a5c6:	9b04      	ldr	r3, [sp, #16]
 800a5c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a5cc:	4453      	add	r3, sl
 800a5ce:	9304      	str	r3, [sp, #16]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9306      	str	r3, [sp, #24]
 800a5d4:	9b05      	ldr	r3, [sp, #20]
 800a5d6:	2b09      	cmp	r3, #9
 800a5d8:	d869      	bhi.n	800a6ae <_dtoa_r+0x2ae>
 800a5da:	2b05      	cmp	r3, #5
 800a5dc:	bfc4      	itt	gt
 800a5de:	3b04      	subgt	r3, #4
 800a5e0:	9305      	strgt	r3, [sp, #20]
 800a5e2:	9b05      	ldr	r3, [sp, #20]
 800a5e4:	f1a3 0302 	sub.w	r3, r3, #2
 800a5e8:	bfcc      	ite	gt
 800a5ea:	2500      	movgt	r5, #0
 800a5ec:	2501      	movle	r5, #1
 800a5ee:	2b03      	cmp	r3, #3
 800a5f0:	d869      	bhi.n	800a6c6 <_dtoa_r+0x2c6>
 800a5f2:	e8df f003 	tbb	[pc, r3]
 800a5f6:	4e2c      	.short	0x4e2c
 800a5f8:	5a4c      	.short	0x5a4c
 800a5fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a5fe:	441d      	add	r5, r3
 800a600:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a604:	2b20      	cmp	r3, #32
 800a606:	bfc1      	itttt	gt
 800a608:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a60c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a610:	fa09 f303 	lslgt.w	r3, r9, r3
 800a614:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a618:	bfda      	itte	le
 800a61a:	f1c3 0320 	rsble	r3, r3, #32
 800a61e:	fa06 f003 	lslle.w	r0, r6, r3
 800a622:	4318      	orrgt	r0, r3
 800a624:	f7f5 ff8e 	bl	8000544 <__aeabi_ui2d>
 800a628:	2301      	movs	r3, #1
 800a62a:	4606      	mov	r6, r0
 800a62c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a630:	3d01      	subs	r5, #1
 800a632:	9310      	str	r3, [sp, #64]	; 0x40
 800a634:	e771      	b.n	800a51a <_dtoa_r+0x11a>
 800a636:	2301      	movs	r3, #1
 800a638:	e7b6      	b.n	800a5a8 <_dtoa_r+0x1a8>
 800a63a:	900e      	str	r0, [sp, #56]	; 0x38
 800a63c:	e7b5      	b.n	800a5aa <_dtoa_r+0x1aa>
 800a63e:	f1ca 0300 	rsb	r3, sl, #0
 800a642:	9306      	str	r3, [sp, #24]
 800a644:	2300      	movs	r3, #0
 800a646:	eba8 080a 	sub.w	r8, r8, sl
 800a64a:	930d      	str	r3, [sp, #52]	; 0x34
 800a64c:	e7c2      	b.n	800a5d4 <_dtoa_r+0x1d4>
 800a64e:	2300      	movs	r3, #0
 800a650:	9308      	str	r3, [sp, #32]
 800a652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a654:	2b00      	cmp	r3, #0
 800a656:	dc39      	bgt.n	800a6cc <_dtoa_r+0x2cc>
 800a658:	f04f 0901 	mov.w	r9, #1
 800a65c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a660:	464b      	mov	r3, r9
 800a662:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a666:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a668:	2200      	movs	r2, #0
 800a66a:	6042      	str	r2, [r0, #4]
 800a66c:	2204      	movs	r2, #4
 800a66e:	f102 0614 	add.w	r6, r2, #20
 800a672:	429e      	cmp	r6, r3
 800a674:	6841      	ldr	r1, [r0, #4]
 800a676:	d92f      	bls.n	800a6d8 <_dtoa_r+0x2d8>
 800a678:	4620      	mov	r0, r4
 800a67a:	f000 fcc7 	bl	800b00c <_Balloc>
 800a67e:	9000      	str	r0, [sp, #0]
 800a680:	2800      	cmp	r0, #0
 800a682:	d14b      	bne.n	800a71c <_dtoa_r+0x31c>
 800a684:	4b24      	ldr	r3, [pc, #144]	; (800a718 <_dtoa_r+0x318>)
 800a686:	4602      	mov	r2, r0
 800a688:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a68c:	e6d1      	b.n	800a432 <_dtoa_r+0x32>
 800a68e:	2301      	movs	r3, #1
 800a690:	e7de      	b.n	800a650 <_dtoa_r+0x250>
 800a692:	2300      	movs	r3, #0
 800a694:	9308      	str	r3, [sp, #32]
 800a696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a698:	eb0a 0903 	add.w	r9, sl, r3
 800a69c:	f109 0301 	add.w	r3, r9, #1
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	bfb8      	it	lt
 800a6a6:	2301      	movlt	r3, #1
 800a6a8:	e7dd      	b.n	800a666 <_dtoa_r+0x266>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e7f2      	b.n	800a694 <_dtoa_r+0x294>
 800a6ae:	2501      	movs	r5, #1
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9305      	str	r3, [sp, #20]
 800a6b4:	9508      	str	r5, [sp, #32]
 800a6b6:	f04f 39ff 	mov.w	r9, #4294967295
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6c0:	2312      	movs	r3, #18
 800a6c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a6c4:	e7cf      	b.n	800a666 <_dtoa_r+0x266>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	9308      	str	r3, [sp, #32]
 800a6ca:	e7f4      	b.n	800a6b6 <_dtoa_r+0x2b6>
 800a6cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a6d0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a6d4:	464b      	mov	r3, r9
 800a6d6:	e7c6      	b.n	800a666 <_dtoa_r+0x266>
 800a6d8:	3101      	adds	r1, #1
 800a6da:	6041      	str	r1, [r0, #4]
 800a6dc:	0052      	lsls	r2, r2, #1
 800a6de:	e7c6      	b.n	800a66e <_dtoa_r+0x26e>
 800a6e0:	636f4361 	.word	0x636f4361
 800a6e4:	3fd287a7 	.word	0x3fd287a7
 800a6e8:	8b60c8b3 	.word	0x8b60c8b3
 800a6ec:	3fc68a28 	.word	0x3fc68a28
 800a6f0:	509f79fb 	.word	0x509f79fb
 800a6f4:	3fd34413 	.word	0x3fd34413
 800a6f8:	0800c8d1 	.word	0x0800c8d1
 800a6fc:	0800c8e8 	.word	0x0800c8e8
 800a700:	7ff00000 	.word	0x7ff00000
 800a704:	0800c8cd 	.word	0x0800c8cd
 800a708:	0800c8c4 	.word	0x0800c8c4
 800a70c:	0800c8a1 	.word	0x0800c8a1
 800a710:	3ff80000 	.word	0x3ff80000
 800a714:	0800c9e0 	.word	0x0800c9e0
 800a718:	0800c947 	.word	0x0800c947
 800a71c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a71e:	9a00      	ldr	r2, [sp, #0]
 800a720:	601a      	str	r2, [r3, #0]
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b0e      	cmp	r3, #14
 800a726:	f200 80ad 	bhi.w	800a884 <_dtoa_r+0x484>
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	f000 80aa 	beq.w	800a884 <_dtoa_r+0x484>
 800a730:	f1ba 0f00 	cmp.w	sl, #0
 800a734:	dd36      	ble.n	800a7a4 <_dtoa_r+0x3a4>
 800a736:	4ac3      	ldr	r2, [pc, #780]	; (800aa44 <_dtoa_r+0x644>)
 800a738:	f00a 030f 	and.w	r3, sl, #15
 800a73c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a740:	ed93 7b00 	vldr	d7, [r3]
 800a744:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a748:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a74c:	eeb0 8a47 	vmov.f32	s16, s14
 800a750:	eef0 8a67 	vmov.f32	s17, s15
 800a754:	d016      	beq.n	800a784 <_dtoa_r+0x384>
 800a756:	4bbc      	ldr	r3, [pc, #752]	; (800aa48 <_dtoa_r+0x648>)
 800a758:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a760:	f7f6 f894 	bl	800088c <__aeabi_ddiv>
 800a764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a768:	f007 070f 	and.w	r7, r7, #15
 800a76c:	2503      	movs	r5, #3
 800a76e:	4eb6      	ldr	r6, [pc, #728]	; (800aa48 <_dtoa_r+0x648>)
 800a770:	b957      	cbnz	r7, 800a788 <_dtoa_r+0x388>
 800a772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a776:	ec53 2b18 	vmov	r2, r3, d8
 800a77a:	f7f6 f887 	bl	800088c <__aeabi_ddiv>
 800a77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a782:	e029      	b.n	800a7d8 <_dtoa_r+0x3d8>
 800a784:	2502      	movs	r5, #2
 800a786:	e7f2      	b.n	800a76e <_dtoa_r+0x36e>
 800a788:	07f9      	lsls	r1, r7, #31
 800a78a:	d508      	bpl.n	800a79e <_dtoa_r+0x39e>
 800a78c:	ec51 0b18 	vmov	r0, r1, d8
 800a790:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a794:	f7f5 ff50 	bl	8000638 <__aeabi_dmul>
 800a798:	ec41 0b18 	vmov	d8, r0, r1
 800a79c:	3501      	adds	r5, #1
 800a79e:	107f      	asrs	r7, r7, #1
 800a7a0:	3608      	adds	r6, #8
 800a7a2:	e7e5      	b.n	800a770 <_dtoa_r+0x370>
 800a7a4:	f000 80a6 	beq.w	800a8f4 <_dtoa_r+0x4f4>
 800a7a8:	f1ca 0600 	rsb	r6, sl, #0
 800a7ac:	4ba5      	ldr	r3, [pc, #660]	; (800aa44 <_dtoa_r+0x644>)
 800a7ae:	4fa6      	ldr	r7, [pc, #664]	; (800aa48 <_dtoa_r+0x648>)
 800a7b0:	f006 020f 	and.w	r2, r6, #15
 800a7b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7c0:	f7f5 ff3a 	bl	8000638 <__aeabi_dmul>
 800a7c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c8:	1136      	asrs	r6, r6, #4
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	2502      	movs	r5, #2
 800a7ce:	2e00      	cmp	r6, #0
 800a7d0:	f040 8085 	bne.w	800a8de <_dtoa_r+0x4de>
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1d2      	bne.n	800a77e <_dtoa_r+0x37e>
 800a7d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f000 808c 	beq.w	800a8f8 <_dtoa_r+0x4f8>
 800a7e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7e4:	4b99      	ldr	r3, [pc, #612]	; (800aa4c <_dtoa_r+0x64c>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f996 	bl	8000b1c <__aeabi_dcmplt>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	f000 8081 	beq.w	800a8f8 <_dtoa_r+0x4f8>
 800a7f6:	9b01      	ldr	r3, [sp, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d07d      	beq.n	800a8f8 <_dtoa_r+0x4f8>
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	dd3c      	ble.n	800a87c <_dtoa_r+0x47c>
 800a802:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a806:	9307      	str	r3, [sp, #28]
 800a808:	2200      	movs	r2, #0
 800a80a:	4b91      	ldr	r3, [pc, #580]	; (800aa50 <_dtoa_r+0x650>)
 800a80c:	4630      	mov	r0, r6
 800a80e:	4639      	mov	r1, r7
 800a810:	f7f5 ff12 	bl	8000638 <__aeabi_dmul>
 800a814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a818:	3501      	adds	r5, #1
 800a81a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a81e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a822:	4628      	mov	r0, r5
 800a824:	f7f5 fe9e 	bl	8000564 <__aeabi_i2d>
 800a828:	4632      	mov	r2, r6
 800a82a:	463b      	mov	r3, r7
 800a82c:	f7f5 ff04 	bl	8000638 <__aeabi_dmul>
 800a830:	4b88      	ldr	r3, [pc, #544]	; (800aa54 <_dtoa_r+0x654>)
 800a832:	2200      	movs	r2, #0
 800a834:	f7f5 fd4a 	bl	80002cc <__adddf3>
 800a838:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a83c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a840:	9303      	str	r3, [sp, #12]
 800a842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a844:	2b00      	cmp	r3, #0
 800a846:	d15c      	bne.n	800a902 <_dtoa_r+0x502>
 800a848:	4b83      	ldr	r3, [pc, #524]	; (800aa58 <_dtoa_r+0x658>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fd3a 	bl	80002c8 <__aeabi_dsub>
 800a854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a858:	4606      	mov	r6, r0
 800a85a:	460f      	mov	r7, r1
 800a85c:	f7f6 f97c 	bl	8000b58 <__aeabi_dcmpgt>
 800a860:	2800      	cmp	r0, #0
 800a862:	f040 8296 	bne.w	800ad92 <_dtoa_r+0x992>
 800a866:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a86a:	4630      	mov	r0, r6
 800a86c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a870:	4639      	mov	r1, r7
 800a872:	f7f6 f953 	bl	8000b1c <__aeabi_dcmplt>
 800a876:	2800      	cmp	r0, #0
 800a878:	f040 8288 	bne.w	800ad8c <_dtoa_r+0x98c>
 800a87c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a880:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a884:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a886:	2b00      	cmp	r3, #0
 800a888:	f2c0 8158 	blt.w	800ab3c <_dtoa_r+0x73c>
 800a88c:	f1ba 0f0e 	cmp.w	sl, #14
 800a890:	f300 8154 	bgt.w	800ab3c <_dtoa_r+0x73c>
 800a894:	4b6b      	ldr	r3, [pc, #428]	; (800aa44 <_dtoa_r+0x644>)
 800a896:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a89a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f280 80e3 	bge.w	800aa6c <_dtoa_r+0x66c>
 800a8a6:	9b01      	ldr	r3, [sp, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f300 80df 	bgt.w	800aa6c <_dtoa_r+0x66c>
 800a8ae:	f040 826d 	bne.w	800ad8c <_dtoa_r+0x98c>
 800a8b2:	4b69      	ldr	r3, [pc, #420]	; (800aa58 <_dtoa_r+0x658>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	4649      	mov	r1, r9
 800a8ba:	f7f5 febd 	bl	8000638 <__aeabi_dmul>
 800a8be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a8c2:	f7f6 f93f 	bl	8000b44 <__aeabi_dcmpge>
 800a8c6:	9e01      	ldr	r6, [sp, #4]
 800a8c8:	4637      	mov	r7, r6
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	f040 8243 	bne.w	800ad56 <_dtoa_r+0x956>
 800a8d0:	9d00      	ldr	r5, [sp, #0]
 800a8d2:	2331      	movs	r3, #49	; 0x31
 800a8d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a8d8:	f10a 0a01 	add.w	sl, sl, #1
 800a8dc:	e23f      	b.n	800ad5e <_dtoa_r+0x95e>
 800a8de:	07f2      	lsls	r2, r6, #31
 800a8e0:	d505      	bpl.n	800a8ee <_dtoa_r+0x4ee>
 800a8e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8e6:	f7f5 fea7 	bl	8000638 <__aeabi_dmul>
 800a8ea:	3501      	adds	r5, #1
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	1076      	asrs	r6, r6, #1
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	e76c      	b.n	800a7ce <_dtoa_r+0x3ce>
 800a8f4:	2502      	movs	r5, #2
 800a8f6:	e76f      	b.n	800a7d8 <_dtoa_r+0x3d8>
 800a8f8:	9b01      	ldr	r3, [sp, #4]
 800a8fa:	f8cd a01c 	str.w	sl, [sp, #28]
 800a8fe:	930c      	str	r3, [sp, #48]	; 0x30
 800a900:	e78d      	b.n	800a81e <_dtoa_r+0x41e>
 800a902:	9900      	ldr	r1, [sp, #0]
 800a904:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a906:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a908:	4b4e      	ldr	r3, [pc, #312]	; (800aa44 <_dtoa_r+0x644>)
 800a90a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a90e:	4401      	add	r1, r0
 800a910:	9102      	str	r1, [sp, #8]
 800a912:	9908      	ldr	r1, [sp, #32]
 800a914:	eeb0 8a47 	vmov.f32	s16, s14
 800a918:	eef0 8a67 	vmov.f32	s17, s15
 800a91c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a920:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a924:	2900      	cmp	r1, #0
 800a926:	d045      	beq.n	800a9b4 <_dtoa_r+0x5b4>
 800a928:	494c      	ldr	r1, [pc, #304]	; (800aa5c <_dtoa_r+0x65c>)
 800a92a:	2000      	movs	r0, #0
 800a92c:	f7f5 ffae 	bl	800088c <__aeabi_ddiv>
 800a930:	ec53 2b18 	vmov	r2, r3, d8
 800a934:	f7f5 fcc8 	bl	80002c8 <__aeabi_dsub>
 800a938:	9d00      	ldr	r5, [sp, #0]
 800a93a:	ec41 0b18 	vmov	d8, r0, r1
 800a93e:	4639      	mov	r1, r7
 800a940:	4630      	mov	r0, r6
 800a942:	f7f6 f929 	bl	8000b98 <__aeabi_d2iz>
 800a946:	900c      	str	r0, [sp, #48]	; 0x30
 800a948:	f7f5 fe0c 	bl	8000564 <__aeabi_i2d>
 800a94c:	4602      	mov	r2, r0
 800a94e:	460b      	mov	r3, r1
 800a950:	4630      	mov	r0, r6
 800a952:	4639      	mov	r1, r7
 800a954:	f7f5 fcb8 	bl	80002c8 <__aeabi_dsub>
 800a958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a95a:	3330      	adds	r3, #48	; 0x30
 800a95c:	f805 3b01 	strb.w	r3, [r5], #1
 800a960:	ec53 2b18 	vmov	r2, r3, d8
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	f7f6 f8d8 	bl	8000b1c <__aeabi_dcmplt>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d165      	bne.n	800aa3c <_dtoa_r+0x63c>
 800a970:	4632      	mov	r2, r6
 800a972:	463b      	mov	r3, r7
 800a974:	4935      	ldr	r1, [pc, #212]	; (800aa4c <_dtoa_r+0x64c>)
 800a976:	2000      	movs	r0, #0
 800a978:	f7f5 fca6 	bl	80002c8 <__aeabi_dsub>
 800a97c:	ec53 2b18 	vmov	r2, r3, d8
 800a980:	f7f6 f8cc 	bl	8000b1c <__aeabi_dcmplt>
 800a984:	2800      	cmp	r0, #0
 800a986:	f040 80b9 	bne.w	800aafc <_dtoa_r+0x6fc>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	429d      	cmp	r5, r3
 800a98e:	f43f af75 	beq.w	800a87c <_dtoa_r+0x47c>
 800a992:	4b2f      	ldr	r3, [pc, #188]	; (800aa50 <_dtoa_r+0x650>)
 800a994:	ec51 0b18 	vmov	r0, r1, d8
 800a998:	2200      	movs	r2, #0
 800a99a:	f7f5 fe4d 	bl	8000638 <__aeabi_dmul>
 800a99e:	4b2c      	ldr	r3, [pc, #176]	; (800aa50 <_dtoa_r+0x650>)
 800a9a0:	ec41 0b18 	vmov	d8, r0, r1
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	f7f5 fe45 	bl	8000638 <__aeabi_dmul>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	460f      	mov	r7, r1
 800a9b2:	e7c4      	b.n	800a93e <_dtoa_r+0x53e>
 800a9b4:	ec51 0b17 	vmov	r0, r1, d7
 800a9b8:	f7f5 fe3e 	bl	8000638 <__aeabi_dmul>
 800a9bc:	9b02      	ldr	r3, [sp, #8]
 800a9be:	9d00      	ldr	r5, [sp, #0]
 800a9c0:	930c      	str	r3, [sp, #48]	; 0x30
 800a9c2:	ec41 0b18 	vmov	d8, r0, r1
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7f6 f8e5 	bl	8000b98 <__aeabi_d2iz>
 800a9ce:	9011      	str	r0, [sp, #68]	; 0x44
 800a9d0:	f7f5 fdc8 	bl	8000564 <__aeabi_i2d>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	4630      	mov	r0, r6
 800a9da:	4639      	mov	r1, r7
 800a9dc:	f7f5 fc74 	bl	80002c8 <__aeabi_dsub>
 800a9e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9e2:	3330      	adds	r3, #48	; 0x30
 800a9e4:	f805 3b01 	strb.w	r3, [r5], #1
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	429d      	cmp	r5, r3
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460f      	mov	r7, r1
 800a9f0:	f04f 0200 	mov.w	r2, #0
 800a9f4:	d134      	bne.n	800aa60 <_dtoa_r+0x660>
 800a9f6:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <_dtoa_r+0x65c>)
 800a9f8:	ec51 0b18 	vmov	r0, r1, d8
 800a9fc:	f7f5 fc66 	bl	80002cc <__adddf3>
 800aa00:	4602      	mov	r2, r0
 800aa02:	460b      	mov	r3, r1
 800aa04:	4630      	mov	r0, r6
 800aa06:	4639      	mov	r1, r7
 800aa08:	f7f6 f8a6 	bl	8000b58 <__aeabi_dcmpgt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	d175      	bne.n	800aafc <_dtoa_r+0x6fc>
 800aa10:	ec53 2b18 	vmov	r2, r3, d8
 800aa14:	4911      	ldr	r1, [pc, #68]	; (800aa5c <_dtoa_r+0x65c>)
 800aa16:	2000      	movs	r0, #0
 800aa18:	f7f5 fc56 	bl	80002c8 <__aeabi_dsub>
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	4630      	mov	r0, r6
 800aa22:	4639      	mov	r1, r7
 800aa24:	f7f6 f87a 	bl	8000b1c <__aeabi_dcmplt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f43f af27 	beq.w	800a87c <_dtoa_r+0x47c>
 800aa2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa30:	1e6b      	subs	r3, r5, #1
 800aa32:	930c      	str	r3, [sp, #48]	; 0x30
 800aa34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa38:	2b30      	cmp	r3, #48	; 0x30
 800aa3a:	d0f8      	beq.n	800aa2e <_dtoa_r+0x62e>
 800aa3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa40:	e04a      	b.n	800aad8 <_dtoa_r+0x6d8>
 800aa42:	bf00      	nop
 800aa44:	0800c9e0 	.word	0x0800c9e0
 800aa48:	0800c9b8 	.word	0x0800c9b8
 800aa4c:	3ff00000 	.word	0x3ff00000
 800aa50:	40240000 	.word	0x40240000
 800aa54:	401c0000 	.word	0x401c0000
 800aa58:	40140000 	.word	0x40140000
 800aa5c:	3fe00000 	.word	0x3fe00000
 800aa60:	4baf      	ldr	r3, [pc, #700]	; (800ad20 <_dtoa_r+0x920>)
 800aa62:	f7f5 fde9 	bl	8000638 <__aeabi_dmul>
 800aa66:	4606      	mov	r6, r0
 800aa68:	460f      	mov	r7, r1
 800aa6a:	e7ac      	b.n	800a9c6 <_dtoa_r+0x5c6>
 800aa6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa70:	9d00      	ldr	r5, [sp, #0]
 800aa72:	4642      	mov	r2, r8
 800aa74:	464b      	mov	r3, r9
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f5 ff07 	bl	800088c <__aeabi_ddiv>
 800aa7e:	f7f6 f88b 	bl	8000b98 <__aeabi_d2iz>
 800aa82:	9002      	str	r0, [sp, #8]
 800aa84:	f7f5 fd6e 	bl	8000564 <__aeabi_i2d>
 800aa88:	4642      	mov	r2, r8
 800aa8a:	464b      	mov	r3, r9
 800aa8c:	f7f5 fdd4 	bl	8000638 <__aeabi_dmul>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4630      	mov	r0, r6
 800aa96:	4639      	mov	r1, r7
 800aa98:	f7f5 fc16 	bl	80002c8 <__aeabi_dsub>
 800aa9c:	9e02      	ldr	r6, [sp, #8]
 800aa9e:	9f01      	ldr	r7, [sp, #4]
 800aaa0:	3630      	adds	r6, #48	; 0x30
 800aaa2:	f805 6b01 	strb.w	r6, [r5], #1
 800aaa6:	9e00      	ldr	r6, [sp, #0]
 800aaa8:	1bae      	subs	r6, r5, r6
 800aaaa:	42b7      	cmp	r7, r6
 800aaac:	4602      	mov	r2, r0
 800aaae:	460b      	mov	r3, r1
 800aab0:	d137      	bne.n	800ab22 <_dtoa_r+0x722>
 800aab2:	f7f5 fc0b 	bl	80002cc <__adddf3>
 800aab6:	4642      	mov	r2, r8
 800aab8:	464b      	mov	r3, r9
 800aaba:	4606      	mov	r6, r0
 800aabc:	460f      	mov	r7, r1
 800aabe:	f7f6 f84b 	bl	8000b58 <__aeabi_dcmpgt>
 800aac2:	b9c8      	cbnz	r0, 800aaf8 <_dtoa_r+0x6f8>
 800aac4:	4642      	mov	r2, r8
 800aac6:	464b      	mov	r3, r9
 800aac8:	4630      	mov	r0, r6
 800aaca:	4639      	mov	r1, r7
 800aacc:	f7f6 f81c 	bl	8000b08 <__aeabi_dcmpeq>
 800aad0:	b110      	cbz	r0, 800aad8 <_dtoa_r+0x6d8>
 800aad2:	9b02      	ldr	r3, [sp, #8]
 800aad4:	07d9      	lsls	r1, r3, #31
 800aad6:	d40f      	bmi.n	800aaf8 <_dtoa_r+0x6f8>
 800aad8:	4620      	mov	r0, r4
 800aada:	4659      	mov	r1, fp
 800aadc:	f000 fad6 	bl	800b08c <_Bfree>
 800aae0:	2300      	movs	r3, #0
 800aae2:	702b      	strb	r3, [r5, #0]
 800aae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aae6:	f10a 0001 	add.w	r0, sl, #1
 800aaea:	6018      	str	r0, [r3, #0]
 800aaec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	f43f acd8 	beq.w	800a4a4 <_dtoa_r+0xa4>
 800aaf4:	601d      	str	r5, [r3, #0]
 800aaf6:	e4d5      	b.n	800a4a4 <_dtoa_r+0xa4>
 800aaf8:	f8cd a01c 	str.w	sl, [sp, #28]
 800aafc:	462b      	mov	r3, r5
 800aafe:	461d      	mov	r5, r3
 800ab00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab04:	2a39      	cmp	r2, #57	; 0x39
 800ab06:	d108      	bne.n	800ab1a <_dtoa_r+0x71a>
 800ab08:	9a00      	ldr	r2, [sp, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d1f7      	bne.n	800aafe <_dtoa_r+0x6fe>
 800ab0e:	9a07      	ldr	r2, [sp, #28]
 800ab10:	9900      	ldr	r1, [sp, #0]
 800ab12:	3201      	adds	r2, #1
 800ab14:	9207      	str	r2, [sp, #28]
 800ab16:	2230      	movs	r2, #48	; 0x30
 800ab18:	700a      	strb	r2, [r1, #0]
 800ab1a:	781a      	ldrb	r2, [r3, #0]
 800ab1c:	3201      	adds	r2, #1
 800ab1e:	701a      	strb	r2, [r3, #0]
 800ab20:	e78c      	b.n	800aa3c <_dtoa_r+0x63c>
 800ab22:	4b7f      	ldr	r3, [pc, #508]	; (800ad20 <_dtoa_r+0x920>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	f7f5 fd87 	bl	8000638 <__aeabi_dmul>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460f      	mov	r7, r1
 800ab32:	f7f5 ffe9 	bl	8000b08 <__aeabi_dcmpeq>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d09b      	beq.n	800aa72 <_dtoa_r+0x672>
 800ab3a:	e7cd      	b.n	800aad8 <_dtoa_r+0x6d8>
 800ab3c:	9a08      	ldr	r2, [sp, #32]
 800ab3e:	2a00      	cmp	r2, #0
 800ab40:	f000 80c4 	beq.w	800accc <_dtoa_r+0x8cc>
 800ab44:	9a05      	ldr	r2, [sp, #20]
 800ab46:	2a01      	cmp	r2, #1
 800ab48:	f300 80a8 	bgt.w	800ac9c <_dtoa_r+0x89c>
 800ab4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab4e:	2a00      	cmp	r2, #0
 800ab50:	f000 80a0 	beq.w	800ac94 <_dtoa_r+0x894>
 800ab54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ab58:	9e06      	ldr	r6, [sp, #24]
 800ab5a:	4645      	mov	r5, r8
 800ab5c:	9a04      	ldr	r2, [sp, #16]
 800ab5e:	2101      	movs	r1, #1
 800ab60:	441a      	add	r2, r3
 800ab62:	4620      	mov	r0, r4
 800ab64:	4498      	add	r8, r3
 800ab66:	9204      	str	r2, [sp, #16]
 800ab68:	f000 fb4c 	bl	800b204 <__i2b>
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	2d00      	cmp	r5, #0
 800ab70:	dd0b      	ble.n	800ab8a <_dtoa_r+0x78a>
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	dd08      	ble.n	800ab8a <_dtoa_r+0x78a>
 800ab78:	42ab      	cmp	r3, r5
 800ab7a:	9a04      	ldr	r2, [sp, #16]
 800ab7c:	bfa8      	it	ge
 800ab7e:	462b      	movge	r3, r5
 800ab80:	eba8 0803 	sub.w	r8, r8, r3
 800ab84:	1aed      	subs	r5, r5, r3
 800ab86:	1ad3      	subs	r3, r2, r3
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	b1fb      	cbz	r3, 800abce <_dtoa_r+0x7ce>
 800ab8e:	9b08      	ldr	r3, [sp, #32]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 809f 	beq.w	800acd4 <_dtoa_r+0x8d4>
 800ab96:	2e00      	cmp	r6, #0
 800ab98:	dd11      	ble.n	800abbe <_dtoa_r+0x7be>
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	4632      	mov	r2, r6
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 fbec 	bl	800b37c <__pow5mult>
 800aba4:	465a      	mov	r2, fp
 800aba6:	4601      	mov	r1, r0
 800aba8:	4607      	mov	r7, r0
 800abaa:	4620      	mov	r0, r4
 800abac:	f000 fb40 	bl	800b230 <__multiply>
 800abb0:	4659      	mov	r1, fp
 800abb2:	9007      	str	r0, [sp, #28]
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fa69 	bl	800b08c <_Bfree>
 800abba:	9b07      	ldr	r3, [sp, #28]
 800abbc:	469b      	mov	fp, r3
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	1b9a      	subs	r2, r3, r6
 800abc2:	d004      	beq.n	800abce <_dtoa_r+0x7ce>
 800abc4:	4659      	mov	r1, fp
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 fbd8 	bl	800b37c <__pow5mult>
 800abcc:	4683      	mov	fp, r0
 800abce:	2101      	movs	r1, #1
 800abd0:	4620      	mov	r0, r4
 800abd2:	f000 fb17 	bl	800b204 <__i2b>
 800abd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd8:	2b00      	cmp	r3, #0
 800abda:	4606      	mov	r6, r0
 800abdc:	dd7c      	ble.n	800acd8 <_dtoa_r+0x8d8>
 800abde:	461a      	mov	r2, r3
 800abe0:	4601      	mov	r1, r0
 800abe2:	4620      	mov	r0, r4
 800abe4:	f000 fbca 	bl	800b37c <__pow5mult>
 800abe8:	9b05      	ldr	r3, [sp, #20]
 800abea:	2b01      	cmp	r3, #1
 800abec:	4606      	mov	r6, r0
 800abee:	dd76      	ble.n	800acde <_dtoa_r+0x8de>
 800abf0:	2300      	movs	r3, #0
 800abf2:	9306      	str	r3, [sp, #24]
 800abf4:	6933      	ldr	r3, [r6, #16]
 800abf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800abfa:	6918      	ldr	r0, [r3, #16]
 800abfc:	f000 fab2 	bl	800b164 <__hi0bits>
 800ac00:	f1c0 0020 	rsb	r0, r0, #32
 800ac04:	9b04      	ldr	r3, [sp, #16]
 800ac06:	4418      	add	r0, r3
 800ac08:	f010 001f 	ands.w	r0, r0, #31
 800ac0c:	f000 8086 	beq.w	800ad1c <_dtoa_r+0x91c>
 800ac10:	f1c0 0320 	rsb	r3, r0, #32
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	dd7f      	ble.n	800ad18 <_dtoa_r+0x918>
 800ac18:	f1c0 001c 	rsb	r0, r0, #28
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	4403      	add	r3, r0
 800ac20:	4480      	add	r8, r0
 800ac22:	4405      	add	r5, r0
 800ac24:	9304      	str	r3, [sp, #16]
 800ac26:	f1b8 0f00 	cmp.w	r8, #0
 800ac2a:	dd05      	ble.n	800ac38 <_dtoa_r+0x838>
 800ac2c:	4659      	mov	r1, fp
 800ac2e:	4642      	mov	r2, r8
 800ac30:	4620      	mov	r0, r4
 800ac32:	f000 fbfd 	bl	800b430 <__lshift>
 800ac36:	4683      	mov	fp, r0
 800ac38:	9b04      	ldr	r3, [sp, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	dd05      	ble.n	800ac4a <_dtoa_r+0x84a>
 800ac3e:	4631      	mov	r1, r6
 800ac40:	461a      	mov	r2, r3
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 fbf4 	bl	800b430 <__lshift>
 800ac48:	4606      	mov	r6, r0
 800ac4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d069      	beq.n	800ad24 <_dtoa_r+0x924>
 800ac50:	4631      	mov	r1, r6
 800ac52:	4658      	mov	r0, fp
 800ac54:	f000 fc58 	bl	800b508 <__mcmp>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	da63      	bge.n	800ad24 <_dtoa_r+0x924>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	4659      	mov	r1, fp
 800ac60:	220a      	movs	r2, #10
 800ac62:	4620      	mov	r0, r4
 800ac64:	f000 fa34 	bl	800b0d0 <__multadd>
 800ac68:	9b08      	ldr	r3, [sp, #32]
 800ac6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac6e:	4683      	mov	fp, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 818f 	beq.w	800af94 <_dtoa_r+0xb94>
 800ac76:	4639      	mov	r1, r7
 800ac78:	2300      	movs	r3, #0
 800ac7a:	220a      	movs	r2, #10
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f000 fa27 	bl	800b0d0 <__multadd>
 800ac82:	f1b9 0f00 	cmp.w	r9, #0
 800ac86:	4607      	mov	r7, r0
 800ac88:	f300 808e 	bgt.w	800ada8 <_dtoa_r+0x9a8>
 800ac8c:	9b05      	ldr	r3, [sp, #20]
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	dc50      	bgt.n	800ad34 <_dtoa_r+0x934>
 800ac92:	e089      	b.n	800ada8 <_dtoa_r+0x9a8>
 800ac94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac9a:	e75d      	b.n	800ab58 <_dtoa_r+0x758>
 800ac9c:	9b01      	ldr	r3, [sp, #4]
 800ac9e:	1e5e      	subs	r6, r3, #1
 800aca0:	9b06      	ldr	r3, [sp, #24]
 800aca2:	42b3      	cmp	r3, r6
 800aca4:	bfbf      	itttt	lt
 800aca6:	9b06      	ldrlt	r3, [sp, #24]
 800aca8:	9606      	strlt	r6, [sp, #24]
 800acaa:	1af2      	sublt	r2, r6, r3
 800acac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800acae:	bfb6      	itet	lt
 800acb0:	189b      	addlt	r3, r3, r2
 800acb2:	1b9e      	subge	r6, r3, r6
 800acb4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	bfb8      	it	lt
 800acba:	2600      	movlt	r6, #0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bfb5      	itete	lt
 800acc0:	eba8 0503 	sublt.w	r5, r8, r3
 800acc4:	9b01      	ldrge	r3, [sp, #4]
 800acc6:	2300      	movlt	r3, #0
 800acc8:	4645      	movge	r5, r8
 800acca:	e747      	b.n	800ab5c <_dtoa_r+0x75c>
 800accc:	9e06      	ldr	r6, [sp, #24]
 800acce:	9f08      	ldr	r7, [sp, #32]
 800acd0:	4645      	mov	r5, r8
 800acd2:	e74c      	b.n	800ab6e <_dtoa_r+0x76e>
 800acd4:	9a06      	ldr	r2, [sp, #24]
 800acd6:	e775      	b.n	800abc4 <_dtoa_r+0x7c4>
 800acd8:	9b05      	ldr	r3, [sp, #20]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	dc18      	bgt.n	800ad10 <_dtoa_r+0x910>
 800acde:	9b02      	ldr	r3, [sp, #8]
 800ace0:	b9b3      	cbnz	r3, 800ad10 <_dtoa_r+0x910>
 800ace2:	9b03      	ldr	r3, [sp, #12]
 800ace4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ace8:	b9a3      	cbnz	r3, 800ad14 <_dtoa_r+0x914>
 800acea:	9b03      	ldr	r3, [sp, #12]
 800acec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acf0:	0d1b      	lsrs	r3, r3, #20
 800acf2:	051b      	lsls	r3, r3, #20
 800acf4:	b12b      	cbz	r3, 800ad02 <_dtoa_r+0x902>
 800acf6:	9b04      	ldr	r3, [sp, #16]
 800acf8:	3301      	adds	r3, #1
 800acfa:	9304      	str	r3, [sp, #16]
 800acfc:	f108 0801 	add.w	r8, r8, #1
 800ad00:	2301      	movs	r3, #1
 800ad02:	9306      	str	r3, [sp, #24]
 800ad04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f47f af74 	bne.w	800abf4 <_dtoa_r+0x7f4>
 800ad0c:	2001      	movs	r0, #1
 800ad0e:	e779      	b.n	800ac04 <_dtoa_r+0x804>
 800ad10:	2300      	movs	r3, #0
 800ad12:	e7f6      	b.n	800ad02 <_dtoa_r+0x902>
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	e7f4      	b.n	800ad02 <_dtoa_r+0x902>
 800ad18:	d085      	beq.n	800ac26 <_dtoa_r+0x826>
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	301c      	adds	r0, #28
 800ad1e:	e77d      	b.n	800ac1c <_dtoa_r+0x81c>
 800ad20:	40240000 	.word	0x40240000
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	dc38      	bgt.n	800ad9c <_dtoa_r+0x99c>
 800ad2a:	9b05      	ldr	r3, [sp, #20]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	dd35      	ble.n	800ad9c <_dtoa_r+0x99c>
 800ad30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad34:	f1b9 0f00 	cmp.w	r9, #0
 800ad38:	d10d      	bne.n	800ad56 <_dtoa_r+0x956>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	464b      	mov	r3, r9
 800ad3e:	2205      	movs	r2, #5
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 f9c5 	bl	800b0d0 <__multadd>
 800ad46:	4601      	mov	r1, r0
 800ad48:	4606      	mov	r6, r0
 800ad4a:	4658      	mov	r0, fp
 800ad4c:	f000 fbdc 	bl	800b508 <__mcmp>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f73f adbd 	bgt.w	800a8d0 <_dtoa_r+0x4d0>
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	9d00      	ldr	r5, [sp, #0]
 800ad5a:	ea6f 0a03 	mvn.w	sl, r3
 800ad5e:	f04f 0800 	mov.w	r8, #0
 800ad62:	4631      	mov	r1, r6
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 f991 	bl	800b08c <_Bfree>
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	f43f aeb4 	beq.w	800aad8 <_dtoa_r+0x6d8>
 800ad70:	f1b8 0f00 	cmp.w	r8, #0
 800ad74:	d005      	beq.n	800ad82 <_dtoa_r+0x982>
 800ad76:	45b8      	cmp	r8, r7
 800ad78:	d003      	beq.n	800ad82 <_dtoa_r+0x982>
 800ad7a:	4641      	mov	r1, r8
 800ad7c:	4620      	mov	r0, r4
 800ad7e:	f000 f985 	bl	800b08c <_Bfree>
 800ad82:	4639      	mov	r1, r7
 800ad84:	4620      	mov	r0, r4
 800ad86:	f000 f981 	bl	800b08c <_Bfree>
 800ad8a:	e6a5      	b.n	800aad8 <_dtoa_r+0x6d8>
 800ad8c:	2600      	movs	r6, #0
 800ad8e:	4637      	mov	r7, r6
 800ad90:	e7e1      	b.n	800ad56 <_dtoa_r+0x956>
 800ad92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad98:	4637      	mov	r7, r6
 800ad9a:	e599      	b.n	800a8d0 <_dtoa_r+0x4d0>
 800ad9c:	9b08      	ldr	r3, [sp, #32]
 800ad9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	f000 80fd 	beq.w	800afa2 <_dtoa_r+0xba2>
 800ada8:	2d00      	cmp	r5, #0
 800adaa:	dd05      	ble.n	800adb8 <_dtoa_r+0x9b8>
 800adac:	4639      	mov	r1, r7
 800adae:	462a      	mov	r2, r5
 800adb0:	4620      	mov	r0, r4
 800adb2:	f000 fb3d 	bl	800b430 <__lshift>
 800adb6:	4607      	mov	r7, r0
 800adb8:	9b06      	ldr	r3, [sp, #24]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d05c      	beq.n	800ae78 <_dtoa_r+0xa78>
 800adbe:	6879      	ldr	r1, [r7, #4]
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 f923 	bl	800b00c <_Balloc>
 800adc6:	4605      	mov	r5, r0
 800adc8:	b928      	cbnz	r0, 800add6 <_dtoa_r+0x9d6>
 800adca:	4b80      	ldr	r3, [pc, #512]	; (800afcc <_dtoa_r+0xbcc>)
 800adcc:	4602      	mov	r2, r0
 800adce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800add2:	f7ff bb2e 	b.w	800a432 <_dtoa_r+0x32>
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	3202      	adds	r2, #2
 800adda:	0092      	lsls	r2, r2, #2
 800addc:	f107 010c 	add.w	r1, r7, #12
 800ade0:	300c      	adds	r0, #12
 800ade2:	f000 f905 	bl	800aff0 <memcpy>
 800ade6:	2201      	movs	r2, #1
 800ade8:	4629      	mov	r1, r5
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fb20 	bl	800b430 <__lshift>
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	9301      	str	r3, [sp, #4]
 800adf6:	9b00      	ldr	r3, [sp, #0]
 800adf8:	444b      	add	r3, r9
 800adfa:	9307      	str	r3, [sp, #28]
 800adfc:	9b02      	ldr	r3, [sp, #8]
 800adfe:	f003 0301 	and.w	r3, r3, #1
 800ae02:	46b8      	mov	r8, r7
 800ae04:	9306      	str	r3, [sp, #24]
 800ae06:	4607      	mov	r7, r0
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	4658      	mov	r0, fp
 800ae10:	9302      	str	r3, [sp, #8]
 800ae12:	f7ff fa6a 	bl	800a2ea <quorem>
 800ae16:	4603      	mov	r3, r0
 800ae18:	3330      	adds	r3, #48	; 0x30
 800ae1a:	9004      	str	r0, [sp, #16]
 800ae1c:	4641      	mov	r1, r8
 800ae1e:	4658      	mov	r0, fp
 800ae20:	9308      	str	r3, [sp, #32]
 800ae22:	f000 fb71 	bl	800b508 <__mcmp>
 800ae26:	463a      	mov	r2, r7
 800ae28:	4681      	mov	r9, r0
 800ae2a:	4631      	mov	r1, r6
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	f000 fb87 	bl	800b540 <__mdiff>
 800ae32:	68c2      	ldr	r2, [r0, #12]
 800ae34:	9b08      	ldr	r3, [sp, #32]
 800ae36:	4605      	mov	r5, r0
 800ae38:	bb02      	cbnz	r2, 800ae7c <_dtoa_r+0xa7c>
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	f000 fb63 	bl	800b508 <__mcmp>
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	4602      	mov	r2, r0
 800ae46:	4629      	mov	r1, r5
 800ae48:	4620      	mov	r0, r4
 800ae4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ae4e:	f000 f91d 	bl	800b08c <_Bfree>
 800ae52:	9b05      	ldr	r3, [sp, #20]
 800ae54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae56:	9d01      	ldr	r5, [sp, #4]
 800ae58:	ea43 0102 	orr.w	r1, r3, r2
 800ae5c:	9b06      	ldr	r3, [sp, #24]
 800ae5e:	430b      	orrs	r3, r1
 800ae60:	9b08      	ldr	r3, [sp, #32]
 800ae62:	d10d      	bne.n	800ae80 <_dtoa_r+0xa80>
 800ae64:	2b39      	cmp	r3, #57	; 0x39
 800ae66:	d029      	beq.n	800aebc <_dtoa_r+0xabc>
 800ae68:	f1b9 0f00 	cmp.w	r9, #0
 800ae6c:	dd01      	ble.n	800ae72 <_dtoa_r+0xa72>
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	3331      	adds	r3, #49	; 0x31
 800ae72:	9a02      	ldr	r2, [sp, #8]
 800ae74:	7013      	strb	r3, [r2, #0]
 800ae76:	e774      	b.n	800ad62 <_dtoa_r+0x962>
 800ae78:	4638      	mov	r0, r7
 800ae7a:	e7b9      	b.n	800adf0 <_dtoa_r+0x9f0>
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	e7e2      	b.n	800ae46 <_dtoa_r+0xa46>
 800ae80:	f1b9 0f00 	cmp.w	r9, #0
 800ae84:	db06      	blt.n	800ae94 <_dtoa_r+0xa94>
 800ae86:	9905      	ldr	r1, [sp, #20]
 800ae88:	ea41 0909 	orr.w	r9, r1, r9
 800ae8c:	9906      	ldr	r1, [sp, #24]
 800ae8e:	ea59 0101 	orrs.w	r1, r9, r1
 800ae92:	d120      	bne.n	800aed6 <_dtoa_r+0xad6>
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	ddec      	ble.n	800ae72 <_dtoa_r+0xa72>
 800ae98:	4659      	mov	r1, fp
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	f000 fac6 	bl	800b430 <__lshift>
 800aea4:	4631      	mov	r1, r6
 800aea6:	4683      	mov	fp, r0
 800aea8:	f000 fb2e 	bl	800b508 <__mcmp>
 800aeac:	2800      	cmp	r0, #0
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	dc02      	bgt.n	800aeb8 <_dtoa_r+0xab8>
 800aeb2:	d1de      	bne.n	800ae72 <_dtoa_r+0xa72>
 800aeb4:	07da      	lsls	r2, r3, #31
 800aeb6:	d5dc      	bpl.n	800ae72 <_dtoa_r+0xa72>
 800aeb8:	2b39      	cmp	r3, #57	; 0x39
 800aeba:	d1d8      	bne.n	800ae6e <_dtoa_r+0xa6e>
 800aebc:	9a02      	ldr	r2, [sp, #8]
 800aebe:	2339      	movs	r3, #57	; 0x39
 800aec0:	7013      	strb	r3, [r2, #0]
 800aec2:	462b      	mov	r3, r5
 800aec4:	461d      	mov	r5, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aecc:	2a39      	cmp	r2, #57	; 0x39
 800aece:	d050      	beq.n	800af72 <_dtoa_r+0xb72>
 800aed0:	3201      	adds	r2, #1
 800aed2:	701a      	strb	r2, [r3, #0]
 800aed4:	e745      	b.n	800ad62 <_dtoa_r+0x962>
 800aed6:	2a00      	cmp	r2, #0
 800aed8:	dd03      	ble.n	800aee2 <_dtoa_r+0xae2>
 800aeda:	2b39      	cmp	r3, #57	; 0x39
 800aedc:	d0ee      	beq.n	800aebc <_dtoa_r+0xabc>
 800aede:	3301      	adds	r3, #1
 800aee0:	e7c7      	b.n	800ae72 <_dtoa_r+0xa72>
 800aee2:	9a01      	ldr	r2, [sp, #4]
 800aee4:	9907      	ldr	r1, [sp, #28]
 800aee6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aeea:	428a      	cmp	r2, r1
 800aeec:	d02a      	beq.n	800af44 <_dtoa_r+0xb44>
 800aeee:	4659      	mov	r1, fp
 800aef0:	2300      	movs	r3, #0
 800aef2:	220a      	movs	r2, #10
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 f8eb 	bl	800b0d0 <__multadd>
 800aefa:	45b8      	cmp	r8, r7
 800aefc:	4683      	mov	fp, r0
 800aefe:	f04f 0300 	mov.w	r3, #0
 800af02:	f04f 020a 	mov.w	r2, #10
 800af06:	4641      	mov	r1, r8
 800af08:	4620      	mov	r0, r4
 800af0a:	d107      	bne.n	800af1c <_dtoa_r+0xb1c>
 800af0c:	f000 f8e0 	bl	800b0d0 <__multadd>
 800af10:	4680      	mov	r8, r0
 800af12:	4607      	mov	r7, r0
 800af14:	9b01      	ldr	r3, [sp, #4]
 800af16:	3301      	adds	r3, #1
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	e775      	b.n	800ae08 <_dtoa_r+0xa08>
 800af1c:	f000 f8d8 	bl	800b0d0 <__multadd>
 800af20:	4639      	mov	r1, r7
 800af22:	4680      	mov	r8, r0
 800af24:	2300      	movs	r3, #0
 800af26:	220a      	movs	r2, #10
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 f8d1 	bl	800b0d0 <__multadd>
 800af2e:	4607      	mov	r7, r0
 800af30:	e7f0      	b.n	800af14 <_dtoa_r+0xb14>
 800af32:	f1b9 0f00 	cmp.w	r9, #0
 800af36:	9a00      	ldr	r2, [sp, #0]
 800af38:	bfcc      	ite	gt
 800af3a:	464d      	movgt	r5, r9
 800af3c:	2501      	movle	r5, #1
 800af3e:	4415      	add	r5, r2
 800af40:	f04f 0800 	mov.w	r8, #0
 800af44:	4659      	mov	r1, fp
 800af46:	2201      	movs	r2, #1
 800af48:	4620      	mov	r0, r4
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	f000 fa70 	bl	800b430 <__lshift>
 800af50:	4631      	mov	r1, r6
 800af52:	4683      	mov	fp, r0
 800af54:	f000 fad8 	bl	800b508 <__mcmp>
 800af58:	2800      	cmp	r0, #0
 800af5a:	dcb2      	bgt.n	800aec2 <_dtoa_r+0xac2>
 800af5c:	d102      	bne.n	800af64 <_dtoa_r+0xb64>
 800af5e:	9b01      	ldr	r3, [sp, #4]
 800af60:	07db      	lsls	r3, r3, #31
 800af62:	d4ae      	bmi.n	800aec2 <_dtoa_r+0xac2>
 800af64:	462b      	mov	r3, r5
 800af66:	461d      	mov	r5, r3
 800af68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af6c:	2a30      	cmp	r2, #48	; 0x30
 800af6e:	d0fa      	beq.n	800af66 <_dtoa_r+0xb66>
 800af70:	e6f7      	b.n	800ad62 <_dtoa_r+0x962>
 800af72:	9a00      	ldr	r2, [sp, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d1a5      	bne.n	800aec4 <_dtoa_r+0xac4>
 800af78:	f10a 0a01 	add.w	sl, sl, #1
 800af7c:	2331      	movs	r3, #49	; 0x31
 800af7e:	e779      	b.n	800ae74 <_dtoa_r+0xa74>
 800af80:	4b13      	ldr	r3, [pc, #76]	; (800afd0 <_dtoa_r+0xbd0>)
 800af82:	f7ff baaf 	b.w	800a4e4 <_dtoa_r+0xe4>
 800af86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af88:	2b00      	cmp	r3, #0
 800af8a:	f47f aa86 	bne.w	800a49a <_dtoa_r+0x9a>
 800af8e:	4b11      	ldr	r3, [pc, #68]	; (800afd4 <_dtoa_r+0xbd4>)
 800af90:	f7ff baa8 	b.w	800a4e4 <_dtoa_r+0xe4>
 800af94:	f1b9 0f00 	cmp.w	r9, #0
 800af98:	dc03      	bgt.n	800afa2 <_dtoa_r+0xba2>
 800af9a:	9b05      	ldr	r3, [sp, #20]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	f73f aec9 	bgt.w	800ad34 <_dtoa_r+0x934>
 800afa2:	9d00      	ldr	r5, [sp, #0]
 800afa4:	4631      	mov	r1, r6
 800afa6:	4658      	mov	r0, fp
 800afa8:	f7ff f99f 	bl	800a2ea <quorem>
 800afac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800afb0:	f805 3b01 	strb.w	r3, [r5], #1
 800afb4:	9a00      	ldr	r2, [sp, #0]
 800afb6:	1aaa      	subs	r2, r5, r2
 800afb8:	4591      	cmp	r9, r2
 800afba:	ddba      	ble.n	800af32 <_dtoa_r+0xb32>
 800afbc:	4659      	mov	r1, fp
 800afbe:	2300      	movs	r3, #0
 800afc0:	220a      	movs	r2, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 f884 	bl	800b0d0 <__multadd>
 800afc8:	4683      	mov	fp, r0
 800afca:	e7eb      	b.n	800afa4 <_dtoa_r+0xba4>
 800afcc:	0800c947 	.word	0x0800c947
 800afd0:	0800c8a0 	.word	0x0800c8a0
 800afd4:	0800c8c4 	.word	0x0800c8c4

0800afd8 <_localeconv_r>:
 800afd8:	4800      	ldr	r0, [pc, #0]	; (800afdc <_localeconv_r+0x4>)
 800afda:	4770      	bx	lr
 800afdc:	20000184 	.word	0x20000184

0800afe0 <malloc>:
 800afe0:	4b02      	ldr	r3, [pc, #8]	; (800afec <malloc+0xc>)
 800afe2:	4601      	mov	r1, r0
 800afe4:	6818      	ldr	r0, [r3, #0]
 800afe6:	f000 bbef 	b.w	800b7c8 <_malloc_r>
 800afea:	bf00      	nop
 800afec:	20000030 	.word	0x20000030

0800aff0 <memcpy>:
 800aff0:	440a      	add	r2, r1
 800aff2:	4291      	cmp	r1, r2
 800aff4:	f100 33ff 	add.w	r3, r0, #4294967295
 800aff8:	d100      	bne.n	800affc <memcpy+0xc>
 800affa:	4770      	bx	lr
 800affc:	b510      	push	{r4, lr}
 800affe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b006:	4291      	cmp	r1, r2
 800b008:	d1f9      	bne.n	800affe <memcpy+0xe>
 800b00a:	bd10      	pop	{r4, pc}

0800b00c <_Balloc>:
 800b00c:	b570      	push	{r4, r5, r6, lr}
 800b00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b010:	4604      	mov	r4, r0
 800b012:	460d      	mov	r5, r1
 800b014:	b976      	cbnz	r6, 800b034 <_Balloc+0x28>
 800b016:	2010      	movs	r0, #16
 800b018:	f7ff ffe2 	bl	800afe0 <malloc>
 800b01c:	4602      	mov	r2, r0
 800b01e:	6260      	str	r0, [r4, #36]	; 0x24
 800b020:	b920      	cbnz	r0, 800b02c <_Balloc+0x20>
 800b022:	4b18      	ldr	r3, [pc, #96]	; (800b084 <_Balloc+0x78>)
 800b024:	4818      	ldr	r0, [pc, #96]	; (800b088 <_Balloc+0x7c>)
 800b026:	2166      	movs	r1, #102	; 0x66
 800b028:	f000 fd94 	bl	800bb54 <__assert_func>
 800b02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b030:	6006      	str	r6, [r0, #0]
 800b032:	60c6      	str	r6, [r0, #12]
 800b034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b036:	68f3      	ldr	r3, [r6, #12]
 800b038:	b183      	cbz	r3, 800b05c <_Balloc+0x50>
 800b03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b042:	b9b8      	cbnz	r0, 800b074 <_Balloc+0x68>
 800b044:	2101      	movs	r1, #1
 800b046:	fa01 f605 	lsl.w	r6, r1, r5
 800b04a:	1d72      	adds	r2, r6, #5
 800b04c:	0092      	lsls	r2, r2, #2
 800b04e:	4620      	mov	r0, r4
 800b050:	f000 fb5a 	bl	800b708 <_calloc_r>
 800b054:	b160      	cbz	r0, 800b070 <_Balloc+0x64>
 800b056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b05a:	e00e      	b.n	800b07a <_Balloc+0x6e>
 800b05c:	2221      	movs	r2, #33	; 0x21
 800b05e:	2104      	movs	r1, #4
 800b060:	4620      	mov	r0, r4
 800b062:	f000 fb51 	bl	800b708 <_calloc_r>
 800b066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b068:	60f0      	str	r0, [r6, #12]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d1e4      	bne.n	800b03a <_Balloc+0x2e>
 800b070:	2000      	movs	r0, #0
 800b072:	bd70      	pop	{r4, r5, r6, pc}
 800b074:	6802      	ldr	r2, [r0, #0]
 800b076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b07a:	2300      	movs	r3, #0
 800b07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b080:	e7f7      	b.n	800b072 <_Balloc+0x66>
 800b082:	bf00      	nop
 800b084:	0800c8d1 	.word	0x0800c8d1
 800b088:	0800c958 	.word	0x0800c958

0800b08c <_Bfree>:
 800b08c:	b570      	push	{r4, r5, r6, lr}
 800b08e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b090:	4605      	mov	r5, r0
 800b092:	460c      	mov	r4, r1
 800b094:	b976      	cbnz	r6, 800b0b4 <_Bfree+0x28>
 800b096:	2010      	movs	r0, #16
 800b098:	f7ff ffa2 	bl	800afe0 <malloc>
 800b09c:	4602      	mov	r2, r0
 800b09e:	6268      	str	r0, [r5, #36]	; 0x24
 800b0a0:	b920      	cbnz	r0, 800b0ac <_Bfree+0x20>
 800b0a2:	4b09      	ldr	r3, [pc, #36]	; (800b0c8 <_Bfree+0x3c>)
 800b0a4:	4809      	ldr	r0, [pc, #36]	; (800b0cc <_Bfree+0x40>)
 800b0a6:	218a      	movs	r1, #138	; 0x8a
 800b0a8:	f000 fd54 	bl	800bb54 <__assert_func>
 800b0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0b0:	6006      	str	r6, [r0, #0]
 800b0b2:	60c6      	str	r6, [r0, #12]
 800b0b4:	b13c      	cbz	r4, 800b0c6 <_Bfree+0x3a>
 800b0b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0b8:	6862      	ldr	r2, [r4, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b0c0:	6021      	str	r1, [r4, #0]
 800b0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b0c6:	bd70      	pop	{r4, r5, r6, pc}
 800b0c8:	0800c8d1 	.word	0x0800c8d1
 800b0cc:	0800c958 	.word	0x0800c958

0800b0d0 <__multadd>:
 800b0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d4:	690e      	ldr	r6, [r1, #16]
 800b0d6:	4607      	mov	r7, r0
 800b0d8:	4698      	mov	r8, r3
 800b0da:	460c      	mov	r4, r1
 800b0dc:	f101 0014 	add.w	r0, r1, #20
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	6805      	ldr	r5, [r0, #0]
 800b0e4:	b2a9      	uxth	r1, r5
 800b0e6:	fb02 8101 	mla	r1, r2, r1, r8
 800b0ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b0ee:	0c2d      	lsrs	r5, r5, #16
 800b0f0:	fb02 c505 	mla	r5, r2, r5, ip
 800b0f4:	b289      	uxth	r1, r1
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b0fc:	429e      	cmp	r6, r3
 800b0fe:	f840 1b04 	str.w	r1, [r0], #4
 800b102:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b106:	dcec      	bgt.n	800b0e2 <__multadd+0x12>
 800b108:	f1b8 0f00 	cmp.w	r8, #0
 800b10c:	d022      	beq.n	800b154 <__multadd+0x84>
 800b10e:	68a3      	ldr	r3, [r4, #8]
 800b110:	42b3      	cmp	r3, r6
 800b112:	dc19      	bgt.n	800b148 <__multadd+0x78>
 800b114:	6861      	ldr	r1, [r4, #4]
 800b116:	4638      	mov	r0, r7
 800b118:	3101      	adds	r1, #1
 800b11a:	f7ff ff77 	bl	800b00c <_Balloc>
 800b11e:	4605      	mov	r5, r0
 800b120:	b928      	cbnz	r0, 800b12e <__multadd+0x5e>
 800b122:	4602      	mov	r2, r0
 800b124:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <__multadd+0x8c>)
 800b126:	480e      	ldr	r0, [pc, #56]	; (800b160 <__multadd+0x90>)
 800b128:	21b5      	movs	r1, #181	; 0xb5
 800b12a:	f000 fd13 	bl	800bb54 <__assert_func>
 800b12e:	6922      	ldr	r2, [r4, #16]
 800b130:	3202      	adds	r2, #2
 800b132:	f104 010c 	add.w	r1, r4, #12
 800b136:	0092      	lsls	r2, r2, #2
 800b138:	300c      	adds	r0, #12
 800b13a:	f7ff ff59 	bl	800aff0 <memcpy>
 800b13e:	4621      	mov	r1, r4
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff ffa3 	bl	800b08c <_Bfree>
 800b146:	462c      	mov	r4, r5
 800b148:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b14c:	3601      	adds	r6, #1
 800b14e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b152:	6126      	str	r6, [r4, #16]
 800b154:	4620      	mov	r0, r4
 800b156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b15a:	bf00      	nop
 800b15c:	0800c947 	.word	0x0800c947
 800b160:	0800c958 	.word	0x0800c958

0800b164 <__hi0bits>:
 800b164:	0c03      	lsrs	r3, r0, #16
 800b166:	041b      	lsls	r3, r3, #16
 800b168:	b9d3      	cbnz	r3, 800b1a0 <__hi0bits+0x3c>
 800b16a:	0400      	lsls	r0, r0, #16
 800b16c:	2310      	movs	r3, #16
 800b16e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b172:	bf04      	itt	eq
 800b174:	0200      	lsleq	r0, r0, #8
 800b176:	3308      	addeq	r3, #8
 800b178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b17c:	bf04      	itt	eq
 800b17e:	0100      	lsleq	r0, r0, #4
 800b180:	3304      	addeq	r3, #4
 800b182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b186:	bf04      	itt	eq
 800b188:	0080      	lsleq	r0, r0, #2
 800b18a:	3302      	addeq	r3, #2
 800b18c:	2800      	cmp	r0, #0
 800b18e:	db05      	blt.n	800b19c <__hi0bits+0x38>
 800b190:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b194:	f103 0301 	add.w	r3, r3, #1
 800b198:	bf08      	it	eq
 800b19a:	2320      	moveq	r3, #32
 800b19c:	4618      	mov	r0, r3
 800b19e:	4770      	bx	lr
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	e7e4      	b.n	800b16e <__hi0bits+0xa>

0800b1a4 <__lo0bits>:
 800b1a4:	6803      	ldr	r3, [r0, #0]
 800b1a6:	f013 0207 	ands.w	r2, r3, #7
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	d00b      	beq.n	800b1c6 <__lo0bits+0x22>
 800b1ae:	07da      	lsls	r2, r3, #31
 800b1b0:	d424      	bmi.n	800b1fc <__lo0bits+0x58>
 800b1b2:	0798      	lsls	r0, r3, #30
 800b1b4:	bf49      	itett	mi
 800b1b6:	085b      	lsrmi	r3, r3, #1
 800b1b8:	089b      	lsrpl	r3, r3, #2
 800b1ba:	2001      	movmi	r0, #1
 800b1bc:	600b      	strmi	r3, [r1, #0]
 800b1be:	bf5c      	itt	pl
 800b1c0:	600b      	strpl	r3, [r1, #0]
 800b1c2:	2002      	movpl	r0, #2
 800b1c4:	4770      	bx	lr
 800b1c6:	b298      	uxth	r0, r3
 800b1c8:	b9b0      	cbnz	r0, 800b1f8 <__lo0bits+0x54>
 800b1ca:	0c1b      	lsrs	r3, r3, #16
 800b1cc:	2010      	movs	r0, #16
 800b1ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b1d2:	bf04      	itt	eq
 800b1d4:	0a1b      	lsreq	r3, r3, #8
 800b1d6:	3008      	addeq	r0, #8
 800b1d8:	071a      	lsls	r2, r3, #28
 800b1da:	bf04      	itt	eq
 800b1dc:	091b      	lsreq	r3, r3, #4
 800b1de:	3004      	addeq	r0, #4
 800b1e0:	079a      	lsls	r2, r3, #30
 800b1e2:	bf04      	itt	eq
 800b1e4:	089b      	lsreq	r3, r3, #2
 800b1e6:	3002      	addeq	r0, #2
 800b1e8:	07da      	lsls	r2, r3, #31
 800b1ea:	d403      	bmi.n	800b1f4 <__lo0bits+0x50>
 800b1ec:	085b      	lsrs	r3, r3, #1
 800b1ee:	f100 0001 	add.w	r0, r0, #1
 800b1f2:	d005      	beq.n	800b200 <__lo0bits+0x5c>
 800b1f4:	600b      	str	r3, [r1, #0]
 800b1f6:	4770      	bx	lr
 800b1f8:	4610      	mov	r0, r2
 800b1fa:	e7e8      	b.n	800b1ce <__lo0bits+0x2a>
 800b1fc:	2000      	movs	r0, #0
 800b1fe:	4770      	bx	lr
 800b200:	2020      	movs	r0, #32
 800b202:	4770      	bx	lr

0800b204 <__i2b>:
 800b204:	b510      	push	{r4, lr}
 800b206:	460c      	mov	r4, r1
 800b208:	2101      	movs	r1, #1
 800b20a:	f7ff feff 	bl	800b00c <_Balloc>
 800b20e:	4602      	mov	r2, r0
 800b210:	b928      	cbnz	r0, 800b21e <__i2b+0x1a>
 800b212:	4b05      	ldr	r3, [pc, #20]	; (800b228 <__i2b+0x24>)
 800b214:	4805      	ldr	r0, [pc, #20]	; (800b22c <__i2b+0x28>)
 800b216:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b21a:	f000 fc9b 	bl	800bb54 <__assert_func>
 800b21e:	2301      	movs	r3, #1
 800b220:	6144      	str	r4, [r0, #20]
 800b222:	6103      	str	r3, [r0, #16]
 800b224:	bd10      	pop	{r4, pc}
 800b226:	bf00      	nop
 800b228:	0800c947 	.word	0x0800c947
 800b22c:	0800c958 	.word	0x0800c958

0800b230 <__multiply>:
 800b230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b234:	4614      	mov	r4, r2
 800b236:	690a      	ldr	r2, [r1, #16]
 800b238:	6923      	ldr	r3, [r4, #16]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	bfb8      	it	lt
 800b23e:	460b      	movlt	r3, r1
 800b240:	460d      	mov	r5, r1
 800b242:	bfbc      	itt	lt
 800b244:	4625      	movlt	r5, r4
 800b246:	461c      	movlt	r4, r3
 800b248:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b24c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b250:	68ab      	ldr	r3, [r5, #8]
 800b252:	6869      	ldr	r1, [r5, #4]
 800b254:	eb0a 0709 	add.w	r7, sl, r9
 800b258:	42bb      	cmp	r3, r7
 800b25a:	b085      	sub	sp, #20
 800b25c:	bfb8      	it	lt
 800b25e:	3101      	addlt	r1, #1
 800b260:	f7ff fed4 	bl	800b00c <_Balloc>
 800b264:	b930      	cbnz	r0, 800b274 <__multiply+0x44>
 800b266:	4602      	mov	r2, r0
 800b268:	4b42      	ldr	r3, [pc, #264]	; (800b374 <__multiply+0x144>)
 800b26a:	4843      	ldr	r0, [pc, #268]	; (800b378 <__multiply+0x148>)
 800b26c:	f240 115d 	movw	r1, #349	; 0x15d
 800b270:	f000 fc70 	bl	800bb54 <__assert_func>
 800b274:	f100 0614 	add.w	r6, r0, #20
 800b278:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b27c:	4633      	mov	r3, r6
 800b27e:	2200      	movs	r2, #0
 800b280:	4543      	cmp	r3, r8
 800b282:	d31e      	bcc.n	800b2c2 <__multiply+0x92>
 800b284:	f105 0c14 	add.w	ip, r5, #20
 800b288:	f104 0314 	add.w	r3, r4, #20
 800b28c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b290:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b294:	9202      	str	r2, [sp, #8]
 800b296:	ebac 0205 	sub.w	r2, ip, r5
 800b29a:	3a15      	subs	r2, #21
 800b29c:	f022 0203 	bic.w	r2, r2, #3
 800b2a0:	3204      	adds	r2, #4
 800b2a2:	f105 0115 	add.w	r1, r5, #21
 800b2a6:	458c      	cmp	ip, r1
 800b2a8:	bf38      	it	cc
 800b2aa:	2204      	movcc	r2, #4
 800b2ac:	9201      	str	r2, [sp, #4]
 800b2ae:	9a02      	ldr	r2, [sp, #8]
 800b2b0:	9303      	str	r3, [sp, #12]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d808      	bhi.n	800b2c8 <__multiply+0x98>
 800b2b6:	2f00      	cmp	r7, #0
 800b2b8:	dc55      	bgt.n	800b366 <__multiply+0x136>
 800b2ba:	6107      	str	r7, [r0, #16]
 800b2bc:	b005      	add	sp, #20
 800b2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c2:	f843 2b04 	str.w	r2, [r3], #4
 800b2c6:	e7db      	b.n	800b280 <__multiply+0x50>
 800b2c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b2cc:	f1ba 0f00 	cmp.w	sl, #0
 800b2d0:	d020      	beq.n	800b314 <__multiply+0xe4>
 800b2d2:	f105 0e14 	add.w	lr, r5, #20
 800b2d6:	46b1      	mov	r9, r6
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b2de:	f8d9 b000 	ldr.w	fp, [r9]
 800b2e2:	b2a1      	uxth	r1, r4
 800b2e4:	fa1f fb8b 	uxth.w	fp, fp
 800b2e8:	fb0a b101 	mla	r1, sl, r1, fp
 800b2ec:	4411      	add	r1, r2
 800b2ee:	f8d9 2000 	ldr.w	r2, [r9]
 800b2f2:	0c24      	lsrs	r4, r4, #16
 800b2f4:	0c12      	lsrs	r2, r2, #16
 800b2f6:	fb0a 2404 	mla	r4, sl, r4, r2
 800b2fa:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b2fe:	b289      	uxth	r1, r1
 800b300:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b304:	45f4      	cmp	ip, lr
 800b306:	f849 1b04 	str.w	r1, [r9], #4
 800b30a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b30e:	d8e4      	bhi.n	800b2da <__multiply+0xaa>
 800b310:	9901      	ldr	r1, [sp, #4]
 800b312:	5072      	str	r2, [r6, r1]
 800b314:	9a03      	ldr	r2, [sp, #12]
 800b316:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b31a:	3304      	adds	r3, #4
 800b31c:	f1b9 0f00 	cmp.w	r9, #0
 800b320:	d01f      	beq.n	800b362 <__multiply+0x132>
 800b322:	6834      	ldr	r4, [r6, #0]
 800b324:	f105 0114 	add.w	r1, r5, #20
 800b328:	46b6      	mov	lr, r6
 800b32a:	f04f 0a00 	mov.w	sl, #0
 800b32e:	880a      	ldrh	r2, [r1, #0]
 800b330:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b334:	fb09 b202 	mla	r2, r9, r2, fp
 800b338:	4492      	add	sl, r2
 800b33a:	b2a4      	uxth	r4, r4
 800b33c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b340:	f84e 4b04 	str.w	r4, [lr], #4
 800b344:	f851 4b04 	ldr.w	r4, [r1], #4
 800b348:	f8be 2000 	ldrh.w	r2, [lr]
 800b34c:	0c24      	lsrs	r4, r4, #16
 800b34e:	fb09 2404 	mla	r4, r9, r4, r2
 800b352:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b356:	458c      	cmp	ip, r1
 800b358:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b35c:	d8e7      	bhi.n	800b32e <__multiply+0xfe>
 800b35e:	9a01      	ldr	r2, [sp, #4]
 800b360:	50b4      	str	r4, [r6, r2]
 800b362:	3604      	adds	r6, #4
 800b364:	e7a3      	b.n	800b2ae <__multiply+0x7e>
 800b366:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1a5      	bne.n	800b2ba <__multiply+0x8a>
 800b36e:	3f01      	subs	r7, #1
 800b370:	e7a1      	b.n	800b2b6 <__multiply+0x86>
 800b372:	bf00      	nop
 800b374:	0800c947 	.word	0x0800c947
 800b378:	0800c958 	.word	0x0800c958

0800b37c <__pow5mult>:
 800b37c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b380:	4615      	mov	r5, r2
 800b382:	f012 0203 	ands.w	r2, r2, #3
 800b386:	4606      	mov	r6, r0
 800b388:	460f      	mov	r7, r1
 800b38a:	d007      	beq.n	800b39c <__pow5mult+0x20>
 800b38c:	4c25      	ldr	r4, [pc, #148]	; (800b424 <__pow5mult+0xa8>)
 800b38e:	3a01      	subs	r2, #1
 800b390:	2300      	movs	r3, #0
 800b392:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b396:	f7ff fe9b 	bl	800b0d0 <__multadd>
 800b39a:	4607      	mov	r7, r0
 800b39c:	10ad      	asrs	r5, r5, #2
 800b39e:	d03d      	beq.n	800b41c <__pow5mult+0xa0>
 800b3a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3a2:	b97c      	cbnz	r4, 800b3c4 <__pow5mult+0x48>
 800b3a4:	2010      	movs	r0, #16
 800b3a6:	f7ff fe1b 	bl	800afe0 <malloc>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	6270      	str	r0, [r6, #36]	; 0x24
 800b3ae:	b928      	cbnz	r0, 800b3bc <__pow5mult+0x40>
 800b3b0:	4b1d      	ldr	r3, [pc, #116]	; (800b428 <__pow5mult+0xac>)
 800b3b2:	481e      	ldr	r0, [pc, #120]	; (800b42c <__pow5mult+0xb0>)
 800b3b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b3b8:	f000 fbcc 	bl	800bb54 <__assert_func>
 800b3bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3c0:	6004      	str	r4, [r0, #0]
 800b3c2:	60c4      	str	r4, [r0, #12]
 800b3c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b3c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b3cc:	b94c      	cbnz	r4, 800b3e2 <__pow5mult+0x66>
 800b3ce:	f240 2171 	movw	r1, #625	; 0x271
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7ff ff16 	bl	800b204 <__i2b>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b3de:	4604      	mov	r4, r0
 800b3e0:	6003      	str	r3, [r0, #0]
 800b3e2:	f04f 0900 	mov.w	r9, #0
 800b3e6:	07eb      	lsls	r3, r5, #31
 800b3e8:	d50a      	bpl.n	800b400 <__pow5mult+0x84>
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f7ff ff1e 	bl	800b230 <__multiply>
 800b3f4:	4639      	mov	r1, r7
 800b3f6:	4680      	mov	r8, r0
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7ff fe47 	bl	800b08c <_Bfree>
 800b3fe:	4647      	mov	r7, r8
 800b400:	106d      	asrs	r5, r5, #1
 800b402:	d00b      	beq.n	800b41c <__pow5mult+0xa0>
 800b404:	6820      	ldr	r0, [r4, #0]
 800b406:	b938      	cbnz	r0, 800b418 <__pow5mult+0x9c>
 800b408:	4622      	mov	r2, r4
 800b40a:	4621      	mov	r1, r4
 800b40c:	4630      	mov	r0, r6
 800b40e:	f7ff ff0f 	bl	800b230 <__multiply>
 800b412:	6020      	str	r0, [r4, #0]
 800b414:	f8c0 9000 	str.w	r9, [r0]
 800b418:	4604      	mov	r4, r0
 800b41a:	e7e4      	b.n	800b3e6 <__pow5mult+0x6a>
 800b41c:	4638      	mov	r0, r7
 800b41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b422:	bf00      	nop
 800b424:	0800caa8 	.word	0x0800caa8
 800b428:	0800c8d1 	.word	0x0800c8d1
 800b42c:	0800c958 	.word	0x0800c958

0800b430 <__lshift>:
 800b430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b434:	460c      	mov	r4, r1
 800b436:	6849      	ldr	r1, [r1, #4]
 800b438:	6923      	ldr	r3, [r4, #16]
 800b43a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b43e:	68a3      	ldr	r3, [r4, #8]
 800b440:	4607      	mov	r7, r0
 800b442:	4691      	mov	r9, r2
 800b444:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b448:	f108 0601 	add.w	r6, r8, #1
 800b44c:	42b3      	cmp	r3, r6
 800b44e:	db0b      	blt.n	800b468 <__lshift+0x38>
 800b450:	4638      	mov	r0, r7
 800b452:	f7ff fddb 	bl	800b00c <_Balloc>
 800b456:	4605      	mov	r5, r0
 800b458:	b948      	cbnz	r0, 800b46e <__lshift+0x3e>
 800b45a:	4602      	mov	r2, r0
 800b45c:	4b28      	ldr	r3, [pc, #160]	; (800b500 <__lshift+0xd0>)
 800b45e:	4829      	ldr	r0, [pc, #164]	; (800b504 <__lshift+0xd4>)
 800b460:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b464:	f000 fb76 	bl	800bb54 <__assert_func>
 800b468:	3101      	adds	r1, #1
 800b46a:	005b      	lsls	r3, r3, #1
 800b46c:	e7ee      	b.n	800b44c <__lshift+0x1c>
 800b46e:	2300      	movs	r3, #0
 800b470:	f100 0114 	add.w	r1, r0, #20
 800b474:	f100 0210 	add.w	r2, r0, #16
 800b478:	4618      	mov	r0, r3
 800b47a:	4553      	cmp	r3, sl
 800b47c:	db33      	blt.n	800b4e6 <__lshift+0xb6>
 800b47e:	6920      	ldr	r0, [r4, #16]
 800b480:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b484:	f104 0314 	add.w	r3, r4, #20
 800b488:	f019 091f 	ands.w	r9, r9, #31
 800b48c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b490:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b494:	d02b      	beq.n	800b4ee <__lshift+0xbe>
 800b496:	f1c9 0e20 	rsb	lr, r9, #32
 800b49a:	468a      	mov	sl, r1
 800b49c:	2200      	movs	r2, #0
 800b49e:	6818      	ldr	r0, [r3, #0]
 800b4a0:	fa00 f009 	lsl.w	r0, r0, r9
 800b4a4:	4302      	orrs	r2, r0
 800b4a6:	f84a 2b04 	str.w	r2, [sl], #4
 800b4aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ae:	459c      	cmp	ip, r3
 800b4b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4b4:	d8f3      	bhi.n	800b49e <__lshift+0x6e>
 800b4b6:	ebac 0304 	sub.w	r3, ip, r4
 800b4ba:	3b15      	subs	r3, #21
 800b4bc:	f023 0303 	bic.w	r3, r3, #3
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	f104 0015 	add.w	r0, r4, #21
 800b4c6:	4584      	cmp	ip, r0
 800b4c8:	bf38      	it	cc
 800b4ca:	2304      	movcc	r3, #4
 800b4cc:	50ca      	str	r2, [r1, r3]
 800b4ce:	b10a      	cbz	r2, 800b4d4 <__lshift+0xa4>
 800b4d0:	f108 0602 	add.w	r6, r8, #2
 800b4d4:	3e01      	subs	r6, #1
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	612e      	str	r6, [r5, #16]
 800b4da:	4621      	mov	r1, r4
 800b4dc:	f7ff fdd6 	bl	800b08c <_Bfree>
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	e7c5      	b.n	800b47a <__lshift+0x4a>
 800b4ee:	3904      	subs	r1, #4
 800b4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4f8:	459c      	cmp	ip, r3
 800b4fa:	d8f9      	bhi.n	800b4f0 <__lshift+0xc0>
 800b4fc:	e7ea      	b.n	800b4d4 <__lshift+0xa4>
 800b4fe:	bf00      	nop
 800b500:	0800c947 	.word	0x0800c947
 800b504:	0800c958 	.word	0x0800c958

0800b508 <__mcmp>:
 800b508:	b530      	push	{r4, r5, lr}
 800b50a:	6902      	ldr	r2, [r0, #16]
 800b50c:	690c      	ldr	r4, [r1, #16]
 800b50e:	1b12      	subs	r2, r2, r4
 800b510:	d10e      	bne.n	800b530 <__mcmp+0x28>
 800b512:	f100 0314 	add.w	r3, r0, #20
 800b516:	3114      	adds	r1, #20
 800b518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b528:	42a5      	cmp	r5, r4
 800b52a:	d003      	beq.n	800b534 <__mcmp+0x2c>
 800b52c:	d305      	bcc.n	800b53a <__mcmp+0x32>
 800b52e:	2201      	movs	r2, #1
 800b530:	4610      	mov	r0, r2
 800b532:	bd30      	pop	{r4, r5, pc}
 800b534:	4283      	cmp	r3, r0
 800b536:	d3f3      	bcc.n	800b520 <__mcmp+0x18>
 800b538:	e7fa      	b.n	800b530 <__mcmp+0x28>
 800b53a:	f04f 32ff 	mov.w	r2, #4294967295
 800b53e:	e7f7      	b.n	800b530 <__mcmp+0x28>

0800b540 <__mdiff>:
 800b540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b544:	460c      	mov	r4, r1
 800b546:	4606      	mov	r6, r0
 800b548:	4611      	mov	r1, r2
 800b54a:	4620      	mov	r0, r4
 800b54c:	4617      	mov	r7, r2
 800b54e:	f7ff ffdb 	bl	800b508 <__mcmp>
 800b552:	1e05      	subs	r5, r0, #0
 800b554:	d110      	bne.n	800b578 <__mdiff+0x38>
 800b556:	4629      	mov	r1, r5
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff fd57 	bl	800b00c <_Balloc>
 800b55e:	b930      	cbnz	r0, 800b56e <__mdiff+0x2e>
 800b560:	4b39      	ldr	r3, [pc, #228]	; (800b648 <__mdiff+0x108>)
 800b562:	4602      	mov	r2, r0
 800b564:	f240 2132 	movw	r1, #562	; 0x232
 800b568:	4838      	ldr	r0, [pc, #224]	; (800b64c <__mdiff+0x10c>)
 800b56a:	f000 faf3 	bl	800bb54 <__assert_func>
 800b56e:	2301      	movs	r3, #1
 800b570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b578:	bfa4      	itt	ge
 800b57a:	463b      	movge	r3, r7
 800b57c:	4627      	movge	r7, r4
 800b57e:	4630      	mov	r0, r6
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	bfa6      	itte	ge
 800b584:	461c      	movge	r4, r3
 800b586:	2500      	movge	r5, #0
 800b588:	2501      	movlt	r5, #1
 800b58a:	f7ff fd3f 	bl	800b00c <_Balloc>
 800b58e:	b920      	cbnz	r0, 800b59a <__mdiff+0x5a>
 800b590:	4b2d      	ldr	r3, [pc, #180]	; (800b648 <__mdiff+0x108>)
 800b592:	4602      	mov	r2, r0
 800b594:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b598:	e7e6      	b.n	800b568 <__mdiff+0x28>
 800b59a:	693e      	ldr	r6, [r7, #16]
 800b59c:	60c5      	str	r5, [r0, #12]
 800b59e:	6925      	ldr	r5, [r4, #16]
 800b5a0:	f107 0114 	add.w	r1, r7, #20
 800b5a4:	f104 0914 	add.w	r9, r4, #20
 800b5a8:	f100 0e14 	add.w	lr, r0, #20
 800b5ac:	f107 0210 	add.w	r2, r7, #16
 800b5b0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b5b4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b5b8:	46f2      	mov	sl, lr
 800b5ba:	2700      	movs	r7, #0
 800b5bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b5c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b5c4:	fa1f f883 	uxth.w	r8, r3
 800b5c8:	fa17 f78b 	uxtah	r7, r7, fp
 800b5cc:	0c1b      	lsrs	r3, r3, #16
 800b5ce:	eba7 0808 	sub.w	r8, r7, r8
 800b5d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b5d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b5da:	fa1f f888 	uxth.w	r8, r8
 800b5de:	141f      	asrs	r7, r3, #16
 800b5e0:	454d      	cmp	r5, r9
 800b5e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b5e6:	f84a 3b04 	str.w	r3, [sl], #4
 800b5ea:	d8e7      	bhi.n	800b5bc <__mdiff+0x7c>
 800b5ec:	1b2b      	subs	r3, r5, r4
 800b5ee:	3b15      	subs	r3, #21
 800b5f0:	f023 0303 	bic.w	r3, r3, #3
 800b5f4:	3304      	adds	r3, #4
 800b5f6:	3415      	adds	r4, #21
 800b5f8:	42a5      	cmp	r5, r4
 800b5fa:	bf38      	it	cc
 800b5fc:	2304      	movcc	r3, #4
 800b5fe:	4419      	add	r1, r3
 800b600:	4473      	add	r3, lr
 800b602:	469e      	mov	lr, r3
 800b604:	460d      	mov	r5, r1
 800b606:	4565      	cmp	r5, ip
 800b608:	d30e      	bcc.n	800b628 <__mdiff+0xe8>
 800b60a:	f10c 0203 	add.w	r2, ip, #3
 800b60e:	1a52      	subs	r2, r2, r1
 800b610:	f022 0203 	bic.w	r2, r2, #3
 800b614:	3903      	subs	r1, #3
 800b616:	458c      	cmp	ip, r1
 800b618:	bf38      	it	cc
 800b61a:	2200      	movcc	r2, #0
 800b61c:	441a      	add	r2, r3
 800b61e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b622:	b17b      	cbz	r3, 800b644 <__mdiff+0x104>
 800b624:	6106      	str	r6, [r0, #16]
 800b626:	e7a5      	b.n	800b574 <__mdiff+0x34>
 800b628:	f855 8b04 	ldr.w	r8, [r5], #4
 800b62c:	fa17 f488 	uxtah	r4, r7, r8
 800b630:	1422      	asrs	r2, r4, #16
 800b632:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b636:	b2a4      	uxth	r4, r4
 800b638:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b63c:	f84e 4b04 	str.w	r4, [lr], #4
 800b640:	1417      	asrs	r7, r2, #16
 800b642:	e7e0      	b.n	800b606 <__mdiff+0xc6>
 800b644:	3e01      	subs	r6, #1
 800b646:	e7ea      	b.n	800b61e <__mdiff+0xde>
 800b648:	0800c947 	.word	0x0800c947
 800b64c:	0800c958 	.word	0x0800c958

0800b650 <__d2b>:
 800b650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b654:	4689      	mov	r9, r1
 800b656:	2101      	movs	r1, #1
 800b658:	ec57 6b10 	vmov	r6, r7, d0
 800b65c:	4690      	mov	r8, r2
 800b65e:	f7ff fcd5 	bl	800b00c <_Balloc>
 800b662:	4604      	mov	r4, r0
 800b664:	b930      	cbnz	r0, 800b674 <__d2b+0x24>
 800b666:	4602      	mov	r2, r0
 800b668:	4b25      	ldr	r3, [pc, #148]	; (800b700 <__d2b+0xb0>)
 800b66a:	4826      	ldr	r0, [pc, #152]	; (800b704 <__d2b+0xb4>)
 800b66c:	f240 310a 	movw	r1, #778	; 0x30a
 800b670:	f000 fa70 	bl	800bb54 <__assert_func>
 800b674:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b67c:	bb35      	cbnz	r5, 800b6cc <__d2b+0x7c>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	d028      	beq.n	800b6d6 <__d2b+0x86>
 800b684:	4668      	mov	r0, sp
 800b686:	9600      	str	r6, [sp, #0]
 800b688:	f7ff fd8c 	bl	800b1a4 <__lo0bits>
 800b68c:	9900      	ldr	r1, [sp, #0]
 800b68e:	b300      	cbz	r0, 800b6d2 <__d2b+0x82>
 800b690:	9a01      	ldr	r2, [sp, #4]
 800b692:	f1c0 0320 	rsb	r3, r0, #32
 800b696:	fa02 f303 	lsl.w	r3, r2, r3
 800b69a:	430b      	orrs	r3, r1
 800b69c:	40c2      	lsrs	r2, r0
 800b69e:	6163      	str	r3, [r4, #20]
 800b6a0:	9201      	str	r2, [sp, #4]
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	61a3      	str	r3, [r4, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	bf14      	ite	ne
 800b6aa:	2202      	movne	r2, #2
 800b6ac:	2201      	moveq	r2, #1
 800b6ae:	6122      	str	r2, [r4, #16]
 800b6b0:	b1d5      	cbz	r5, 800b6e8 <__d2b+0x98>
 800b6b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6b6:	4405      	add	r5, r0
 800b6b8:	f8c9 5000 	str.w	r5, [r9]
 800b6bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6c0:	f8c8 0000 	str.w	r0, [r8]
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	b003      	add	sp, #12
 800b6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6d0:	e7d5      	b.n	800b67e <__d2b+0x2e>
 800b6d2:	6161      	str	r1, [r4, #20]
 800b6d4:	e7e5      	b.n	800b6a2 <__d2b+0x52>
 800b6d6:	a801      	add	r0, sp, #4
 800b6d8:	f7ff fd64 	bl	800b1a4 <__lo0bits>
 800b6dc:	9b01      	ldr	r3, [sp, #4]
 800b6de:	6163      	str	r3, [r4, #20]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	6122      	str	r2, [r4, #16]
 800b6e4:	3020      	adds	r0, #32
 800b6e6:	e7e3      	b.n	800b6b0 <__d2b+0x60>
 800b6e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6f0:	f8c9 0000 	str.w	r0, [r9]
 800b6f4:	6918      	ldr	r0, [r3, #16]
 800b6f6:	f7ff fd35 	bl	800b164 <__hi0bits>
 800b6fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b6fe:	e7df      	b.n	800b6c0 <__d2b+0x70>
 800b700:	0800c947 	.word	0x0800c947
 800b704:	0800c958 	.word	0x0800c958

0800b708 <_calloc_r>:
 800b708:	b513      	push	{r0, r1, r4, lr}
 800b70a:	434a      	muls	r2, r1
 800b70c:	4611      	mov	r1, r2
 800b70e:	9201      	str	r2, [sp, #4]
 800b710:	f000 f85a 	bl	800b7c8 <_malloc_r>
 800b714:	4604      	mov	r4, r0
 800b716:	b118      	cbz	r0, 800b720 <_calloc_r+0x18>
 800b718:	9a01      	ldr	r2, [sp, #4]
 800b71a:	2100      	movs	r1, #0
 800b71c:	f7fe f944 	bl	80099a8 <memset>
 800b720:	4620      	mov	r0, r4
 800b722:	b002      	add	sp, #8
 800b724:	bd10      	pop	{r4, pc}
	...

0800b728 <_free_r>:
 800b728:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b72a:	2900      	cmp	r1, #0
 800b72c:	d048      	beq.n	800b7c0 <_free_r+0x98>
 800b72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b732:	9001      	str	r0, [sp, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	f1a1 0404 	sub.w	r4, r1, #4
 800b73a:	bfb8      	it	lt
 800b73c:	18e4      	addlt	r4, r4, r3
 800b73e:	f000 fa65 	bl	800bc0c <__malloc_lock>
 800b742:	4a20      	ldr	r2, [pc, #128]	; (800b7c4 <_free_r+0x9c>)
 800b744:	9801      	ldr	r0, [sp, #4]
 800b746:	6813      	ldr	r3, [r2, #0]
 800b748:	4615      	mov	r5, r2
 800b74a:	b933      	cbnz	r3, 800b75a <_free_r+0x32>
 800b74c:	6063      	str	r3, [r4, #4]
 800b74e:	6014      	str	r4, [r2, #0]
 800b750:	b003      	add	sp, #12
 800b752:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b756:	f000 ba5f 	b.w	800bc18 <__malloc_unlock>
 800b75a:	42a3      	cmp	r3, r4
 800b75c:	d90b      	bls.n	800b776 <_free_r+0x4e>
 800b75e:	6821      	ldr	r1, [r4, #0]
 800b760:	1862      	adds	r2, r4, r1
 800b762:	4293      	cmp	r3, r2
 800b764:	bf04      	itt	eq
 800b766:	681a      	ldreq	r2, [r3, #0]
 800b768:	685b      	ldreq	r3, [r3, #4]
 800b76a:	6063      	str	r3, [r4, #4]
 800b76c:	bf04      	itt	eq
 800b76e:	1852      	addeq	r2, r2, r1
 800b770:	6022      	streq	r2, [r4, #0]
 800b772:	602c      	str	r4, [r5, #0]
 800b774:	e7ec      	b.n	800b750 <_free_r+0x28>
 800b776:	461a      	mov	r2, r3
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	b10b      	cbz	r3, 800b780 <_free_r+0x58>
 800b77c:	42a3      	cmp	r3, r4
 800b77e:	d9fa      	bls.n	800b776 <_free_r+0x4e>
 800b780:	6811      	ldr	r1, [r2, #0]
 800b782:	1855      	adds	r5, r2, r1
 800b784:	42a5      	cmp	r5, r4
 800b786:	d10b      	bne.n	800b7a0 <_free_r+0x78>
 800b788:	6824      	ldr	r4, [r4, #0]
 800b78a:	4421      	add	r1, r4
 800b78c:	1854      	adds	r4, r2, r1
 800b78e:	42a3      	cmp	r3, r4
 800b790:	6011      	str	r1, [r2, #0]
 800b792:	d1dd      	bne.n	800b750 <_free_r+0x28>
 800b794:	681c      	ldr	r4, [r3, #0]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	6053      	str	r3, [r2, #4]
 800b79a:	4421      	add	r1, r4
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	e7d7      	b.n	800b750 <_free_r+0x28>
 800b7a0:	d902      	bls.n	800b7a8 <_free_r+0x80>
 800b7a2:	230c      	movs	r3, #12
 800b7a4:	6003      	str	r3, [r0, #0]
 800b7a6:	e7d3      	b.n	800b750 <_free_r+0x28>
 800b7a8:	6825      	ldr	r5, [r4, #0]
 800b7aa:	1961      	adds	r1, r4, r5
 800b7ac:	428b      	cmp	r3, r1
 800b7ae:	bf04      	itt	eq
 800b7b0:	6819      	ldreq	r1, [r3, #0]
 800b7b2:	685b      	ldreq	r3, [r3, #4]
 800b7b4:	6063      	str	r3, [r4, #4]
 800b7b6:	bf04      	itt	eq
 800b7b8:	1949      	addeq	r1, r1, r5
 800b7ba:	6021      	streq	r1, [r4, #0]
 800b7bc:	6054      	str	r4, [r2, #4]
 800b7be:	e7c7      	b.n	800b750 <_free_r+0x28>
 800b7c0:	b003      	add	sp, #12
 800b7c2:	bd30      	pop	{r4, r5, pc}
 800b7c4:	200002e4 	.word	0x200002e4

0800b7c8 <_malloc_r>:
 800b7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ca:	1ccd      	adds	r5, r1, #3
 800b7cc:	f025 0503 	bic.w	r5, r5, #3
 800b7d0:	3508      	adds	r5, #8
 800b7d2:	2d0c      	cmp	r5, #12
 800b7d4:	bf38      	it	cc
 800b7d6:	250c      	movcc	r5, #12
 800b7d8:	2d00      	cmp	r5, #0
 800b7da:	4606      	mov	r6, r0
 800b7dc:	db01      	blt.n	800b7e2 <_malloc_r+0x1a>
 800b7de:	42a9      	cmp	r1, r5
 800b7e0:	d903      	bls.n	800b7ea <_malloc_r+0x22>
 800b7e2:	230c      	movs	r3, #12
 800b7e4:	6033      	str	r3, [r6, #0]
 800b7e6:	2000      	movs	r0, #0
 800b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7ea:	f000 fa0f 	bl	800bc0c <__malloc_lock>
 800b7ee:	4921      	ldr	r1, [pc, #132]	; (800b874 <_malloc_r+0xac>)
 800b7f0:	680a      	ldr	r2, [r1, #0]
 800b7f2:	4614      	mov	r4, r2
 800b7f4:	b99c      	cbnz	r4, 800b81e <_malloc_r+0x56>
 800b7f6:	4f20      	ldr	r7, [pc, #128]	; (800b878 <_malloc_r+0xb0>)
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	b923      	cbnz	r3, 800b806 <_malloc_r+0x3e>
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4630      	mov	r0, r6
 800b800:	f000 f998 	bl	800bb34 <_sbrk_r>
 800b804:	6038      	str	r0, [r7, #0]
 800b806:	4629      	mov	r1, r5
 800b808:	4630      	mov	r0, r6
 800b80a:	f000 f993 	bl	800bb34 <_sbrk_r>
 800b80e:	1c43      	adds	r3, r0, #1
 800b810:	d123      	bne.n	800b85a <_malloc_r+0x92>
 800b812:	230c      	movs	r3, #12
 800b814:	6033      	str	r3, [r6, #0]
 800b816:	4630      	mov	r0, r6
 800b818:	f000 f9fe 	bl	800bc18 <__malloc_unlock>
 800b81c:	e7e3      	b.n	800b7e6 <_malloc_r+0x1e>
 800b81e:	6823      	ldr	r3, [r4, #0]
 800b820:	1b5b      	subs	r3, r3, r5
 800b822:	d417      	bmi.n	800b854 <_malloc_r+0x8c>
 800b824:	2b0b      	cmp	r3, #11
 800b826:	d903      	bls.n	800b830 <_malloc_r+0x68>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	441c      	add	r4, r3
 800b82c:	6025      	str	r5, [r4, #0]
 800b82e:	e004      	b.n	800b83a <_malloc_r+0x72>
 800b830:	6863      	ldr	r3, [r4, #4]
 800b832:	42a2      	cmp	r2, r4
 800b834:	bf0c      	ite	eq
 800b836:	600b      	streq	r3, [r1, #0]
 800b838:	6053      	strne	r3, [r2, #4]
 800b83a:	4630      	mov	r0, r6
 800b83c:	f000 f9ec 	bl	800bc18 <__malloc_unlock>
 800b840:	f104 000b 	add.w	r0, r4, #11
 800b844:	1d23      	adds	r3, r4, #4
 800b846:	f020 0007 	bic.w	r0, r0, #7
 800b84a:	1ac2      	subs	r2, r0, r3
 800b84c:	d0cc      	beq.n	800b7e8 <_malloc_r+0x20>
 800b84e:	1a1b      	subs	r3, r3, r0
 800b850:	50a3      	str	r3, [r4, r2]
 800b852:	e7c9      	b.n	800b7e8 <_malloc_r+0x20>
 800b854:	4622      	mov	r2, r4
 800b856:	6864      	ldr	r4, [r4, #4]
 800b858:	e7cc      	b.n	800b7f4 <_malloc_r+0x2c>
 800b85a:	1cc4      	adds	r4, r0, #3
 800b85c:	f024 0403 	bic.w	r4, r4, #3
 800b860:	42a0      	cmp	r0, r4
 800b862:	d0e3      	beq.n	800b82c <_malloc_r+0x64>
 800b864:	1a21      	subs	r1, r4, r0
 800b866:	4630      	mov	r0, r6
 800b868:	f000 f964 	bl	800bb34 <_sbrk_r>
 800b86c:	3001      	adds	r0, #1
 800b86e:	d1dd      	bne.n	800b82c <_malloc_r+0x64>
 800b870:	e7cf      	b.n	800b812 <_malloc_r+0x4a>
 800b872:	bf00      	nop
 800b874:	200002e4 	.word	0x200002e4
 800b878:	200002e8 	.word	0x200002e8

0800b87c <__ssputs_r>:
 800b87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b880:	688e      	ldr	r6, [r1, #8]
 800b882:	429e      	cmp	r6, r3
 800b884:	4682      	mov	sl, r0
 800b886:	460c      	mov	r4, r1
 800b888:	4690      	mov	r8, r2
 800b88a:	461f      	mov	r7, r3
 800b88c:	d838      	bhi.n	800b900 <__ssputs_r+0x84>
 800b88e:	898a      	ldrh	r2, [r1, #12]
 800b890:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b894:	d032      	beq.n	800b8fc <__ssputs_r+0x80>
 800b896:	6825      	ldr	r5, [r4, #0]
 800b898:	6909      	ldr	r1, [r1, #16]
 800b89a:	eba5 0901 	sub.w	r9, r5, r1
 800b89e:	6965      	ldr	r5, [r4, #20]
 800b8a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	444b      	add	r3, r9
 800b8ac:	106d      	asrs	r5, r5, #1
 800b8ae:	429d      	cmp	r5, r3
 800b8b0:	bf38      	it	cc
 800b8b2:	461d      	movcc	r5, r3
 800b8b4:	0553      	lsls	r3, r2, #21
 800b8b6:	d531      	bpl.n	800b91c <__ssputs_r+0xa0>
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	f7ff ff85 	bl	800b7c8 <_malloc_r>
 800b8be:	4606      	mov	r6, r0
 800b8c0:	b950      	cbnz	r0, 800b8d8 <__ssputs_r+0x5c>
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	f8ca 3000 	str.w	r3, [sl]
 800b8c8:	89a3      	ldrh	r3, [r4, #12]
 800b8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ce:	81a3      	strh	r3, [r4, #12]
 800b8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8d8:	6921      	ldr	r1, [r4, #16]
 800b8da:	464a      	mov	r2, r9
 800b8dc:	f7ff fb88 	bl	800aff0 <memcpy>
 800b8e0:	89a3      	ldrh	r3, [r4, #12]
 800b8e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ea:	81a3      	strh	r3, [r4, #12]
 800b8ec:	6126      	str	r6, [r4, #16]
 800b8ee:	6165      	str	r5, [r4, #20]
 800b8f0:	444e      	add	r6, r9
 800b8f2:	eba5 0509 	sub.w	r5, r5, r9
 800b8f6:	6026      	str	r6, [r4, #0]
 800b8f8:	60a5      	str	r5, [r4, #8]
 800b8fa:	463e      	mov	r6, r7
 800b8fc:	42be      	cmp	r6, r7
 800b8fe:	d900      	bls.n	800b902 <__ssputs_r+0x86>
 800b900:	463e      	mov	r6, r7
 800b902:	4632      	mov	r2, r6
 800b904:	6820      	ldr	r0, [r4, #0]
 800b906:	4641      	mov	r1, r8
 800b908:	f000 f966 	bl	800bbd8 <memmove>
 800b90c:	68a3      	ldr	r3, [r4, #8]
 800b90e:	6822      	ldr	r2, [r4, #0]
 800b910:	1b9b      	subs	r3, r3, r6
 800b912:	4432      	add	r2, r6
 800b914:	60a3      	str	r3, [r4, #8]
 800b916:	6022      	str	r2, [r4, #0]
 800b918:	2000      	movs	r0, #0
 800b91a:	e7db      	b.n	800b8d4 <__ssputs_r+0x58>
 800b91c:	462a      	mov	r2, r5
 800b91e:	f000 f981 	bl	800bc24 <_realloc_r>
 800b922:	4606      	mov	r6, r0
 800b924:	2800      	cmp	r0, #0
 800b926:	d1e1      	bne.n	800b8ec <__ssputs_r+0x70>
 800b928:	6921      	ldr	r1, [r4, #16]
 800b92a:	4650      	mov	r0, sl
 800b92c:	f7ff fefc 	bl	800b728 <_free_r>
 800b930:	e7c7      	b.n	800b8c2 <__ssputs_r+0x46>
	...

0800b934 <_svfiprintf_r>:
 800b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	4698      	mov	r8, r3
 800b93a:	898b      	ldrh	r3, [r1, #12]
 800b93c:	061b      	lsls	r3, r3, #24
 800b93e:	b09d      	sub	sp, #116	; 0x74
 800b940:	4607      	mov	r7, r0
 800b942:	460d      	mov	r5, r1
 800b944:	4614      	mov	r4, r2
 800b946:	d50e      	bpl.n	800b966 <_svfiprintf_r+0x32>
 800b948:	690b      	ldr	r3, [r1, #16]
 800b94a:	b963      	cbnz	r3, 800b966 <_svfiprintf_r+0x32>
 800b94c:	2140      	movs	r1, #64	; 0x40
 800b94e:	f7ff ff3b 	bl	800b7c8 <_malloc_r>
 800b952:	6028      	str	r0, [r5, #0]
 800b954:	6128      	str	r0, [r5, #16]
 800b956:	b920      	cbnz	r0, 800b962 <_svfiprintf_r+0x2e>
 800b958:	230c      	movs	r3, #12
 800b95a:	603b      	str	r3, [r7, #0]
 800b95c:	f04f 30ff 	mov.w	r0, #4294967295
 800b960:	e0d1      	b.n	800bb06 <_svfiprintf_r+0x1d2>
 800b962:	2340      	movs	r3, #64	; 0x40
 800b964:	616b      	str	r3, [r5, #20]
 800b966:	2300      	movs	r3, #0
 800b968:	9309      	str	r3, [sp, #36]	; 0x24
 800b96a:	2320      	movs	r3, #32
 800b96c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b970:	f8cd 800c 	str.w	r8, [sp, #12]
 800b974:	2330      	movs	r3, #48	; 0x30
 800b976:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb20 <_svfiprintf_r+0x1ec>
 800b97a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b97e:	f04f 0901 	mov.w	r9, #1
 800b982:	4623      	mov	r3, r4
 800b984:	469a      	mov	sl, r3
 800b986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b98a:	b10a      	cbz	r2, 800b990 <_svfiprintf_r+0x5c>
 800b98c:	2a25      	cmp	r2, #37	; 0x25
 800b98e:	d1f9      	bne.n	800b984 <_svfiprintf_r+0x50>
 800b990:	ebba 0b04 	subs.w	fp, sl, r4
 800b994:	d00b      	beq.n	800b9ae <_svfiprintf_r+0x7a>
 800b996:	465b      	mov	r3, fp
 800b998:	4622      	mov	r2, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7ff ff6d 	bl	800b87c <__ssputs_r>
 800b9a2:	3001      	adds	r0, #1
 800b9a4:	f000 80aa 	beq.w	800bafc <_svfiprintf_r+0x1c8>
 800b9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9aa:	445a      	add	r2, fp
 800b9ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 80a2 	beq.w	800bafc <_svfiprintf_r+0x1c8>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b9be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c2:	f10a 0a01 	add.w	sl, sl, #1
 800b9c6:	9304      	str	r3, [sp, #16]
 800b9c8:	9307      	str	r3, [sp, #28]
 800b9ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b9d0:	4654      	mov	r4, sl
 800b9d2:	2205      	movs	r2, #5
 800b9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d8:	4851      	ldr	r0, [pc, #324]	; (800bb20 <_svfiprintf_r+0x1ec>)
 800b9da:	f7f4 fc21 	bl	8000220 <memchr>
 800b9de:	9a04      	ldr	r2, [sp, #16]
 800b9e0:	b9d8      	cbnz	r0, 800ba1a <_svfiprintf_r+0xe6>
 800b9e2:	06d0      	lsls	r0, r2, #27
 800b9e4:	bf44      	itt	mi
 800b9e6:	2320      	movmi	r3, #32
 800b9e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ec:	0711      	lsls	r1, r2, #28
 800b9ee:	bf44      	itt	mi
 800b9f0:	232b      	movmi	r3, #43	; 0x2b
 800b9f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b9fc:	d015      	beq.n	800ba2a <_svfiprintf_r+0xf6>
 800b9fe:	9a07      	ldr	r2, [sp, #28]
 800ba00:	4654      	mov	r4, sl
 800ba02:	2000      	movs	r0, #0
 800ba04:	f04f 0c0a 	mov.w	ip, #10
 800ba08:	4621      	mov	r1, r4
 800ba0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba0e:	3b30      	subs	r3, #48	; 0x30
 800ba10:	2b09      	cmp	r3, #9
 800ba12:	d94e      	bls.n	800bab2 <_svfiprintf_r+0x17e>
 800ba14:	b1b0      	cbz	r0, 800ba44 <_svfiprintf_r+0x110>
 800ba16:	9207      	str	r2, [sp, #28]
 800ba18:	e014      	b.n	800ba44 <_svfiprintf_r+0x110>
 800ba1a:	eba0 0308 	sub.w	r3, r0, r8
 800ba1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba22:	4313      	orrs	r3, r2
 800ba24:	9304      	str	r3, [sp, #16]
 800ba26:	46a2      	mov	sl, r4
 800ba28:	e7d2      	b.n	800b9d0 <_svfiprintf_r+0x9c>
 800ba2a:	9b03      	ldr	r3, [sp, #12]
 800ba2c:	1d19      	adds	r1, r3, #4
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	9103      	str	r1, [sp, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	bfbb      	ittet	lt
 800ba36:	425b      	neglt	r3, r3
 800ba38:	f042 0202 	orrlt.w	r2, r2, #2
 800ba3c:	9307      	strge	r3, [sp, #28]
 800ba3e:	9307      	strlt	r3, [sp, #28]
 800ba40:	bfb8      	it	lt
 800ba42:	9204      	strlt	r2, [sp, #16]
 800ba44:	7823      	ldrb	r3, [r4, #0]
 800ba46:	2b2e      	cmp	r3, #46	; 0x2e
 800ba48:	d10c      	bne.n	800ba64 <_svfiprintf_r+0x130>
 800ba4a:	7863      	ldrb	r3, [r4, #1]
 800ba4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba4e:	d135      	bne.n	800babc <_svfiprintf_r+0x188>
 800ba50:	9b03      	ldr	r3, [sp, #12]
 800ba52:	1d1a      	adds	r2, r3, #4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9203      	str	r2, [sp, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	bfb8      	it	lt
 800ba5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba60:	3402      	adds	r4, #2
 800ba62:	9305      	str	r3, [sp, #20]
 800ba64:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb30 <_svfiprintf_r+0x1fc>
 800ba68:	7821      	ldrb	r1, [r4, #0]
 800ba6a:	2203      	movs	r2, #3
 800ba6c:	4650      	mov	r0, sl
 800ba6e:	f7f4 fbd7 	bl	8000220 <memchr>
 800ba72:	b140      	cbz	r0, 800ba86 <_svfiprintf_r+0x152>
 800ba74:	2340      	movs	r3, #64	; 0x40
 800ba76:	eba0 000a 	sub.w	r0, r0, sl
 800ba7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ba7e:	9b04      	ldr	r3, [sp, #16]
 800ba80:	4303      	orrs	r3, r0
 800ba82:	3401      	adds	r4, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4826      	ldr	r0, [pc, #152]	; (800bb24 <_svfiprintf_r+0x1f0>)
 800ba8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba90:	2206      	movs	r2, #6
 800ba92:	f7f4 fbc5 	bl	8000220 <memchr>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d038      	beq.n	800bb0c <_svfiprintf_r+0x1d8>
 800ba9a:	4b23      	ldr	r3, [pc, #140]	; (800bb28 <_svfiprintf_r+0x1f4>)
 800ba9c:	bb1b      	cbnz	r3, 800bae6 <_svfiprintf_r+0x1b2>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	3308      	adds	r3, #8
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baac:	4433      	add	r3, r6
 800baae:	9309      	str	r3, [sp, #36]	; 0x24
 800bab0:	e767      	b.n	800b982 <_svfiprintf_r+0x4e>
 800bab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab6:	460c      	mov	r4, r1
 800bab8:	2001      	movs	r0, #1
 800baba:	e7a5      	b.n	800ba08 <_svfiprintf_r+0xd4>
 800babc:	2300      	movs	r3, #0
 800babe:	3401      	adds	r4, #1
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	4619      	mov	r1, r3
 800bac4:	f04f 0c0a 	mov.w	ip, #10
 800bac8:	4620      	mov	r0, r4
 800baca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bace:	3a30      	subs	r2, #48	; 0x30
 800bad0:	2a09      	cmp	r2, #9
 800bad2:	d903      	bls.n	800badc <_svfiprintf_r+0x1a8>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0c5      	beq.n	800ba64 <_svfiprintf_r+0x130>
 800bad8:	9105      	str	r1, [sp, #20]
 800bada:	e7c3      	b.n	800ba64 <_svfiprintf_r+0x130>
 800badc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae0:	4604      	mov	r4, r0
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7f0      	b.n	800bac8 <_svfiprintf_r+0x194>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <_svfiprintf_r+0x1f8>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7fe f801 	bl	8009af8 <_printf_float>
 800baf6:	1c42      	adds	r2, r0, #1
 800baf8:	4606      	mov	r6, r0
 800bafa:	d1d6      	bne.n	800baaa <_svfiprintf_r+0x176>
 800bafc:	89ab      	ldrh	r3, [r5, #12]
 800bafe:	065b      	lsls	r3, r3, #25
 800bb00:	f53f af2c 	bmi.w	800b95c <_svfiprintf_r+0x28>
 800bb04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb06:	b01d      	add	sp, #116	; 0x74
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0c:	ab03      	add	r3, sp, #12
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	462a      	mov	r2, r5
 800bb12:	4b06      	ldr	r3, [pc, #24]	; (800bb2c <_svfiprintf_r+0x1f8>)
 800bb14:	a904      	add	r1, sp, #16
 800bb16:	4638      	mov	r0, r7
 800bb18:	f7fe fa92 	bl	800a040 <_printf_i>
 800bb1c:	e7eb      	b.n	800baf6 <_svfiprintf_r+0x1c2>
 800bb1e:	bf00      	nop
 800bb20:	0800cab4 	.word	0x0800cab4
 800bb24:	0800cabe 	.word	0x0800cabe
 800bb28:	08009af9 	.word	0x08009af9
 800bb2c:	0800b87d 	.word	0x0800b87d
 800bb30:	0800caba 	.word	0x0800caba

0800bb34 <_sbrk_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d06      	ldr	r5, [pc, #24]	; (800bb50 <_sbrk_r+0x1c>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	602b      	str	r3, [r5, #0]
 800bb40:	f7f7 fae0 	bl	8003104 <_sbrk>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <_sbrk_r+0x1a>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	b103      	cbz	r3, 800bb4e <_sbrk_r+0x1a>
 800bb4c:	6023      	str	r3, [r4, #0]
 800bb4e:	bd38      	pop	{r3, r4, r5, pc}
 800bb50:	200049f0 	.word	0x200049f0

0800bb54 <__assert_func>:
 800bb54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb56:	4614      	mov	r4, r2
 800bb58:	461a      	mov	r2, r3
 800bb5a:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <__assert_func+0x2c>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	4605      	mov	r5, r0
 800bb60:	68d8      	ldr	r0, [r3, #12]
 800bb62:	b14c      	cbz	r4, 800bb78 <__assert_func+0x24>
 800bb64:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <__assert_func+0x30>)
 800bb66:	9100      	str	r1, [sp, #0]
 800bb68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb6c:	4906      	ldr	r1, [pc, #24]	; (800bb88 <__assert_func+0x34>)
 800bb6e:	462b      	mov	r3, r5
 800bb70:	f000 f80e 	bl	800bb90 <fiprintf>
 800bb74:	f000 faa4 	bl	800c0c0 <abort>
 800bb78:	4b04      	ldr	r3, [pc, #16]	; (800bb8c <__assert_func+0x38>)
 800bb7a:	461c      	mov	r4, r3
 800bb7c:	e7f3      	b.n	800bb66 <__assert_func+0x12>
 800bb7e:	bf00      	nop
 800bb80:	20000030 	.word	0x20000030
 800bb84:	0800cac5 	.word	0x0800cac5
 800bb88:	0800cad2 	.word	0x0800cad2
 800bb8c:	0800cb00 	.word	0x0800cb00

0800bb90 <fiprintf>:
 800bb90:	b40e      	push	{r1, r2, r3}
 800bb92:	b503      	push	{r0, r1, lr}
 800bb94:	4601      	mov	r1, r0
 800bb96:	ab03      	add	r3, sp, #12
 800bb98:	4805      	ldr	r0, [pc, #20]	; (800bbb0 <fiprintf+0x20>)
 800bb9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb9e:	6800      	ldr	r0, [r0, #0]
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	f000 f88f 	bl	800bcc4 <_vfiprintf_r>
 800bba6:	b002      	add	sp, #8
 800bba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbac:	b003      	add	sp, #12
 800bbae:	4770      	bx	lr
 800bbb0:	20000030 	.word	0x20000030

0800bbb4 <__ascii_mbtowc>:
 800bbb4:	b082      	sub	sp, #8
 800bbb6:	b901      	cbnz	r1, 800bbba <__ascii_mbtowc+0x6>
 800bbb8:	a901      	add	r1, sp, #4
 800bbba:	b142      	cbz	r2, 800bbce <__ascii_mbtowc+0x1a>
 800bbbc:	b14b      	cbz	r3, 800bbd2 <__ascii_mbtowc+0x1e>
 800bbbe:	7813      	ldrb	r3, [r2, #0]
 800bbc0:	600b      	str	r3, [r1, #0]
 800bbc2:	7812      	ldrb	r2, [r2, #0]
 800bbc4:	1e10      	subs	r0, r2, #0
 800bbc6:	bf18      	it	ne
 800bbc8:	2001      	movne	r0, #1
 800bbca:	b002      	add	sp, #8
 800bbcc:	4770      	bx	lr
 800bbce:	4610      	mov	r0, r2
 800bbd0:	e7fb      	b.n	800bbca <__ascii_mbtowc+0x16>
 800bbd2:	f06f 0001 	mvn.w	r0, #1
 800bbd6:	e7f8      	b.n	800bbca <__ascii_mbtowc+0x16>

0800bbd8 <memmove>:
 800bbd8:	4288      	cmp	r0, r1
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	eb01 0402 	add.w	r4, r1, r2
 800bbe0:	d902      	bls.n	800bbe8 <memmove+0x10>
 800bbe2:	4284      	cmp	r4, r0
 800bbe4:	4623      	mov	r3, r4
 800bbe6:	d807      	bhi.n	800bbf8 <memmove+0x20>
 800bbe8:	1e43      	subs	r3, r0, #1
 800bbea:	42a1      	cmp	r1, r4
 800bbec:	d008      	beq.n	800bc00 <memmove+0x28>
 800bbee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbf6:	e7f8      	b.n	800bbea <memmove+0x12>
 800bbf8:	4402      	add	r2, r0
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	428a      	cmp	r2, r1
 800bbfe:	d100      	bne.n	800bc02 <memmove+0x2a>
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc0a:	e7f7      	b.n	800bbfc <memmove+0x24>

0800bc0c <__malloc_lock>:
 800bc0c:	4801      	ldr	r0, [pc, #4]	; (800bc14 <__malloc_lock+0x8>)
 800bc0e:	f000 bc17 	b.w	800c440 <__retarget_lock_acquire_recursive>
 800bc12:	bf00      	nop
 800bc14:	200049f8 	.word	0x200049f8

0800bc18 <__malloc_unlock>:
 800bc18:	4801      	ldr	r0, [pc, #4]	; (800bc20 <__malloc_unlock+0x8>)
 800bc1a:	f000 bc12 	b.w	800c442 <__retarget_lock_release_recursive>
 800bc1e:	bf00      	nop
 800bc20:	200049f8 	.word	0x200049f8

0800bc24 <_realloc_r>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	4607      	mov	r7, r0
 800bc28:	4614      	mov	r4, r2
 800bc2a:	460e      	mov	r6, r1
 800bc2c:	b921      	cbnz	r1, 800bc38 <_realloc_r+0x14>
 800bc2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc32:	4611      	mov	r1, r2
 800bc34:	f7ff bdc8 	b.w	800b7c8 <_malloc_r>
 800bc38:	b922      	cbnz	r2, 800bc44 <_realloc_r+0x20>
 800bc3a:	f7ff fd75 	bl	800b728 <_free_r>
 800bc3e:	4625      	mov	r5, r4
 800bc40:	4628      	mov	r0, r5
 800bc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc44:	f000 fc62 	bl	800c50c <_malloc_usable_size_r>
 800bc48:	42a0      	cmp	r0, r4
 800bc4a:	d20f      	bcs.n	800bc6c <_realloc_r+0x48>
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	4638      	mov	r0, r7
 800bc50:	f7ff fdba 	bl	800b7c8 <_malloc_r>
 800bc54:	4605      	mov	r5, r0
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d0f2      	beq.n	800bc40 <_realloc_r+0x1c>
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4622      	mov	r2, r4
 800bc5e:	f7ff f9c7 	bl	800aff0 <memcpy>
 800bc62:	4631      	mov	r1, r6
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7ff fd5f 	bl	800b728 <_free_r>
 800bc6a:	e7e9      	b.n	800bc40 <_realloc_r+0x1c>
 800bc6c:	4635      	mov	r5, r6
 800bc6e:	e7e7      	b.n	800bc40 <_realloc_r+0x1c>

0800bc70 <__sfputc_r>:
 800bc70:	6893      	ldr	r3, [r2, #8]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	b410      	push	{r4}
 800bc78:	6093      	str	r3, [r2, #8]
 800bc7a:	da08      	bge.n	800bc8e <__sfputc_r+0x1e>
 800bc7c:	6994      	ldr	r4, [r2, #24]
 800bc7e:	42a3      	cmp	r3, r4
 800bc80:	db01      	blt.n	800bc86 <__sfputc_r+0x16>
 800bc82:	290a      	cmp	r1, #10
 800bc84:	d103      	bne.n	800bc8e <__sfputc_r+0x1e>
 800bc86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc8a:	f000 b94b 	b.w	800bf24 <__swbuf_r>
 800bc8e:	6813      	ldr	r3, [r2, #0]
 800bc90:	1c58      	adds	r0, r3, #1
 800bc92:	6010      	str	r0, [r2, #0]
 800bc94:	7019      	strb	r1, [r3, #0]
 800bc96:	4608      	mov	r0, r1
 800bc98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc9c:	4770      	bx	lr

0800bc9e <__sfputs_r>:
 800bc9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca0:	4606      	mov	r6, r0
 800bca2:	460f      	mov	r7, r1
 800bca4:	4614      	mov	r4, r2
 800bca6:	18d5      	adds	r5, r2, r3
 800bca8:	42ac      	cmp	r4, r5
 800bcaa:	d101      	bne.n	800bcb0 <__sfputs_r+0x12>
 800bcac:	2000      	movs	r0, #0
 800bcae:	e007      	b.n	800bcc0 <__sfputs_r+0x22>
 800bcb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcb4:	463a      	mov	r2, r7
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7ff ffda 	bl	800bc70 <__sfputc_r>
 800bcbc:	1c43      	adds	r3, r0, #1
 800bcbe:	d1f3      	bne.n	800bca8 <__sfputs_r+0xa>
 800bcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bcc4 <_vfiprintf_r>:
 800bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	460d      	mov	r5, r1
 800bcca:	b09d      	sub	sp, #116	; 0x74
 800bccc:	4614      	mov	r4, r2
 800bcce:	4698      	mov	r8, r3
 800bcd0:	4606      	mov	r6, r0
 800bcd2:	b118      	cbz	r0, 800bcdc <_vfiprintf_r+0x18>
 800bcd4:	6983      	ldr	r3, [r0, #24]
 800bcd6:	b90b      	cbnz	r3, 800bcdc <_vfiprintf_r+0x18>
 800bcd8:	f000 fb14 	bl	800c304 <__sinit>
 800bcdc:	4b89      	ldr	r3, [pc, #548]	; (800bf04 <_vfiprintf_r+0x240>)
 800bcde:	429d      	cmp	r5, r3
 800bce0:	d11b      	bne.n	800bd1a <_vfiprintf_r+0x56>
 800bce2:	6875      	ldr	r5, [r6, #4]
 800bce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bce6:	07d9      	lsls	r1, r3, #31
 800bce8:	d405      	bmi.n	800bcf6 <_vfiprintf_r+0x32>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	059a      	lsls	r2, r3, #22
 800bcee:	d402      	bmi.n	800bcf6 <_vfiprintf_r+0x32>
 800bcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf2:	f000 fba5 	bl	800c440 <__retarget_lock_acquire_recursive>
 800bcf6:	89ab      	ldrh	r3, [r5, #12]
 800bcf8:	071b      	lsls	r3, r3, #28
 800bcfa:	d501      	bpl.n	800bd00 <_vfiprintf_r+0x3c>
 800bcfc:	692b      	ldr	r3, [r5, #16]
 800bcfe:	b9eb      	cbnz	r3, 800bd3c <_vfiprintf_r+0x78>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	f000 f96e 	bl	800bfe4 <__swsetup_r>
 800bd08:	b1c0      	cbz	r0, 800bd3c <_vfiprintf_r+0x78>
 800bd0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd0c:	07dc      	lsls	r4, r3, #31
 800bd0e:	d50e      	bpl.n	800bd2e <_vfiprintf_r+0x6a>
 800bd10:	f04f 30ff 	mov.w	r0, #4294967295
 800bd14:	b01d      	add	sp, #116	; 0x74
 800bd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1a:	4b7b      	ldr	r3, [pc, #492]	; (800bf08 <_vfiprintf_r+0x244>)
 800bd1c:	429d      	cmp	r5, r3
 800bd1e:	d101      	bne.n	800bd24 <_vfiprintf_r+0x60>
 800bd20:	68b5      	ldr	r5, [r6, #8]
 800bd22:	e7df      	b.n	800bce4 <_vfiprintf_r+0x20>
 800bd24:	4b79      	ldr	r3, [pc, #484]	; (800bf0c <_vfiprintf_r+0x248>)
 800bd26:	429d      	cmp	r5, r3
 800bd28:	bf08      	it	eq
 800bd2a:	68f5      	ldreq	r5, [r6, #12]
 800bd2c:	e7da      	b.n	800bce4 <_vfiprintf_r+0x20>
 800bd2e:	89ab      	ldrh	r3, [r5, #12]
 800bd30:	0598      	lsls	r0, r3, #22
 800bd32:	d4ed      	bmi.n	800bd10 <_vfiprintf_r+0x4c>
 800bd34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd36:	f000 fb84 	bl	800c442 <__retarget_lock_release_recursive>
 800bd3a:	e7e9      	b.n	800bd10 <_vfiprintf_r+0x4c>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd40:	2320      	movs	r3, #32
 800bd42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd46:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd4a:	2330      	movs	r3, #48	; 0x30
 800bd4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf10 <_vfiprintf_r+0x24c>
 800bd50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd54:	f04f 0901 	mov.w	r9, #1
 800bd58:	4623      	mov	r3, r4
 800bd5a:	469a      	mov	sl, r3
 800bd5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd60:	b10a      	cbz	r2, 800bd66 <_vfiprintf_r+0xa2>
 800bd62:	2a25      	cmp	r2, #37	; 0x25
 800bd64:	d1f9      	bne.n	800bd5a <_vfiprintf_r+0x96>
 800bd66:	ebba 0b04 	subs.w	fp, sl, r4
 800bd6a:	d00b      	beq.n	800bd84 <_vfiprintf_r+0xc0>
 800bd6c:	465b      	mov	r3, fp
 800bd6e:	4622      	mov	r2, r4
 800bd70:	4629      	mov	r1, r5
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7ff ff93 	bl	800bc9e <__sfputs_r>
 800bd78:	3001      	adds	r0, #1
 800bd7a:	f000 80aa 	beq.w	800bed2 <_vfiprintf_r+0x20e>
 800bd7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd80:	445a      	add	r2, fp
 800bd82:	9209      	str	r2, [sp, #36]	; 0x24
 800bd84:	f89a 3000 	ldrb.w	r3, [sl]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 80a2 	beq.w	800bed2 <_vfiprintf_r+0x20e>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295
 800bd94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd98:	f10a 0a01 	add.w	sl, sl, #1
 800bd9c:	9304      	str	r3, [sp, #16]
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bda4:	931a      	str	r3, [sp, #104]	; 0x68
 800bda6:	4654      	mov	r4, sl
 800bda8:	2205      	movs	r2, #5
 800bdaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdae:	4858      	ldr	r0, [pc, #352]	; (800bf10 <_vfiprintf_r+0x24c>)
 800bdb0:	f7f4 fa36 	bl	8000220 <memchr>
 800bdb4:	9a04      	ldr	r2, [sp, #16]
 800bdb6:	b9d8      	cbnz	r0, 800bdf0 <_vfiprintf_r+0x12c>
 800bdb8:	06d1      	lsls	r1, r2, #27
 800bdba:	bf44      	itt	mi
 800bdbc:	2320      	movmi	r3, #32
 800bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdc2:	0713      	lsls	r3, r2, #28
 800bdc4:	bf44      	itt	mi
 800bdc6:	232b      	movmi	r3, #43	; 0x2b
 800bdc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdcc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdd0:	2b2a      	cmp	r3, #42	; 0x2a
 800bdd2:	d015      	beq.n	800be00 <_vfiprintf_r+0x13c>
 800bdd4:	9a07      	ldr	r2, [sp, #28]
 800bdd6:	4654      	mov	r4, sl
 800bdd8:	2000      	movs	r0, #0
 800bdda:	f04f 0c0a 	mov.w	ip, #10
 800bdde:	4621      	mov	r1, r4
 800bde0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bde4:	3b30      	subs	r3, #48	; 0x30
 800bde6:	2b09      	cmp	r3, #9
 800bde8:	d94e      	bls.n	800be88 <_vfiprintf_r+0x1c4>
 800bdea:	b1b0      	cbz	r0, 800be1a <_vfiprintf_r+0x156>
 800bdec:	9207      	str	r2, [sp, #28]
 800bdee:	e014      	b.n	800be1a <_vfiprintf_r+0x156>
 800bdf0:	eba0 0308 	sub.w	r3, r0, r8
 800bdf4:	fa09 f303 	lsl.w	r3, r9, r3
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	9304      	str	r3, [sp, #16]
 800bdfc:	46a2      	mov	sl, r4
 800bdfe:	e7d2      	b.n	800bda6 <_vfiprintf_r+0xe2>
 800be00:	9b03      	ldr	r3, [sp, #12]
 800be02:	1d19      	adds	r1, r3, #4
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	9103      	str	r1, [sp, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	bfbb      	ittet	lt
 800be0c:	425b      	neglt	r3, r3
 800be0e:	f042 0202 	orrlt.w	r2, r2, #2
 800be12:	9307      	strge	r3, [sp, #28]
 800be14:	9307      	strlt	r3, [sp, #28]
 800be16:	bfb8      	it	lt
 800be18:	9204      	strlt	r2, [sp, #16]
 800be1a:	7823      	ldrb	r3, [r4, #0]
 800be1c:	2b2e      	cmp	r3, #46	; 0x2e
 800be1e:	d10c      	bne.n	800be3a <_vfiprintf_r+0x176>
 800be20:	7863      	ldrb	r3, [r4, #1]
 800be22:	2b2a      	cmp	r3, #42	; 0x2a
 800be24:	d135      	bne.n	800be92 <_vfiprintf_r+0x1ce>
 800be26:	9b03      	ldr	r3, [sp, #12]
 800be28:	1d1a      	adds	r2, r3, #4
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	9203      	str	r2, [sp, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	bfb8      	it	lt
 800be32:	f04f 33ff 	movlt.w	r3, #4294967295
 800be36:	3402      	adds	r4, #2
 800be38:	9305      	str	r3, [sp, #20]
 800be3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf20 <_vfiprintf_r+0x25c>
 800be3e:	7821      	ldrb	r1, [r4, #0]
 800be40:	2203      	movs	r2, #3
 800be42:	4650      	mov	r0, sl
 800be44:	f7f4 f9ec 	bl	8000220 <memchr>
 800be48:	b140      	cbz	r0, 800be5c <_vfiprintf_r+0x198>
 800be4a:	2340      	movs	r3, #64	; 0x40
 800be4c:	eba0 000a 	sub.w	r0, r0, sl
 800be50:	fa03 f000 	lsl.w	r0, r3, r0
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	4303      	orrs	r3, r0
 800be58:	3401      	adds	r4, #1
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be60:	482c      	ldr	r0, [pc, #176]	; (800bf14 <_vfiprintf_r+0x250>)
 800be62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be66:	2206      	movs	r2, #6
 800be68:	f7f4 f9da 	bl	8000220 <memchr>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d03f      	beq.n	800bef0 <_vfiprintf_r+0x22c>
 800be70:	4b29      	ldr	r3, [pc, #164]	; (800bf18 <_vfiprintf_r+0x254>)
 800be72:	bb1b      	cbnz	r3, 800bebc <_vfiprintf_r+0x1f8>
 800be74:	9b03      	ldr	r3, [sp, #12]
 800be76:	3307      	adds	r3, #7
 800be78:	f023 0307 	bic.w	r3, r3, #7
 800be7c:	3308      	adds	r3, #8
 800be7e:	9303      	str	r3, [sp, #12]
 800be80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be82:	443b      	add	r3, r7
 800be84:	9309      	str	r3, [sp, #36]	; 0x24
 800be86:	e767      	b.n	800bd58 <_vfiprintf_r+0x94>
 800be88:	fb0c 3202 	mla	r2, ip, r2, r3
 800be8c:	460c      	mov	r4, r1
 800be8e:	2001      	movs	r0, #1
 800be90:	e7a5      	b.n	800bdde <_vfiprintf_r+0x11a>
 800be92:	2300      	movs	r3, #0
 800be94:	3401      	adds	r4, #1
 800be96:	9305      	str	r3, [sp, #20]
 800be98:	4619      	mov	r1, r3
 800be9a:	f04f 0c0a 	mov.w	ip, #10
 800be9e:	4620      	mov	r0, r4
 800bea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bea4:	3a30      	subs	r2, #48	; 0x30
 800bea6:	2a09      	cmp	r2, #9
 800bea8:	d903      	bls.n	800beb2 <_vfiprintf_r+0x1ee>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d0c5      	beq.n	800be3a <_vfiprintf_r+0x176>
 800beae:	9105      	str	r1, [sp, #20]
 800beb0:	e7c3      	b.n	800be3a <_vfiprintf_r+0x176>
 800beb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800beb6:	4604      	mov	r4, r0
 800beb8:	2301      	movs	r3, #1
 800beba:	e7f0      	b.n	800be9e <_vfiprintf_r+0x1da>
 800bebc:	ab03      	add	r3, sp, #12
 800bebe:	9300      	str	r3, [sp, #0]
 800bec0:	462a      	mov	r2, r5
 800bec2:	4b16      	ldr	r3, [pc, #88]	; (800bf1c <_vfiprintf_r+0x258>)
 800bec4:	a904      	add	r1, sp, #16
 800bec6:	4630      	mov	r0, r6
 800bec8:	f7fd fe16 	bl	8009af8 <_printf_float>
 800becc:	4607      	mov	r7, r0
 800bece:	1c78      	adds	r0, r7, #1
 800bed0:	d1d6      	bne.n	800be80 <_vfiprintf_r+0x1bc>
 800bed2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bed4:	07d9      	lsls	r1, r3, #31
 800bed6:	d405      	bmi.n	800bee4 <_vfiprintf_r+0x220>
 800bed8:	89ab      	ldrh	r3, [r5, #12]
 800beda:	059a      	lsls	r2, r3, #22
 800bedc:	d402      	bmi.n	800bee4 <_vfiprintf_r+0x220>
 800bede:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bee0:	f000 faaf 	bl	800c442 <__retarget_lock_release_recursive>
 800bee4:	89ab      	ldrh	r3, [r5, #12]
 800bee6:	065b      	lsls	r3, r3, #25
 800bee8:	f53f af12 	bmi.w	800bd10 <_vfiprintf_r+0x4c>
 800beec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beee:	e711      	b.n	800bd14 <_vfiprintf_r+0x50>
 800bef0:	ab03      	add	r3, sp, #12
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	462a      	mov	r2, r5
 800bef6:	4b09      	ldr	r3, [pc, #36]	; (800bf1c <_vfiprintf_r+0x258>)
 800bef8:	a904      	add	r1, sp, #16
 800befa:	4630      	mov	r0, r6
 800befc:	f7fe f8a0 	bl	800a040 <_printf_i>
 800bf00:	e7e4      	b.n	800becc <_vfiprintf_r+0x208>
 800bf02:	bf00      	nop
 800bf04:	0800cc2c 	.word	0x0800cc2c
 800bf08:	0800cc4c 	.word	0x0800cc4c
 800bf0c:	0800cc0c 	.word	0x0800cc0c
 800bf10:	0800cab4 	.word	0x0800cab4
 800bf14:	0800cabe 	.word	0x0800cabe
 800bf18:	08009af9 	.word	0x08009af9
 800bf1c:	0800bc9f 	.word	0x0800bc9f
 800bf20:	0800caba 	.word	0x0800caba

0800bf24 <__swbuf_r>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	460e      	mov	r6, r1
 800bf28:	4614      	mov	r4, r2
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	b118      	cbz	r0, 800bf36 <__swbuf_r+0x12>
 800bf2e:	6983      	ldr	r3, [r0, #24]
 800bf30:	b90b      	cbnz	r3, 800bf36 <__swbuf_r+0x12>
 800bf32:	f000 f9e7 	bl	800c304 <__sinit>
 800bf36:	4b21      	ldr	r3, [pc, #132]	; (800bfbc <__swbuf_r+0x98>)
 800bf38:	429c      	cmp	r4, r3
 800bf3a:	d12b      	bne.n	800bf94 <__swbuf_r+0x70>
 800bf3c:	686c      	ldr	r4, [r5, #4]
 800bf3e:	69a3      	ldr	r3, [r4, #24]
 800bf40:	60a3      	str	r3, [r4, #8]
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	071a      	lsls	r2, r3, #28
 800bf46:	d52f      	bpl.n	800bfa8 <__swbuf_r+0x84>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	b36b      	cbz	r3, 800bfa8 <__swbuf_r+0x84>
 800bf4c:	6923      	ldr	r3, [r4, #16]
 800bf4e:	6820      	ldr	r0, [r4, #0]
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	6963      	ldr	r3, [r4, #20]
 800bf54:	b2f6      	uxtb	r6, r6
 800bf56:	4283      	cmp	r3, r0
 800bf58:	4637      	mov	r7, r6
 800bf5a:	dc04      	bgt.n	800bf66 <__swbuf_r+0x42>
 800bf5c:	4621      	mov	r1, r4
 800bf5e:	4628      	mov	r0, r5
 800bf60:	f000 f93c 	bl	800c1dc <_fflush_r>
 800bf64:	bb30      	cbnz	r0, 800bfb4 <__swbuf_r+0x90>
 800bf66:	68a3      	ldr	r3, [r4, #8]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	60a3      	str	r3, [r4, #8]
 800bf6c:	6823      	ldr	r3, [r4, #0]
 800bf6e:	1c5a      	adds	r2, r3, #1
 800bf70:	6022      	str	r2, [r4, #0]
 800bf72:	701e      	strb	r6, [r3, #0]
 800bf74:	6963      	ldr	r3, [r4, #20]
 800bf76:	3001      	adds	r0, #1
 800bf78:	4283      	cmp	r3, r0
 800bf7a:	d004      	beq.n	800bf86 <__swbuf_r+0x62>
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	07db      	lsls	r3, r3, #31
 800bf80:	d506      	bpl.n	800bf90 <__swbuf_r+0x6c>
 800bf82:	2e0a      	cmp	r6, #10
 800bf84:	d104      	bne.n	800bf90 <__swbuf_r+0x6c>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f000 f927 	bl	800c1dc <_fflush_r>
 800bf8e:	b988      	cbnz	r0, 800bfb4 <__swbuf_r+0x90>
 800bf90:	4638      	mov	r0, r7
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf94:	4b0a      	ldr	r3, [pc, #40]	; (800bfc0 <__swbuf_r+0x9c>)
 800bf96:	429c      	cmp	r4, r3
 800bf98:	d101      	bne.n	800bf9e <__swbuf_r+0x7a>
 800bf9a:	68ac      	ldr	r4, [r5, #8]
 800bf9c:	e7cf      	b.n	800bf3e <__swbuf_r+0x1a>
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <__swbuf_r+0xa0>)
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	bf08      	it	eq
 800bfa4:	68ec      	ldreq	r4, [r5, #12]
 800bfa6:	e7ca      	b.n	800bf3e <__swbuf_r+0x1a>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 f81a 	bl	800bfe4 <__swsetup_r>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0cb      	beq.n	800bf4c <__swbuf_r+0x28>
 800bfb4:	f04f 37ff 	mov.w	r7, #4294967295
 800bfb8:	e7ea      	b.n	800bf90 <__swbuf_r+0x6c>
 800bfba:	bf00      	nop
 800bfbc:	0800cc2c 	.word	0x0800cc2c
 800bfc0:	0800cc4c 	.word	0x0800cc4c
 800bfc4:	0800cc0c 	.word	0x0800cc0c

0800bfc8 <__ascii_wctomb>:
 800bfc8:	b149      	cbz	r1, 800bfde <__ascii_wctomb+0x16>
 800bfca:	2aff      	cmp	r2, #255	; 0xff
 800bfcc:	bf85      	ittet	hi
 800bfce:	238a      	movhi	r3, #138	; 0x8a
 800bfd0:	6003      	strhi	r3, [r0, #0]
 800bfd2:	700a      	strbls	r2, [r1, #0]
 800bfd4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfd8:	bf98      	it	ls
 800bfda:	2001      	movls	r0, #1
 800bfdc:	4770      	bx	lr
 800bfde:	4608      	mov	r0, r1
 800bfe0:	4770      	bx	lr
	...

0800bfe4 <__swsetup_r>:
 800bfe4:	4b32      	ldr	r3, [pc, #200]	; (800c0b0 <__swsetup_r+0xcc>)
 800bfe6:	b570      	push	{r4, r5, r6, lr}
 800bfe8:	681d      	ldr	r5, [r3, #0]
 800bfea:	4606      	mov	r6, r0
 800bfec:	460c      	mov	r4, r1
 800bfee:	b125      	cbz	r5, 800bffa <__swsetup_r+0x16>
 800bff0:	69ab      	ldr	r3, [r5, #24]
 800bff2:	b913      	cbnz	r3, 800bffa <__swsetup_r+0x16>
 800bff4:	4628      	mov	r0, r5
 800bff6:	f000 f985 	bl	800c304 <__sinit>
 800bffa:	4b2e      	ldr	r3, [pc, #184]	; (800c0b4 <__swsetup_r+0xd0>)
 800bffc:	429c      	cmp	r4, r3
 800bffe:	d10f      	bne.n	800c020 <__swsetup_r+0x3c>
 800c000:	686c      	ldr	r4, [r5, #4]
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c008:	0719      	lsls	r1, r3, #28
 800c00a:	d42c      	bmi.n	800c066 <__swsetup_r+0x82>
 800c00c:	06dd      	lsls	r5, r3, #27
 800c00e:	d411      	bmi.n	800c034 <__swsetup_r+0x50>
 800c010:	2309      	movs	r3, #9
 800c012:	6033      	str	r3, [r6, #0]
 800c014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c018:	81a3      	strh	r3, [r4, #12]
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295
 800c01e:	e03e      	b.n	800c09e <__swsetup_r+0xba>
 800c020:	4b25      	ldr	r3, [pc, #148]	; (800c0b8 <__swsetup_r+0xd4>)
 800c022:	429c      	cmp	r4, r3
 800c024:	d101      	bne.n	800c02a <__swsetup_r+0x46>
 800c026:	68ac      	ldr	r4, [r5, #8]
 800c028:	e7eb      	b.n	800c002 <__swsetup_r+0x1e>
 800c02a:	4b24      	ldr	r3, [pc, #144]	; (800c0bc <__swsetup_r+0xd8>)
 800c02c:	429c      	cmp	r4, r3
 800c02e:	bf08      	it	eq
 800c030:	68ec      	ldreq	r4, [r5, #12]
 800c032:	e7e6      	b.n	800c002 <__swsetup_r+0x1e>
 800c034:	0758      	lsls	r0, r3, #29
 800c036:	d512      	bpl.n	800c05e <__swsetup_r+0x7a>
 800c038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c03a:	b141      	cbz	r1, 800c04e <__swsetup_r+0x6a>
 800c03c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c040:	4299      	cmp	r1, r3
 800c042:	d002      	beq.n	800c04a <__swsetup_r+0x66>
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff fb6f 	bl	800b728 <_free_r>
 800c04a:	2300      	movs	r3, #0
 800c04c:	6363      	str	r3, [r4, #52]	; 0x34
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c054:	81a3      	strh	r3, [r4, #12]
 800c056:	2300      	movs	r3, #0
 800c058:	6063      	str	r3, [r4, #4]
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	89a3      	ldrh	r3, [r4, #12]
 800c060:	f043 0308 	orr.w	r3, r3, #8
 800c064:	81a3      	strh	r3, [r4, #12]
 800c066:	6923      	ldr	r3, [r4, #16]
 800c068:	b94b      	cbnz	r3, 800c07e <__swsetup_r+0x9a>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c074:	d003      	beq.n	800c07e <__swsetup_r+0x9a>
 800c076:	4621      	mov	r1, r4
 800c078:	4630      	mov	r0, r6
 800c07a:	f000 fa07 	bl	800c48c <__smakebuf_r>
 800c07e:	89a0      	ldrh	r0, [r4, #12]
 800c080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c084:	f010 0301 	ands.w	r3, r0, #1
 800c088:	d00a      	beq.n	800c0a0 <__swsetup_r+0xbc>
 800c08a:	2300      	movs	r3, #0
 800c08c:	60a3      	str	r3, [r4, #8]
 800c08e:	6963      	ldr	r3, [r4, #20]
 800c090:	425b      	negs	r3, r3
 800c092:	61a3      	str	r3, [r4, #24]
 800c094:	6923      	ldr	r3, [r4, #16]
 800c096:	b943      	cbnz	r3, 800c0aa <__swsetup_r+0xc6>
 800c098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c09c:	d1ba      	bne.n	800c014 <__swsetup_r+0x30>
 800c09e:	bd70      	pop	{r4, r5, r6, pc}
 800c0a0:	0781      	lsls	r1, r0, #30
 800c0a2:	bf58      	it	pl
 800c0a4:	6963      	ldrpl	r3, [r4, #20]
 800c0a6:	60a3      	str	r3, [r4, #8]
 800c0a8:	e7f4      	b.n	800c094 <__swsetup_r+0xb0>
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	e7f7      	b.n	800c09e <__swsetup_r+0xba>
 800c0ae:	bf00      	nop
 800c0b0:	20000030 	.word	0x20000030
 800c0b4:	0800cc2c 	.word	0x0800cc2c
 800c0b8:	0800cc4c 	.word	0x0800cc4c
 800c0bc:	0800cc0c 	.word	0x0800cc0c

0800c0c0 <abort>:
 800c0c0:	b508      	push	{r3, lr}
 800c0c2:	2006      	movs	r0, #6
 800c0c4:	f000 fa52 	bl	800c56c <raise>
 800c0c8:	2001      	movs	r0, #1
 800c0ca:	f7f6 ffa3 	bl	8003014 <_exit>
	...

0800c0d0 <__sflush_r>:
 800c0d0:	898a      	ldrh	r2, [r1, #12]
 800c0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	0710      	lsls	r0, r2, #28
 800c0da:	460c      	mov	r4, r1
 800c0dc:	d458      	bmi.n	800c190 <__sflush_r+0xc0>
 800c0de:	684b      	ldr	r3, [r1, #4]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dc05      	bgt.n	800c0f0 <__sflush_r+0x20>
 800c0e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	dc02      	bgt.n	800c0f0 <__sflush_r+0x20>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	d0f9      	beq.n	800c0ea <__sflush_r+0x1a>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0fc:	682f      	ldr	r7, [r5, #0]
 800c0fe:	602b      	str	r3, [r5, #0]
 800c100:	d032      	beq.n	800c168 <__sflush_r+0x98>
 800c102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	075a      	lsls	r2, r3, #29
 800c108:	d505      	bpl.n	800c116 <__sflush_r+0x46>
 800c10a:	6863      	ldr	r3, [r4, #4]
 800c10c:	1ac0      	subs	r0, r0, r3
 800c10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c110:	b10b      	cbz	r3, 800c116 <__sflush_r+0x46>
 800c112:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c114:	1ac0      	subs	r0, r0, r3
 800c116:	2300      	movs	r3, #0
 800c118:	4602      	mov	r2, r0
 800c11a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c11c:	6a21      	ldr	r1, [r4, #32]
 800c11e:	4628      	mov	r0, r5
 800c120:	47b0      	blx	r6
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	d106      	bne.n	800c136 <__sflush_r+0x66>
 800c128:	6829      	ldr	r1, [r5, #0]
 800c12a:	291d      	cmp	r1, #29
 800c12c:	d82c      	bhi.n	800c188 <__sflush_r+0xb8>
 800c12e:	4a2a      	ldr	r2, [pc, #168]	; (800c1d8 <__sflush_r+0x108>)
 800c130:	40ca      	lsrs	r2, r1
 800c132:	07d6      	lsls	r6, r2, #31
 800c134:	d528      	bpl.n	800c188 <__sflush_r+0xb8>
 800c136:	2200      	movs	r2, #0
 800c138:	6062      	str	r2, [r4, #4]
 800c13a:	04d9      	lsls	r1, r3, #19
 800c13c:	6922      	ldr	r2, [r4, #16]
 800c13e:	6022      	str	r2, [r4, #0]
 800c140:	d504      	bpl.n	800c14c <__sflush_r+0x7c>
 800c142:	1c42      	adds	r2, r0, #1
 800c144:	d101      	bne.n	800c14a <__sflush_r+0x7a>
 800c146:	682b      	ldr	r3, [r5, #0]
 800c148:	b903      	cbnz	r3, 800c14c <__sflush_r+0x7c>
 800c14a:	6560      	str	r0, [r4, #84]	; 0x54
 800c14c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c14e:	602f      	str	r7, [r5, #0]
 800c150:	2900      	cmp	r1, #0
 800c152:	d0ca      	beq.n	800c0ea <__sflush_r+0x1a>
 800c154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c158:	4299      	cmp	r1, r3
 800c15a:	d002      	beq.n	800c162 <__sflush_r+0x92>
 800c15c:	4628      	mov	r0, r5
 800c15e:	f7ff fae3 	bl	800b728 <_free_r>
 800c162:	2000      	movs	r0, #0
 800c164:	6360      	str	r0, [r4, #52]	; 0x34
 800c166:	e7c1      	b.n	800c0ec <__sflush_r+0x1c>
 800c168:	6a21      	ldr	r1, [r4, #32]
 800c16a:	2301      	movs	r3, #1
 800c16c:	4628      	mov	r0, r5
 800c16e:	47b0      	blx	r6
 800c170:	1c41      	adds	r1, r0, #1
 800c172:	d1c7      	bne.n	800c104 <__sflush_r+0x34>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0c4      	beq.n	800c104 <__sflush_r+0x34>
 800c17a:	2b1d      	cmp	r3, #29
 800c17c:	d001      	beq.n	800c182 <__sflush_r+0xb2>
 800c17e:	2b16      	cmp	r3, #22
 800c180:	d101      	bne.n	800c186 <__sflush_r+0xb6>
 800c182:	602f      	str	r7, [r5, #0]
 800c184:	e7b1      	b.n	800c0ea <__sflush_r+0x1a>
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c18c:	81a3      	strh	r3, [r4, #12]
 800c18e:	e7ad      	b.n	800c0ec <__sflush_r+0x1c>
 800c190:	690f      	ldr	r7, [r1, #16]
 800c192:	2f00      	cmp	r7, #0
 800c194:	d0a9      	beq.n	800c0ea <__sflush_r+0x1a>
 800c196:	0793      	lsls	r3, r2, #30
 800c198:	680e      	ldr	r6, [r1, #0]
 800c19a:	bf08      	it	eq
 800c19c:	694b      	ldreq	r3, [r1, #20]
 800c19e:	600f      	str	r7, [r1, #0]
 800c1a0:	bf18      	it	ne
 800c1a2:	2300      	movne	r3, #0
 800c1a4:	eba6 0807 	sub.w	r8, r6, r7
 800c1a8:	608b      	str	r3, [r1, #8]
 800c1aa:	f1b8 0f00 	cmp.w	r8, #0
 800c1ae:	dd9c      	ble.n	800c0ea <__sflush_r+0x1a>
 800c1b0:	6a21      	ldr	r1, [r4, #32]
 800c1b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1b4:	4643      	mov	r3, r8
 800c1b6:	463a      	mov	r2, r7
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	47b0      	blx	r6
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	dc06      	bgt.n	800c1ce <__sflush_r+0xfe>
 800c1c0:	89a3      	ldrh	r3, [r4, #12]
 800c1c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1cc:	e78e      	b.n	800c0ec <__sflush_r+0x1c>
 800c1ce:	4407      	add	r7, r0
 800c1d0:	eba8 0800 	sub.w	r8, r8, r0
 800c1d4:	e7e9      	b.n	800c1aa <__sflush_r+0xda>
 800c1d6:	bf00      	nop
 800c1d8:	20400001 	.word	0x20400001

0800c1dc <_fflush_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	690b      	ldr	r3, [r1, #16]
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	b913      	cbnz	r3, 800c1ec <_fflush_r+0x10>
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	b118      	cbz	r0, 800c1f6 <_fflush_r+0x1a>
 800c1ee:	6983      	ldr	r3, [r0, #24]
 800c1f0:	b90b      	cbnz	r3, 800c1f6 <_fflush_r+0x1a>
 800c1f2:	f000 f887 	bl	800c304 <__sinit>
 800c1f6:	4b14      	ldr	r3, [pc, #80]	; (800c248 <_fflush_r+0x6c>)
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	d11b      	bne.n	800c234 <_fflush_r+0x58>
 800c1fc:	686c      	ldr	r4, [r5, #4]
 800c1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0ef      	beq.n	800c1e6 <_fflush_r+0xa>
 800c206:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c208:	07d0      	lsls	r0, r2, #31
 800c20a:	d404      	bmi.n	800c216 <_fflush_r+0x3a>
 800c20c:	0599      	lsls	r1, r3, #22
 800c20e:	d402      	bmi.n	800c216 <_fflush_r+0x3a>
 800c210:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c212:	f000 f915 	bl	800c440 <__retarget_lock_acquire_recursive>
 800c216:	4628      	mov	r0, r5
 800c218:	4621      	mov	r1, r4
 800c21a:	f7ff ff59 	bl	800c0d0 <__sflush_r>
 800c21e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c220:	07da      	lsls	r2, r3, #31
 800c222:	4605      	mov	r5, r0
 800c224:	d4e0      	bmi.n	800c1e8 <_fflush_r+0xc>
 800c226:	89a3      	ldrh	r3, [r4, #12]
 800c228:	059b      	lsls	r3, r3, #22
 800c22a:	d4dd      	bmi.n	800c1e8 <_fflush_r+0xc>
 800c22c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c22e:	f000 f908 	bl	800c442 <__retarget_lock_release_recursive>
 800c232:	e7d9      	b.n	800c1e8 <_fflush_r+0xc>
 800c234:	4b05      	ldr	r3, [pc, #20]	; (800c24c <_fflush_r+0x70>)
 800c236:	429c      	cmp	r4, r3
 800c238:	d101      	bne.n	800c23e <_fflush_r+0x62>
 800c23a:	68ac      	ldr	r4, [r5, #8]
 800c23c:	e7df      	b.n	800c1fe <_fflush_r+0x22>
 800c23e:	4b04      	ldr	r3, [pc, #16]	; (800c250 <_fflush_r+0x74>)
 800c240:	429c      	cmp	r4, r3
 800c242:	bf08      	it	eq
 800c244:	68ec      	ldreq	r4, [r5, #12]
 800c246:	e7da      	b.n	800c1fe <_fflush_r+0x22>
 800c248:	0800cc2c 	.word	0x0800cc2c
 800c24c:	0800cc4c 	.word	0x0800cc4c
 800c250:	0800cc0c 	.word	0x0800cc0c

0800c254 <std>:
 800c254:	2300      	movs	r3, #0
 800c256:	b510      	push	{r4, lr}
 800c258:	4604      	mov	r4, r0
 800c25a:	e9c0 3300 	strd	r3, r3, [r0]
 800c25e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c262:	6083      	str	r3, [r0, #8]
 800c264:	8181      	strh	r1, [r0, #12]
 800c266:	6643      	str	r3, [r0, #100]	; 0x64
 800c268:	81c2      	strh	r2, [r0, #14]
 800c26a:	6183      	str	r3, [r0, #24]
 800c26c:	4619      	mov	r1, r3
 800c26e:	2208      	movs	r2, #8
 800c270:	305c      	adds	r0, #92	; 0x5c
 800c272:	f7fd fb99 	bl	80099a8 <memset>
 800c276:	4b05      	ldr	r3, [pc, #20]	; (800c28c <std+0x38>)
 800c278:	6263      	str	r3, [r4, #36]	; 0x24
 800c27a:	4b05      	ldr	r3, [pc, #20]	; (800c290 <std+0x3c>)
 800c27c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c27e:	4b05      	ldr	r3, [pc, #20]	; (800c294 <std+0x40>)
 800c280:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c282:	4b05      	ldr	r3, [pc, #20]	; (800c298 <std+0x44>)
 800c284:	6224      	str	r4, [r4, #32]
 800c286:	6323      	str	r3, [r4, #48]	; 0x30
 800c288:	bd10      	pop	{r4, pc}
 800c28a:	bf00      	nop
 800c28c:	0800c5a5 	.word	0x0800c5a5
 800c290:	0800c5c7 	.word	0x0800c5c7
 800c294:	0800c5ff 	.word	0x0800c5ff
 800c298:	0800c623 	.word	0x0800c623

0800c29c <_cleanup_r>:
 800c29c:	4901      	ldr	r1, [pc, #4]	; (800c2a4 <_cleanup_r+0x8>)
 800c29e:	f000 b8af 	b.w	800c400 <_fwalk_reent>
 800c2a2:	bf00      	nop
 800c2a4:	0800c1dd 	.word	0x0800c1dd

0800c2a8 <__sfmoreglue>:
 800c2a8:	b570      	push	{r4, r5, r6, lr}
 800c2aa:	1e4a      	subs	r2, r1, #1
 800c2ac:	2568      	movs	r5, #104	; 0x68
 800c2ae:	4355      	muls	r5, r2
 800c2b0:	460e      	mov	r6, r1
 800c2b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2b6:	f7ff fa87 	bl	800b7c8 <_malloc_r>
 800c2ba:	4604      	mov	r4, r0
 800c2bc:	b140      	cbz	r0, 800c2d0 <__sfmoreglue+0x28>
 800c2be:	2100      	movs	r1, #0
 800c2c0:	e9c0 1600 	strd	r1, r6, [r0]
 800c2c4:	300c      	adds	r0, #12
 800c2c6:	60a0      	str	r0, [r4, #8]
 800c2c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2cc:	f7fd fb6c 	bl	80099a8 <memset>
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	bd70      	pop	{r4, r5, r6, pc}

0800c2d4 <__sfp_lock_acquire>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__sfp_lock_acquire+0x8>)
 800c2d6:	f000 b8b3 	b.w	800c440 <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	200049fc 	.word	0x200049fc

0800c2e0 <__sfp_lock_release>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__sfp_lock_release+0x8>)
 800c2e2:	f000 b8ae 	b.w	800c442 <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	200049fc 	.word	0x200049fc

0800c2ec <__sinit_lock_acquire>:
 800c2ec:	4801      	ldr	r0, [pc, #4]	; (800c2f4 <__sinit_lock_acquire+0x8>)
 800c2ee:	f000 b8a7 	b.w	800c440 <__retarget_lock_acquire_recursive>
 800c2f2:	bf00      	nop
 800c2f4:	200049f7 	.word	0x200049f7

0800c2f8 <__sinit_lock_release>:
 800c2f8:	4801      	ldr	r0, [pc, #4]	; (800c300 <__sinit_lock_release+0x8>)
 800c2fa:	f000 b8a2 	b.w	800c442 <__retarget_lock_release_recursive>
 800c2fe:	bf00      	nop
 800c300:	200049f7 	.word	0x200049f7

0800c304 <__sinit>:
 800c304:	b510      	push	{r4, lr}
 800c306:	4604      	mov	r4, r0
 800c308:	f7ff fff0 	bl	800c2ec <__sinit_lock_acquire>
 800c30c:	69a3      	ldr	r3, [r4, #24]
 800c30e:	b11b      	cbz	r3, 800c318 <__sinit+0x14>
 800c310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c314:	f7ff bff0 	b.w	800c2f8 <__sinit_lock_release>
 800c318:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c31c:	6523      	str	r3, [r4, #80]	; 0x50
 800c31e:	4b13      	ldr	r3, [pc, #76]	; (800c36c <__sinit+0x68>)
 800c320:	4a13      	ldr	r2, [pc, #76]	; (800c370 <__sinit+0x6c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	62a2      	str	r2, [r4, #40]	; 0x28
 800c326:	42a3      	cmp	r3, r4
 800c328:	bf04      	itt	eq
 800c32a:	2301      	moveq	r3, #1
 800c32c:	61a3      	streq	r3, [r4, #24]
 800c32e:	4620      	mov	r0, r4
 800c330:	f000 f820 	bl	800c374 <__sfp>
 800c334:	6060      	str	r0, [r4, #4]
 800c336:	4620      	mov	r0, r4
 800c338:	f000 f81c 	bl	800c374 <__sfp>
 800c33c:	60a0      	str	r0, [r4, #8]
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 f818 	bl	800c374 <__sfp>
 800c344:	2200      	movs	r2, #0
 800c346:	60e0      	str	r0, [r4, #12]
 800c348:	2104      	movs	r1, #4
 800c34a:	6860      	ldr	r0, [r4, #4]
 800c34c:	f7ff ff82 	bl	800c254 <std>
 800c350:	68a0      	ldr	r0, [r4, #8]
 800c352:	2201      	movs	r2, #1
 800c354:	2109      	movs	r1, #9
 800c356:	f7ff ff7d 	bl	800c254 <std>
 800c35a:	68e0      	ldr	r0, [r4, #12]
 800c35c:	2202      	movs	r2, #2
 800c35e:	2112      	movs	r1, #18
 800c360:	f7ff ff78 	bl	800c254 <std>
 800c364:	2301      	movs	r3, #1
 800c366:	61a3      	str	r3, [r4, #24]
 800c368:	e7d2      	b.n	800c310 <__sinit+0xc>
 800c36a:	bf00      	nop
 800c36c:	0800c88c 	.word	0x0800c88c
 800c370:	0800c29d 	.word	0x0800c29d

0800c374 <__sfp>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	4607      	mov	r7, r0
 800c378:	f7ff ffac 	bl	800c2d4 <__sfp_lock_acquire>
 800c37c:	4b1e      	ldr	r3, [pc, #120]	; (800c3f8 <__sfp+0x84>)
 800c37e:	681e      	ldr	r6, [r3, #0]
 800c380:	69b3      	ldr	r3, [r6, #24]
 800c382:	b913      	cbnz	r3, 800c38a <__sfp+0x16>
 800c384:	4630      	mov	r0, r6
 800c386:	f7ff ffbd 	bl	800c304 <__sinit>
 800c38a:	3648      	adds	r6, #72	; 0x48
 800c38c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c390:	3b01      	subs	r3, #1
 800c392:	d503      	bpl.n	800c39c <__sfp+0x28>
 800c394:	6833      	ldr	r3, [r6, #0]
 800c396:	b30b      	cbz	r3, 800c3dc <__sfp+0x68>
 800c398:	6836      	ldr	r6, [r6, #0]
 800c39a:	e7f7      	b.n	800c38c <__sfp+0x18>
 800c39c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3a0:	b9d5      	cbnz	r5, 800c3d8 <__sfp+0x64>
 800c3a2:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <__sfp+0x88>)
 800c3a4:	60e3      	str	r3, [r4, #12]
 800c3a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3aa:	6665      	str	r5, [r4, #100]	; 0x64
 800c3ac:	f000 f847 	bl	800c43e <__retarget_lock_init_recursive>
 800c3b0:	f7ff ff96 	bl	800c2e0 <__sfp_lock_release>
 800c3b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3bc:	6025      	str	r5, [r4, #0]
 800c3be:	61a5      	str	r5, [r4, #24]
 800c3c0:	2208      	movs	r2, #8
 800c3c2:	4629      	mov	r1, r5
 800c3c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3c8:	f7fd faee 	bl	80099a8 <memset>
 800c3cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3d8:	3468      	adds	r4, #104	; 0x68
 800c3da:	e7d9      	b.n	800c390 <__sfp+0x1c>
 800c3dc:	2104      	movs	r1, #4
 800c3de:	4638      	mov	r0, r7
 800c3e0:	f7ff ff62 	bl	800c2a8 <__sfmoreglue>
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	6030      	str	r0, [r6, #0]
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d1d5      	bne.n	800c398 <__sfp+0x24>
 800c3ec:	f7ff ff78 	bl	800c2e0 <__sfp_lock_release>
 800c3f0:	230c      	movs	r3, #12
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	e7ee      	b.n	800c3d4 <__sfp+0x60>
 800c3f6:	bf00      	nop
 800c3f8:	0800c88c 	.word	0x0800c88c
 800c3fc:	ffff0001 	.word	0xffff0001

0800c400 <_fwalk_reent>:
 800c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c404:	4606      	mov	r6, r0
 800c406:	4688      	mov	r8, r1
 800c408:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c40c:	2700      	movs	r7, #0
 800c40e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c412:	f1b9 0901 	subs.w	r9, r9, #1
 800c416:	d505      	bpl.n	800c424 <_fwalk_reent+0x24>
 800c418:	6824      	ldr	r4, [r4, #0]
 800c41a:	2c00      	cmp	r4, #0
 800c41c:	d1f7      	bne.n	800c40e <_fwalk_reent+0xe>
 800c41e:	4638      	mov	r0, r7
 800c420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c424:	89ab      	ldrh	r3, [r5, #12]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d907      	bls.n	800c43a <_fwalk_reent+0x3a>
 800c42a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c42e:	3301      	adds	r3, #1
 800c430:	d003      	beq.n	800c43a <_fwalk_reent+0x3a>
 800c432:	4629      	mov	r1, r5
 800c434:	4630      	mov	r0, r6
 800c436:	47c0      	blx	r8
 800c438:	4307      	orrs	r7, r0
 800c43a:	3568      	adds	r5, #104	; 0x68
 800c43c:	e7e9      	b.n	800c412 <_fwalk_reent+0x12>

0800c43e <__retarget_lock_init_recursive>:
 800c43e:	4770      	bx	lr

0800c440 <__retarget_lock_acquire_recursive>:
 800c440:	4770      	bx	lr

0800c442 <__retarget_lock_release_recursive>:
 800c442:	4770      	bx	lr

0800c444 <__swhatbuf_r>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	460e      	mov	r6, r1
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	2900      	cmp	r1, #0
 800c44e:	b096      	sub	sp, #88	; 0x58
 800c450:	4614      	mov	r4, r2
 800c452:	461d      	mov	r5, r3
 800c454:	da07      	bge.n	800c466 <__swhatbuf_r+0x22>
 800c456:	2300      	movs	r3, #0
 800c458:	602b      	str	r3, [r5, #0]
 800c45a:	89b3      	ldrh	r3, [r6, #12]
 800c45c:	061a      	lsls	r2, r3, #24
 800c45e:	d410      	bmi.n	800c482 <__swhatbuf_r+0x3e>
 800c460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c464:	e00e      	b.n	800c484 <__swhatbuf_r+0x40>
 800c466:	466a      	mov	r2, sp
 800c468:	f000 f902 	bl	800c670 <_fstat_r>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	dbf2      	blt.n	800c456 <__swhatbuf_r+0x12>
 800c470:	9a01      	ldr	r2, [sp, #4]
 800c472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c47a:	425a      	negs	r2, r3
 800c47c:	415a      	adcs	r2, r3
 800c47e:	602a      	str	r2, [r5, #0]
 800c480:	e7ee      	b.n	800c460 <__swhatbuf_r+0x1c>
 800c482:	2340      	movs	r3, #64	; 0x40
 800c484:	2000      	movs	r0, #0
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	b016      	add	sp, #88	; 0x58
 800c48a:	bd70      	pop	{r4, r5, r6, pc}

0800c48c <__smakebuf_r>:
 800c48c:	898b      	ldrh	r3, [r1, #12]
 800c48e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c490:	079d      	lsls	r5, r3, #30
 800c492:	4606      	mov	r6, r0
 800c494:	460c      	mov	r4, r1
 800c496:	d507      	bpl.n	800c4a8 <__smakebuf_r+0x1c>
 800c498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	6123      	str	r3, [r4, #16]
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	6163      	str	r3, [r4, #20]
 800c4a4:	b002      	add	sp, #8
 800c4a6:	bd70      	pop	{r4, r5, r6, pc}
 800c4a8:	ab01      	add	r3, sp, #4
 800c4aa:	466a      	mov	r2, sp
 800c4ac:	f7ff ffca 	bl	800c444 <__swhatbuf_r>
 800c4b0:	9900      	ldr	r1, [sp, #0]
 800c4b2:	4605      	mov	r5, r0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f7ff f987 	bl	800b7c8 <_malloc_r>
 800c4ba:	b948      	cbnz	r0, 800c4d0 <__smakebuf_r+0x44>
 800c4bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c0:	059a      	lsls	r2, r3, #22
 800c4c2:	d4ef      	bmi.n	800c4a4 <__smakebuf_r+0x18>
 800c4c4:	f023 0303 	bic.w	r3, r3, #3
 800c4c8:	f043 0302 	orr.w	r3, r3, #2
 800c4cc:	81a3      	strh	r3, [r4, #12]
 800c4ce:	e7e3      	b.n	800c498 <__smakebuf_r+0xc>
 800c4d0:	4b0d      	ldr	r3, [pc, #52]	; (800c508 <__smakebuf_r+0x7c>)
 800c4d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	6020      	str	r0, [r4, #0]
 800c4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4dc:	81a3      	strh	r3, [r4, #12]
 800c4de:	9b00      	ldr	r3, [sp, #0]
 800c4e0:	6163      	str	r3, [r4, #20]
 800c4e2:	9b01      	ldr	r3, [sp, #4]
 800c4e4:	6120      	str	r0, [r4, #16]
 800c4e6:	b15b      	cbz	r3, 800c500 <__smakebuf_r+0x74>
 800c4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f000 f8d1 	bl	800c694 <_isatty_r>
 800c4f2:	b128      	cbz	r0, 800c500 <__smakebuf_r+0x74>
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	f023 0303 	bic.w	r3, r3, #3
 800c4fa:	f043 0301 	orr.w	r3, r3, #1
 800c4fe:	81a3      	strh	r3, [r4, #12]
 800c500:	89a0      	ldrh	r0, [r4, #12]
 800c502:	4305      	orrs	r5, r0
 800c504:	81a5      	strh	r5, [r4, #12]
 800c506:	e7cd      	b.n	800c4a4 <__smakebuf_r+0x18>
 800c508:	0800c29d 	.word	0x0800c29d

0800c50c <_malloc_usable_size_r>:
 800c50c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c510:	1f18      	subs	r0, r3, #4
 800c512:	2b00      	cmp	r3, #0
 800c514:	bfbc      	itt	lt
 800c516:	580b      	ldrlt	r3, [r1, r0]
 800c518:	18c0      	addlt	r0, r0, r3
 800c51a:	4770      	bx	lr

0800c51c <_raise_r>:
 800c51c:	291f      	cmp	r1, #31
 800c51e:	b538      	push	{r3, r4, r5, lr}
 800c520:	4604      	mov	r4, r0
 800c522:	460d      	mov	r5, r1
 800c524:	d904      	bls.n	800c530 <_raise_r+0x14>
 800c526:	2316      	movs	r3, #22
 800c528:	6003      	str	r3, [r0, #0]
 800c52a:	f04f 30ff 	mov.w	r0, #4294967295
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c532:	b112      	cbz	r2, 800c53a <_raise_r+0x1e>
 800c534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c538:	b94b      	cbnz	r3, 800c54e <_raise_r+0x32>
 800c53a:	4620      	mov	r0, r4
 800c53c:	f000 f830 	bl	800c5a0 <_getpid_r>
 800c540:	462a      	mov	r2, r5
 800c542:	4601      	mov	r1, r0
 800c544:	4620      	mov	r0, r4
 800c546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c54a:	f000 b817 	b.w	800c57c <_kill_r>
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d00a      	beq.n	800c568 <_raise_r+0x4c>
 800c552:	1c59      	adds	r1, r3, #1
 800c554:	d103      	bne.n	800c55e <_raise_r+0x42>
 800c556:	2316      	movs	r3, #22
 800c558:	6003      	str	r3, [r0, #0]
 800c55a:	2001      	movs	r0, #1
 800c55c:	e7e7      	b.n	800c52e <_raise_r+0x12>
 800c55e:	2400      	movs	r4, #0
 800c560:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c564:	4628      	mov	r0, r5
 800c566:	4798      	blx	r3
 800c568:	2000      	movs	r0, #0
 800c56a:	e7e0      	b.n	800c52e <_raise_r+0x12>

0800c56c <raise>:
 800c56c:	4b02      	ldr	r3, [pc, #8]	; (800c578 <raise+0xc>)
 800c56e:	4601      	mov	r1, r0
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f7ff bfd3 	b.w	800c51c <_raise_r>
 800c576:	bf00      	nop
 800c578:	20000030 	.word	0x20000030

0800c57c <_kill_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d07      	ldr	r5, [pc, #28]	; (800c59c <_kill_r+0x20>)
 800c580:	2300      	movs	r3, #0
 800c582:	4604      	mov	r4, r0
 800c584:	4608      	mov	r0, r1
 800c586:	4611      	mov	r1, r2
 800c588:	602b      	str	r3, [r5, #0]
 800c58a:	f7f6 fd33 	bl	8002ff4 <_kill>
 800c58e:	1c43      	adds	r3, r0, #1
 800c590:	d102      	bne.n	800c598 <_kill_r+0x1c>
 800c592:	682b      	ldr	r3, [r5, #0]
 800c594:	b103      	cbz	r3, 800c598 <_kill_r+0x1c>
 800c596:	6023      	str	r3, [r4, #0]
 800c598:	bd38      	pop	{r3, r4, r5, pc}
 800c59a:	bf00      	nop
 800c59c:	200049f0 	.word	0x200049f0

0800c5a0 <_getpid_r>:
 800c5a0:	f7f6 bd20 	b.w	8002fe4 <_getpid>

0800c5a4 <__sread>:
 800c5a4:	b510      	push	{r4, lr}
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ac:	f000 f894 	bl	800c6d8 <_read_r>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	bfab      	itete	ge
 800c5b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c5b8:	181b      	addge	r3, r3, r0
 800c5ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5be:	bfac      	ite	ge
 800c5c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5c2:	81a3      	strhlt	r3, [r4, #12]
 800c5c4:	bd10      	pop	{r4, pc}

0800c5c6 <__swrite>:
 800c5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5ca:	461f      	mov	r7, r3
 800c5cc:	898b      	ldrh	r3, [r1, #12]
 800c5ce:	05db      	lsls	r3, r3, #23
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	4616      	mov	r6, r2
 800c5d6:	d505      	bpl.n	800c5e4 <__swrite+0x1e>
 800c5d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5dc:	2302      	movs	r3, #2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	f000 f868 	bl	800c6b4 <_lseek_r>
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5ee:	81a3      	strh	r3, [r4, #12]
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	463b      	mov	r3, r7
 800c5f4:	4628      	mov	r0, r5
 800c5f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5fa:	f000 b817 	b.w	800c62c <_write_r>

0800c5fe <__sseek>:
 800c5fe:	b510      	push	{r4, lr}
 800c600:	460c      	mov	r4, r1
 800c602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c606:	f000 f855 	bl	800c6b4 <_lseek_r>
 800c60a:	1c43      	adds	r3, r0, #1
 800c60c:	89a3      	ldrh	r3, [r4, #12]
 800c60e:	bf15      	itete	ne
 800c610:	6560      	strne	r0, [r4, #84]	; 0x54
 800c612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c61a:	81a3      	strheq	r3, [r4, #12]
 800c61c:	bf18      	it	ne
 800c61e:	81a3      	strhne	r3, [r4, #12]
 800c620:	bd10      	pop	{r4, pc}

0800c622 <__sclose>:
 800c622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c626:	f000 b813 	b.w	800c650 <_close_r>
	...

0800c62c <_write_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d07      	ldr	r5, [pc, #28]	; (800c64c <_write_r+0x20>)
 800c630:	4604      	mov	r4, r0
 800c632:	4608      	mov	r0, r1
 800c634:	4611      	mov	r1, r2
 800c636:	2200      	movs	r2, #0
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f7f6 fd11 	bl	8003062 <_write>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_write_r+0x1e>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_write_r+0x1e>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	200049f0 	.word	0x200049f0

0800c650 <_close_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d06      	ldr	r5, [pc, #24]	; (800c66c <_close_r+0x1c>)
 800c654:	2300      	movs	r3, #0
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	602b      	str	r3, [r5, #0]
 800c65c:	f7f6 fd1d 	bl	800309a <_close>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_close_r+0x1a>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b103      	cbz	r3, 800c66a <_close_r+0x1a>
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	200049f0 	.word	0x200049f0

0800c670 <_fstat_r>:
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4d07      	ldr	r5, [pc, #28]	; (800c690 <_fstat_r+0x20>)
 800c674:	2300      	movs	r3, #0
 800c676:	4604      	mov	r4, r0
 800c678:	4608      	mov	r0, r1
 800c67a:	4611      	mov	r1, r2
 800c67c:	602b      	str	r3, [r5, #0]
 800c67e:	f7f6 fd18 	bl	80030b2 <_fstat>
 800c682:	1c43      	adds	r3, r0, #1
 800c684:	d102      	bne.n	800c68c <_fstat_r+0x1c>
 800c686:	682b      	ldr	r3, [r5, #0]
 800c688:	b103      	cbz	r3, 800c68c <_fstat_r+0x1c>
 800c68a:	6023      	str	r3, [r4, #0]
 800c68c:	bd38      	pop	{r3, r4, r5, pc}
 800c68e:	bf00      	nop
 800c690:	200049f0 	.word	0x200049f0

0800c694 <_isatty_r>:
 800c694:	b538      	push	{r3, r4, r5, lr}
 800c696:	4d06      	ldr	r5, [pc, #24]	; (800c6b0 <_isatty_r+0x1c>)
 800c698:	2300      	movs	r3, #0
 800c69a:	4604      	mov	r4, r0
 800c69c:	4608      	mov	r0, r1
 800c69e:	602b      	str	r3, [r5, #0]
 800c6a0:	f7f6 fd17 	bl	80030d2 <_isatty>
 800c6a4:	1c43      	adds	r3, r0, #1
 800c6a6:	d102      	bne.n	800c6ae <_isatty_r+0x1a>
 800c6a8:	682b      	ldr	r3, [r5, #0]
 800c6aa:	b103      	cbz	r3, 800c6ae <_isatty_r+0x1a>
 800c6ac:	6023      	str	r3, [r4, #0]
 800c6ae:	bd38      	pop	{r3, r4, r5, pc}
 800c6b0:	200049f0 	.word	0x200049f0

0800c6b4 <_lseek_r>:
 800c6b4:	b538      	push	{r3, r4, r5, lr}
 800c6b6:	4d07      	ldr	r5, [pc, #28]	; (800c6d4 <_lseek_r+0x20>)
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	4608      	mov	r0, r1
 800c6bc:	4611      	mov	r1, r2
 800c6be:	2200      	movs	r2, #0
 800c6c0:	602a      	str	r2, [r5, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	f7f6 fd10 	bl	80030e8 <_lseek>
 800c6c8:	1c43      	adds	r3, r0, #1
 800c6ca:	d102      	bne.n	800c6d2 <_lseek_r+0x1e>
 800c6cc:	682b      	ldr	r3, [r5, #0]
 800c6ce:	b103      	cbz	r3, 800c6d2 <_lseek_r+0x1e>
 800c6d0:	6023      	str	r3, [r4, #0]
 800c6d2:	bd38      	pop	{r3, r4, r5, pc}
 800c6d4:	200049f0 	.word	0x200049f0

0800c6d8 <_read_r>:
 800c6d8:	b538      	push	{r3, r4, r5, lr}
 800c6da:	4d07      	ldr	r5, [pc, #28]	; (800c6f8 <_read_r+0x20>)
 800c6dc:	4604      	mov	r4, r0
 800c6de:	4608      	mov	r0, r1
 800c6e0:	4611      	mov	r1, r2
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	602a      	str	r2, [r5, #0]
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	f7f6 fc9e 	bl	8003028 <_read>
 800c6ec:	1c43      	adds	r3, r0, #1
 800c6ee:	d102      	bne.n	800c6f6 <_read_r+0x1e>
 800c6f0:	682b      	ldr	r3, [r5, #0]
 800c6f2:	b103      	cbz	r3, 800c6f6 <_read_r+0x1e>
 800c6f4:	6023      	str	r3, [r4, #0]
 800c6f6:	bd38      	pop	{r3, r4, r5, pc}
 800c6f8:	200049f0 	.word	0x200049f0

0800c6fc <_init>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	bf00      	nop
 800c700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c702:	bc08      	pop	{r3}
 800c704:	469e      	mov	lr, r3
 800c706:	4770      	bx	lr

0800c708 <_fini>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	bf00      	nop
 800c70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70e:	bc08      	pop	{r3}
 800c710:	469e      	mov	lr, r3
 800c712:	4770      	bx	lr
